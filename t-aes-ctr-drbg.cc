/*
 * This file is part of vbig.
 * Copyright (C) 2015 Richard Kettlewell
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "CtrDrbg.h"
#include <cstring>
#include <cassert>
#include <cstdio>

/* Test vectors are from NIST CAVP */

int main() {
  /* CAVS 14.3 */
  /* DRBG800-90A information for "drbg_pr" */
  /* Generated on Tue Apr 02 15:42:28 2013 */
  /* c1d8e6d3dfc225eb8d36c44443eccd70663139fd839b1dc32e87ead6db998b3e3967e400f8866e2c23a0b3e96f00cce25b9a79f27774cb32ac3d5da84015594e */
  /* CTR_DRBG options: 3KeyTDEA use df :: AES-128 use df :: AES-192 use df :: AES-256 use df :: 3KeyTDEA no df :: AES-128 no df :: AES-192 no df :: AES-256 no df */
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10262 */
  {
    static const uint8_t entropy_1[] = { 0xce, 0x50, 0xf3, 0x3d, 0xa5, 0xd4, 0xc1, 0xd3, 0xd4, 0x00, 0x4e, 0xb3, 0x52, 0x44, 0xb7, 0xf2, 0xcd, 0x7f, 0x2e, 0x50, 0x76, 0xfb, 0xf6, 0x78, 0x0a, 0x7f, 0xf6, 0x34, 0xb2, 0x49, 0xa5, 0xfc};
    static const uint8_t returned_2[] = { 0x65, 0x45, 0xc0, 0x52, 0x9d, 0x37, 0x24, 0x43, 0xb3, 0x92, 0xce, 0xb3, 0xae, 0x3a, 0x99, 0xa3, 0x0f, 0x96, 0x3e, 0xaf, 0x31, 0x32, 0x80, 0xf1, 0xd1, 0xa1, 0xe8, 0x7f, 0x9d, 0xb3, 0x73, 0xd3, 0x61, 0xe7, 0x5d, 0x18, 0x01, 0x82, 0x66, 0x49, 0x9c, 0xcc, 0xd6, 0x4d, 0x9b, 0xbb, 0x8d, 0xe0, 0x18, 0x5f, 0x21, 0x33, 0x83, 0x08, 0x0f, 0xad, 0xde, 0xc4, 0x6b, 0xae, 0x1f, 0x78, 0x4e, 0x5a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_1, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_2, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10270 */
  {
    static const uint8_t entropy_3[] = { 0xa3, 0x85, 0xf7, 0x0a, 0x4d, 0x45, 0x03, 0x21, 0xdf, 0xd1, 0x8d, 0x83, 0x79, 0xef, 0x8e, 0x77, 0x36, 0xfe, 0xe5, 0xfb, 0xf0, 0xa0, 0xae, 0xa5, 0x3b, 0x76, 0x69, 0x60, 0x94, 0xe8, 0xaa, 0x93};
    static const uint8_t returned_4[] = { 0x1a, 0x06, 0x25, 0x53, 0xab, 0x60, 0x45, 0x7e, 0xd1, 0xf1, 0xc5, 0x2f, 0x5a, 0xca, 0x5a, 0x3b, 0xe5, 0x64, 0xa2, 0x75, 0x45, 0x35, 0x8c, 0x11, 0x2e, 0xd9, 0x2c, 0x6e, 0xae, 0x2c, 0xb7, 0x59, 0x7c, 0xfc, 0xc2, 0xe0, 0xa5, 0xdd, 0x81, 0xc5, 0xbf, 0xec, 0xc9, 0x41, 0xda, 0x5e, 0x81, 0x52, 0xa9, 0x01, 0x0d, 0x48, 0x45, 0x17, 0x07, 0x34, 0x67, 0x6c, 0x8c, 0x1b, 0x6b, 0x30, 0x73, 0xa5};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_3, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_4, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10278 */
  {
    static const uint8_t entropy_5[] = { 0xd4, 0xf4, 0x7c, 0x38, 0x5e, 0x5e, 0xe3, 0x69, 0x15, 0x97, 0x83, 0x86, 0xa0, 0x74, 0xd4, 0x13, 0xd0, 0x4a, 0x1c, 0xe3, 0xa1, 0x3a, 0x0f, 0xe2, 0xb1, 0x7f, 0x3f, 0x20, 0xf8, 0x3a, 0x93, 0xfd};
    static const uint8_t returned_6[] = { 0x27, 0xf8, 0x80, 0xdf, 0x4c, 0x29, 0x07, 0x69, 0x7f, 0xb2, 0xf5, 0x94, 0xe3, 0x11, 0x55, 0x9c, 0xea, 0x82, 0x70, 0x49, 0x32, 0x7a, 0xf3, 0x1f, 0xa7, 0xf0, 0xcb, 0xf3, 0x32, 0xc4, 0x62, 0x06, 0x74, 0xf5, 0x03, 0xd7, 0xdc, 0x37, 0x83, 0x20, 0xd2, 0x28, 0x90, 0x71, 0x51, 0xd3, 0x2e, 0xe5, 0xe3, 0xf5, 0xc5, 0xec, 0xcb, 0x13, 0xaf, 0xe5, 0x8b, 0xf6, 0xa6, 0x01, 0x92, 0xe6, 0xd7, 0x0e};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_5, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_6, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10286 */
  {
    static const uint8_t entropy_7[] = { 0x12, 0x3d, 0xd8, 0x2c, 0x6a, 0x8d, 0x6a, 0x5f, 0x23, 0x06, 0x77, 0x02, 0xe8, 0x22, 0x27, 0x33, 0xa3, 0x9c, 0x48, 0x96, 0x5b, 0xac, 0xcd, 0x9b, 0xff, 0xed, 0x5d, 0xc5, 0x1c, 0xb7, 0x89, 0xb6};
    static const uint8_t returned_8[] = { 0x12, 0xdd, 0x6a, 0x87, 0x4a, 0x46, 0x56, 0xc7, 0xd5, 0xa2, 0x1c, 0xb1, 0x17, 0x9b, 0x3c, 0x4a, 0x99, 0x82, 0xae, 0x00, 0xfc, 0x1b, 0xf2, 0x6c, 0xb3, 0xa1, 0x39, 0xcb, 0x21, 0xc4, 0x50, 0x50, 0x45, 0xff, 0x5e, 0x22, 0x3e, 0x2d, 0x08, 0x1f, 0xee, 0x52, 0xb2, 0x22, 0x46, 0xd4, 0x85, 0xb9, 0xf1, 0x27, 0x4a, 0xef, 0x79, 0xa3, 0x30, 0x1d, 0x26, 0x36, 0x99, 0x97, 0x99, 0xaa, 0xd3, 0x1d};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_7, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_8, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10294 */
  {
    static const uint8_t entropy_9[] = { 0xf1, 0xa6, 0x9a, 0xf8, 0x90, 0xb2, 0xc9, 0x79, 0xfa, 0xe0, 0x46, 0xa2, 0xb5, 0x8d, 0x00, 0xa8, 0x33, 0x1c, 0x53, 0x22, 0x47, 0x2b, 0x0e, 0x61, 0x9b, 0xb3, 0x72, 0xbf, 0xd0, 0x27, 0xf7, 0x05};
    static const uint8_t returned_10[] = { 0x96, 0x09, 0x12, 0x58, 0xc4, 0x22, 0x4e, 0x3b, 0x03, 0xd6, 0x5c, 0x93, 0x8c, 0x97, 0x83, 0x2b, 0x55, 0x14, 0x30, 0x69, 0xdb, 0x57, 0x55, 0x19, 0x6d, 0x52, 0xf5, 0x25, 0xbe, 0x95, 0x9d, 0x51, 0x9b, 0x1e, 0x02, 0xe5, 0xf2, 0xda, 0xbf, 0x4d, 0xd2, 0x16, 0x4f, 0x9b, 0xb0, 0x6a, 0x16, 0xa6, 0x35, 0x76, 0xff, 0x6d, 0xeb, 0x04, 0x2d, 0xab, 0x74, 0x03, 0x39, 0x16, 0xc9, 0x54, 0x98, 0xc1};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_9, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_10, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10302 */
  {
    static const uint8_t entropy_11[] = { 0x14, 0xa9, 0xa1, 0xe2, 0x0c, 0xa3, 0x68, 0x6f, 0x3e, 0xc0, 0x96, 0x03, 0xf6, 0x73, 0x0b, 0xdd, 0x73, 0xa9, 0xcc, 0x8c, 0x32, 0x38, 0x8e, 0xc0, 0x0b, 0xc2, 0x8e, 0x6c, 0x9e, 0xc6, 0x5d, 0x87};
    static const uint8_t returned_12[] = { 0xc1, 0x29, 0x46, 0x45, 0x7a, 0xd8, 0x9d, 0xde, 0x78, 0x8e, 0x13, 0xc5, 0x09, 0x2b, 0xbf, 0x3e, 0x9c, 0x7f, 0x61, 0xea, 0xc7, 0x32, 0x61, 0xd0, 0x1d, 0x39, 0x6a, 0x1d, 0x9d, 0x11, 0x63, 0xee, 0xe8, 0x47, 0xa5, 0x61, 0xd8, 0xe5, 0x20, 0x80, 0xcd, 0x9b, 0xdc, 0xe5, 0x70, 0x14, 0x17, 0x82, 0xeb, 0xf1, 0x67, 0xc4, 0x70, 0x0a, 0x66, 0xac, 0xa6, 0xfd, 0x5c, 0x91, 0x16, 0xa7, 0xbe, 0x49};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_11, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_12, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10310 */
  {
    static const uint8_t entropy_13[] = { 0x97, 0x26, 0x1a, 0x2c, 0x19, 0xc6, 0xdc, 0x36, 0xa6, 0xd0, 0x28, 0x3a, 0x17, 0x7e, 0xb9, 0x66, 0x6c, 0x21, 0x81, 0x7f, 0xc0, 0xfc, 0xa4, 0x62, 0xc5, 0x3d, 0x90, 0xb3, 0xd8, 0x14, 0xcd, 0x92};
    static const uint8_t returned_14[] = { 0xb4, 0x74, 0xf2, 0x74, 0x3b, 0x61, 0x82, 0xb0, 0x51, 0xfc, 0x7c, 0x76, 0xc6, 0xb4, 0x08, 0x5b, 0x2f, 0x59, 0x76, 0x39, 0xca, 0x19, 0xc1, 0xee, 0xe0, 0x5c, 0x1c, 0xf4, 0x39, 0xbb, 0x8e, 0xdb, 0xe0, 0x93, 0xd0, 0xb2, 0x23, 0x9d, 0xe5, 0xd0, 0xf7, 0x9b, 0xeb, 0xf0, 0xe6, 0x22, 0xfe, 0x04, 0xb5, 0x13, 0x59, 0x7e, 0xd1, 0xd8, 0xa0, 0x28, 0x21, 0xa0, 0xbc, 0xa4, 0x35, 0xd1, 0xfb, 0xde};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_13, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_14, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10318 */
  {
    static const uint8_t entropy_15[] = { 0x9f, 0xdd, 0xe0, 0xf7, 0xeb, 0xa6, 0x53, 0x81, 0xbf, 0x63, 0x7d, 0x7b, 0x7e, 0x6f, 0xbc, 0x20, 0xde, 0xef, 0x90, 0x60, 0x13, 0x01, 0x86, 0x55, 0xf8, 0xd1, 0x2d, 0x74, 0x7d, 0xb8, 0xe2, 0x25};
    static const uint8_t returned_16[] = { 0xf4, 0xa5, 0x5a, 0xa4, 0xc2, 0x45, 0xcd, 0x42, 0xa1, 0xb6, 0x42, 0x96, 0x37, 0xb0, 0x77, 0x41, 0x89, 0xef, 0x4e, 0x50, 0x53, 0xbe, 0xf0, 0x6b, 0xbf, 0x42, 0x2b, 0x2f, 0x10, 0x39, 0x9e, 0x18, 0xb9, 0xf8, 0x6d, 0xcc, 0x56, 0xaa, 0xa6, 0x97, 0x5e, 0xa1, 0x56, 0x22, 0xcd, 0xeb, 0xf3, 0x6a, 0x3f, 0x47, 0x78, 0x44, 0x7b, 0xb2, 0x3a, 0x20, 0x44, 0xc2, 0x83, 0xa7, 0x99, 0x03, 0xbe, 0xac};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_15, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_16, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10326 */
  {
    static const uint8_t entropy_17[] = { 0xaf, 0x62, 0x29, 0x9f, 0x37, 0x89, 0x53, 0x32, 0xd2, 0x83, 0xff, 0x9f, 0x3b, 0x0c, 0xa2, 0x9f, 0x90, 0x03, 0x57, 0x18, 0x93, 0xdd, 0xd1, 0xbc, 0x2d, 0x28, 0x63, 0x3a, 0x33, 0x99, 0x2b, 0x4a};
    static const uint8_t returned_18[] = { 0xb9, 0x17, 0x19, 0xf2, 0xd1, 0x29, 0x7f, 0xa9, 0xc5, 0x17, 0x20, 0xab, 0x94, 0x48, 0x22, 0x8e, 0x33, 0x35, 0x94, 0xa7, 0xa1, 0xc0, 0xa5, 0xd7, 0xa1, 0x0a, 0xe8, 0x82, 0x49, 0xdc, 0x0c, 0xc5, 0xd0, 0x7a, 0xbe, 0x20, 0xb7, 0x91, 0x5d, 0x2a, 0x87, 0xf1, 0x2e, 0xc4, 0xbc, 0xdf, 0x44, 0xef, 0xa9, 0x11, 0xf2, 0x8c, 0x5e, 0x9e, 0x39, 0x09, 0x01, 0x8e, 0x4a, 0x6b, 0xd1, 0xb5, 0x36, 0x3b};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_17, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_18, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10334 */
  {
    static const uint8_t entropy_19[] = { 0x42, 0xfe, 0x0a, 0xd0, 0x88, 0xd5, 0xc1, 0xd6, 0xbe, 0x9e, 0x02, 0xc1, 0x47, 0xd5, 0x77, 0x0c, 0x9a, 0xa0, 0xa9, 0x77, 0xc6, 0x30, 0x0c, 0xd9, 0xae, 0xc9, 0x40, 0xcd, 0x15, 0xec, 0xfb, 0x8d};
    static const uint8_t returned_20[] = { 0xbd, 0x1a, 0x65, 0xbb, 0x65, 0xb5, 0x5e, 0xc4, 0xd6, 0x27, 0x9c, 0xb9, 0x4d, 0xbf, 0x3b, 0xcd, 0x82, 0xbc, 0xe0, 0x9f, 0xa2, 0x77, 0xbf, 0xea, 0x50, 0xb5, 0xda, 0xb6, 0x4b, 0x06, 0xc0, 0x18, 0x15, 0x70, 0x03, 0x2a, 0x3a, 0x6f, 0x7d, 0xee, 0x5b, 0x2c, 0xce, 0xa3, 0x4b, 0xc6, 0x92, 0x8d, 0xb1, 0x1d, 0xec, 0x93, 0x29, 0xed, 0x90, 0xd1, 0x09, 0xc0, 0xbc, 0xca, 0x7c, 0xe7, 0xa4, 0x28};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_19, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_20, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10342 */
  {
    static const uint8_t entropy_21[] = { 0x74, 0x4e, 0xd7, 0x4d, 0x83, 0xba, 0xcf, 0x92, 0xd4, 0xbd, 0x4d, 0xd0, 0x52, 0x45, 0x8b, 0xd8, 0xaf, 0x10, 0x39, 0x1c, 0x66, 0xfc, 0x89, 0xe1, 0x39, 0x74, 0x42, 0x63, 0x20, 0xaa, 0x47, 0x4a};
    static const uint8_t returned_22[] = { 0x8d, 0xdd, 0x02, 0x70, 0xb0, 0x7f, 0xbb, 0xd3, 0x39, 0xbc, 0x83, 0xea, 0x7a, 0x1d, 0x98, 0x6e, 0xe8, 0xe1, 0xa0, 0x61, 0xc7, 0xe3, 0x1c, 0x5d, 0xbd, 0xcc, 0xab, 0xc8, 0xf2, 0x52, 0x27, 0x83, 0x2e, 0xc4, 0x5f, 0x5e, 0xf9, 0xf2, 0x8c, 0xa0, 0x44, 0x6d, 0x84, 0x4d, 0xaa, 0xdd, 0x19, 0x20, 0x24, 0xc4, 0xd3, 0x68, 0x54, 0xfa, 0x23, 0xb5, 0x8a, 0x8b, 0x97, 0x94, 0xdb, 0x6d, 0x3a, 0xcb};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_21, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_22, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10350 */
  {
    static const uint8_t entropy_23[] = { 0x88, 0x4e, 0x9f, 0xaa, 0x66, 0x1d, 0xce, 0xcc, 0x37, 0x65, 0xc7, 0x97, 0xa2, 0xaf, 0x89, 0x06, 0xfb, 0x89, 0x38, 0x13, 0xa3, 0x96, 0xe0, 0x2b, 0x94, 0x99, 0x38, 0x26, 0x28, 0x8d, 0x2a, 0x6d};
    static const uint8_t returned_24[] = { 0x18, 0x48, 0x1d, 0xc4, 0x5c, 0xa3, 0xf1, 0x89, 0x6f, 0xe6, 0x39, 0x4a, 0x23, 0x67, 0xd4, 0x4c, 0x4e, 0x45, 0x8b, 0x45, 0x5c, 0x9f, 0x36, 0xa5, 0xd5, 0xac, 0x2b, 0x6a, 0x74, 0x75, 0xcf, 0x75, 0x99, 0xa9, 0x37, 0x8f, 0x9c, 0xc7, 0x2f, 0xfc, 0xdb, 0xea, 0x71, 0xf0, 0x9c, 0x9a, 0x24, 0x4a, 0x36, 0xcd, 0x66, 0x0b, 0x72, 0x25, 0x46, 0xea, 0x2a, 0xf4, 0xf3, 0xe7, 0x75, 0x96, 0xec, 0x25};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_23, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_24, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10358 */
  {
    static const uint8_t entropy_25[] = { 0x31, 0xd1, 0x08, 0xfe, 0x0d, 0x40, 0xfe, 0x05, 0xc9, 0xed, 0x83, 0x72, 0xc3, 0xbc, 0x09, 0xd1, 0x05, 0x8b, 0x39, 0x7b, 0x90, 0x06, 0xfb, 0x37, 0x3c, 0xdd, 0x16, 0xa5, 0xa4, 0x0e, 0x2c, 0xc1};
    static const uint8_t returned_26[] = { 0x80, 0x82, 0x24, 0x50, 0xb0, 0x48, 0x7e, 0x70, 0xad, 0xa9, 0x48, 0xda, 0x0b, 0x25, 0xcc, 0x49, 0xa3, 0x7d, 0xc5, 0x8e, 0x0d, 0xad, 0x92, 0x33, 0xba, 0xdd, 0x0e, 0x88, 0xdf, 0x52, 0x0d, 0x36, 0x54, 0x30, 0x0f, 0x08, 0x1b, 0x02, 0xe8, 0x54, 0x5d, 0x6d, 0x68, 0x18, 0xb8, 0x2e, 0x45, 0x96, 0x4d, 0xb8, 0x63, 0x3f, 0xc7, 0x69, 0xaf, 0x84, 0xa9, 0x79, 0x9e, 0x92, 0xa1, 0xbb, 0x0d, 0x61};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_25, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_26, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10366 */
  {
    static const uint8_t entropy_27[] = { 0xd5, 0x46, 0x4a, 0x18, 0xaa, 0xb8, 0x87, 0x3d, 0x63, 0xf5, 0x72, 0xf6, 0x73, 0x8e, 0xf2, 0x7a, 0x39, 0x84, 0x5a, 0x31, 0xa2, 0x11, 0x70, 0x03, 0x10, 0x32, 0x1e, 0x42, 0xb6, 0x62, 0x0b, 0x4a};
    static const uint8_t returned_28[] = { 0xe2, 0xb5, 0x31, 0xea, 0x43, 0xc5, 0x13, 0xa1, 0x56, 0x4f, 0xa6, 0x5e, 0x9a, 0x68, 0xd4, 0x3c, 0x87, 0x51, 0x37, 0x77, 0x31, 0x02, 0x94, 0x1d, 0x0e, 0xf5, 0x44, 0xc8, 0x4e, 0x36, 0x89, 0xb8, 0x2e, 0xac, 0x32, 0xd8, 0xe2, 0x9c, 0xce, 0x42, 0xea, 0xe3, 0x93, 0xe0, 0x86, 0xab, 0x81, 0xf7, 0x05, 0x20, 0x17, 0x92, 0x88, 0xc5, 0x2c, 0xbb, 0x64, 0x48, 0x69, 0x97, 0x23, 0x86, 0x5b, 0x49};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_27, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_28, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10374 */
  {
    static const uint8_t entropy_29[] = { 0x72, 0x7c, 0x0a, 0xc7, 0x5a, 0x99, 0xbb, 0x1a, 0x31, 0x8e, 0x4f, 0xe2, 0xfe, 0x0f, 0x2e, 0x31, 0x2b, 0x3b, 0x61, 0xd8, 0x2b, 0x2e, 0x50, 0x71, 0xac, 0xfb, 0x4a, 0x36, 0xbc, 0x82, 0x58, 0xc1};
    static const uint8_t returned_30[] = { 0xf5, 0x95, 0xee, 0x1a, 0xf4, 0x37, 0xfe, 0x1b, 0xed, 0x8d, 0x45, 0x10, 0x88, 0xb7, 0x88, 0xf1, 0xcd, 0x59, 0x9f, 0x2b, 0x0c, 0x47, 0xfe, 0xac, 0x1f, 0xb5, 0xc6, 0xef, 0xbf, 0x7a, 0x14, 0xa8, 0xab, 0x0e, 0xa1, 0x1a, 0x35, 0x69, 0xa3, 0xc2, 0x3b, 0x2a, 0x97, 0x02, 0xb4, 0x15, 0xbd, 0xa3, 0x55, 0xc1, 0x5a, 0xfd, 0x27, 0x5c, 0x0d, 0x67, 0xb3, 0x8b, 0xcf, 0xb5, 0x4a, 0xb1, 0x3f, 0x70};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_29, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_30, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10518 */
  {
    static const uint8_t entropy_31[] = { 0xce, 0xe2, 0x3d, 0xe8, 0x6a, 0x69, 0xc7, 0xef, 0x57, 0xf6, 0xe1, 0xe1, 0x2b, 0xd1, 0x6e, 0x35, 0xe5, 0x16, 0x24, 0x22, 0x6f, 0xa1, 0x95, 0x97, 0xbf, 0x93, 0xec, 0x47, 0x6a, 0x44, 0xb0, 0xf2};
    static const uint8_t returned_32[] = { 0x2a, 0x76, 0xd7, 0x1b, 0x32, 0x9f, 0x44, 0x9c, 0x98, 0xdc, 0x08, 0xff, 0xf1, 0xd2, 0x05, 0xa2, 0xfb, 0xd9, 0xe4, 0xad, 0xe1, 0x20, 0xc7, 0x61, 0x1c, 0x22, 0x5c, 0x98, 0x4e, 0xac, 0x85, 0x31, 0x28, 0x8d, 0xd3, 0x04, 0x9f, 0x3d, 0xc3, 0xbb, 0x36, 0x71, 0x50, 0x1a, 0xb8, 0xfb, 0xf9, 0xad, 0x49, 0xc8, 0x6c, 0xce, 0x30, 0x76, 0x53, 0xbd, 0x8c, 0xaf, 0x29, 0xcb, 0x0c, 0xf0, 0x77, 0x64};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_33[] = { 0xa2, 0xef, 0x16, 0xf2, 0x26, 0xea, 0x32, 0x4f, 0x23, 0xab, 0xd5, 0x9d, 0x5e, 0x3c, 0x66, 0x05, 0x61, 0xc2, 0x5e, 0x73, 0x63, 0x8f, 0xe2, 0x1c, 0x87, 0x56, 0x6e, 0x86, 0xa9, 0xe0, 0x4c, 0x3e};
    rng.instantiate(entropy_31, personalization_33, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_32, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10526 */
  {
    static const uint8_t entropy_34[] = { 0xb0, 0x9e, 0xb4, 0xa8, 0x2a, 0x39, 0x06, 0x6e, 0xc9, 0x45, 0xbb, 0x7c, 0x6a, 0xef, 0x6a, 0x06, 0x82, 0xa6, 0x2c, 0x3e, 0x67, 0x4b, 0xd9, 0x00, 0x29, 0x7d, 0x42, 0x71, 0xa5, 0xf2, 0x5b, 0x49};
    static const uint8_t returned_35[] = { 0x5a, 0x1c, 0x26, 0x80, 0x3f, 0x3f, 0xfd, 0x4d, 0xaf, 0x32, 0x04, 0x2f, 0xdc, 0xc3, 0x2c, 0x38, 0x12, 0xbb, 0x5e, 0xf1, 0x3b, 0xc2, 0x08, 0xce, 0xf8, 0x2e, 0xa0, 0x47, 0xd2, 0x89, 0x0a, 0x6f, 0x5d, 0xce, 0xcf, 0x32, 0xbc, 0xc3, 0x2a, 0x25, 0x85, 0x77, 0x5a, 0xc5, 0xe1, 0xff, 0xaa, 0x8d, 0xe0, 0x06, 0x64, 0xc5, 0x4f, 0xe0, 0x0a, 0x76, 0x74, 0xb9, 0x85, 0x61, 0x9e, 0x95, 0x3c, 0x3a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_36[] = { 0xa3, 0xb7, 0x68, 0xad, 0xcf, 0xe7, 0x6d, 0x61, 0xc9, 0x72, 0xd9, 0x00, 0xda, 0x8d, 0xff, 0xee, 0xb2, 0xa4, 0x2e, 0x74, 0x02, 0x47, 0xaa, 0x71, 0x9e, 0xd1, 0xc9, 0x24, 0xd2, 0xd1, 0x0b, 0xd4};
    rng.instantiate(entropy_34, personalization_36, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_35, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10534 */
  {
    static const uint8_t entropy_37[] = { 0x0b, 0xbc, 0x89, 0x8f, 0x8d, 0xaf, 0x3f, 0x12, 0xfc, 0x00, 0x9c, 0x84, 0x6f, 0xe2, 0xce, 0xa2, 0x2f, 0x68, 0x3a, 0x43, 0x2e, 0xea, 0x29, 0x72, 0x57, 0x31, 0x2d, 0x5a, 0x44, 0xba, 0xc1, 0x31};
    static const uint8_t returned_38[] = { 0xda, 0x49, 0xe2, 0x4a, 0x6c, 0xb1, 0xd9, 0xe5, 0x1b, 0x98, 0xea, 0x61, 0x03, 0x62, 0x7d, 0x9a, 0xd0, 0x35, 0x77, 0x0b, 0x7b, 0xdc, 0x76, 0x06, 0x06, 0xe2, 0xb5, 0xf3, 0x5a, 0xfd, 0x13, 0xb7, 0xa6, 0x1a, 0x4a, 0x18, 0xfa, 0xc2, 0x52, 0x58, 0x98, 0x5f, 0xa1, 0xfb, 0x2b, 0x88, 0xa7, 0xcc, 0x17, 0x27, 0x8b, 0x05, 0x39, 0xd7, 0xcf, 0x74, 0xf9, 0x40, 0xf0, 0x08, 0xee, 0x2c, 0xf4, 0xcd};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_39[] = { 0x8d, 0x34, 0xbe, 0x9d, 0x81, 0x10, 0xb8, 0x4b, 0x02, 0xa6, 0x05, 0x08, 0xde, 0xae, 0x77, 0x3c, 0x1a, 0x80, 0x8f, 0x4e, 0x2a, 0x0e, 0xc8, 0x17, 0x47, 0xae, 0x2e, 0xc9, 0x23, 0xfe, 0x99, 0xa9};
    rng.instantiate(entropy_37, personalization_39, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_38, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10542 */
  {
    static const uint8_t entropy_40[] = { 0x3e, 0xa1, 0xf3, 0xfb, 0x15, 0x36, 0x36, 0xc3, 0x39, 0x82, 0x46, 0x4f, 0x0e, 0x5b, 0x0d, 0xae, 0xba, 0x59, 0xc3, 0xf1, 0xee, 0x91, 0xa6, 0x12, 0xc4, 0xf6, 0xa9, 0xdc, 0xfc, 0xd0, 0xa9, 0x78};
    static const uint8_t returned_41[] = { 0x24, 0x29, 0xe7, 0xd8, 0x17, 0xcf, 0xd4, 0xf8, 0x50, 0x09, 0x48, 0xd2, 0xec, 0x2d, 0xec, 0x02, 0xb7, 0xd0, 0x35, 0xb4, 0xbb, 0x98, 0x61, 0x44, 0xbb, 0x91, 0x8a, 0x31, 0xbf, 0xd2, 0x26, 0x9e, 0x69, 0x07, 0xc3, 0x4a, 0xc8, 0xbe, 0xab, 0x69, 0x50, 0x88, 0x69, 0xa4, 0xf0, 0x4b, 0xc3, 0xc2, 0x3c, 0xcf, 0xba, 0xe5, 0xd5, 0x9e, 0xab, 0x85, 0x7e, 0xce, 0x00, 0x0d, 0x55, 0x4b, 0x27, 0x3a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_42[] = { 0xea, 0x86, 0x71, 0xfc, 0x9c, 0x02, 0x58, 0x4d, 0x69, 0xaf, 0x91, 0xde, 0x2a, 0xda, 0xce, 0xc1, 0x40, 0x8d, 0x91, 0xd5, 0x12, 0x71, 0x89, 0x45, 0xed, 0x1e, 0x7d, 0xc0, 0xb6, 0x20, 0xb3, 0x23};
    rng.instantiate(entropy_40, personalization_42, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_41, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10550 */
  {
    static const uint8_t entropy_43[] = { 0xb6, 0xb2, 0x03, 0x3e, 0x38, 0x2d, 0xec, 0xd2, 0x1e, 0x4e, 0xab, 0xd8, 0xf1, 0x17, 0x77, 0x61, 0xd0, 0x6a, 0x12, 0xba, 0xe1, 0xcf, 0xed, 0x00, 0x59, 0xb7, 0xe1, 0x6b, 0xd9, 0xba, 0xb8, 0xd7};
    static const uint8_t returned_44[] = { 0x63, 0x62, 0x66, 0x08, 0xb4, 0x46, 0xc7, 0xd0, 0x22, 0x12, 0x20, 0x9d, 0x0a, 0x38, 0x88, 0xe4, 0x05, 0x34, 0x86, 0x4d, 0x8f, 0x5c, 0xd2, 0x8a, 0xaf, 0xf0, 0x95, 0x05, 0xee, 0x5e, 0x89, 0x47, 0x51, 0xe5, 0xcb, 0x84, 0x67, 0xa5, 0xd8, 0x5d, 0x87, 0xa6, 0x75, 0xb7, 0x85, 0x27, 0x24, 0xde, 0xb0, 0xd1, 0x20, 0x38, 0x03, 0x54, 0x00, 0xc3, 0x40, 0x5f, 0xaf, 0xb1, 0xa4, 0x7f, 0x88, 0xc8};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_45[] = { 0xc9, 0x9a, 0x49, 0x13, 0x25, 0x43, 0xfc, 0xe4, 0x9b, 0x80, 0x4e, 0x9f, 0x41, 0x7d, 0x22, 0xe4, 0x9c, 0x46, 0x0b, 0xc4, 0xe6, 0x0a, 0x6d, 0x36, 0x70, 0x1f, 0xea, 0x56, 0x1b, 0x93, 0x20, 0x3d};
    rng.instantiate(entropy_43, personalization_45, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_44, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10558 */
  {
    static const uint8_t entropy_46[] = { 0xac, 0xc4, 0x65, 0xd1, 0xbf, 0x94, 0xcc, 0xde, 0xec, 0x06, 0xc7, 0x4c, 0x81, 0x2d, 0xb3, 0xa9, 0x93, 0xc4, 0x08, 0xb5, 0xc2, 0xef, 0x7e, 0xbe, 0x9b, 0xde, 0xb6, 0xa1, 0xa5, 0x19, 0x76, 0xa7};
    static const uint8_t returned_47[] = { 0xe0, 0xe6, 0xe4, 0x17, 0xde, 0x8f, 0xc5, 0xd2, 0x12, 0xbd, 0xda, 0x4c, 0x02, 0x6a, 0x13, 0xd6, 0xea, 0xe4, 0x02, 0x87, 0x4d, 0x62, 0xc3, 0x05, 0x77, 0xee, 0x4c, 0x34, 0x45, 0xac, 0xe8, 0x54, 0x79, 0xcb, 0xc3, 0xb5, 0x5b, 0xbb, 0xe1, 0x57, 0x3c, 0x13, 0xf9, 0xb0, 0x24, 0x2d, 0x7e, 0x3f, 0x6e, 0x7e, 0x91, 0xd9, 0x32, 0xb3, 0xd5, 0xa6, 0xdc, 0xa8, 0xdf, 0x43, 0xc1, 0x88, 0xae, 0x5e};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_48[] = { 0x77, 0x27, 0x8d, 0x47, 0xa1, 0x69, 0xc5, 0x59, 0x51, 0x8d, 0x46, 0xff, 0xb2, 0x3a, 0xa5, 0x94, 0xef, 0xda, 0xeb, 0xb0, 0x67, 0xc4, 0x8d, 0x4a, 0x39, 0x2f, 0x60, 0xb9, 0x4c, 0xc1, 0x5b, 0x36};
    rng.instantiate(entropy_46, personalization_48, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_47, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10566 */
  {
    static const uint8_t entropy_49[] = { 0x14, 0xb3, 0x34, 0x15, 0xd2, 0x32, 0x1f, 0xbb, 0x10, 0xa7, 0x68, 0xce, 0xd7, 0x12, 0xc8, 0x99, 0x9f, 0xf2, 0xf1, 0x9b, 0x63, 0x26, 0x4a, 0x81, 0xad, 0xc2, 0xfd, 0xc1, 0x63, 0x70, 0xb1, 0x85};
    static const uint8_t returned_50[] = { 0x8a, 0x69, 0xfe, 0xb2, 0x6b, 0xe0, 0x25, 0xa3, 0x84, 0x9b, 0xb0, 0xb6, 0x09, 0x59, 0x71, 0x7d, 0xaa, 0x59, 0xc8, 0x89, 0xc3, 0x83, 0x59, 0x3d, 0x1f, 0x8d, 0xeb, 0xf5, 0x80, 0x51, 0xeb, 0x46, 0x3d, 0x07, 0xc6, 0x59, 0xcf, 0xbe, 0x47, 0xe9, 0x42, 0x24, 0xba, 0x18, 0x83, 0x3b, 0x71, 0xd9, 0x59, 0x05, 0xe0, 0xcd, 0xe7, 0x85, 0x36, 0x4a, 0x87, 0x70, 0x6e, 0x31, 0x29, 0x7f, 0xb3, 0x23};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_51[] = { 0x02, 0x9b, 0x48, 0x80, 0x52, 0x85, 0x34, 0x9c, 0x29, 0x2a, 0x99, 0xee, 0x68, 0xfc, 0xef, 0xda, 0x1f, 0x61, 0xdd, 0x60, 0xa0, 0x9f, 0x46, 0x16, 0xcb, 0x2e, 0xfe, 0x4f, 0x8b, 0x14, 0x00, 0x56};
    rng.instantiate(entropy_49, personalization_51, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_50, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10574 */
  {
    static const uint8_t entropy_52[] = { 0x5a, 0x83, 0xaf, 0x23, 0xca, 0xfb, 0x30, 0xe3, 0xa1, 0x8e, 0x28, 0x65, 0x1b, 0x3c, 0x1b, 0xd0, 0x18, 0x13, 0xc4, 0x42, 0x16, 0xe7, 0xe4, 0x4b, 0x79, 0x0d, 0x66, 0x64, 0xe2, 0xc3, 0x83, 0x9a};
    static const uint8_t returned_53[] = { 0xe6, 0x43, 0x97, 0xf0, 0xee, 0xa0, 0xd3, 0x3d, 0x97, 0x15, 0xbc, 0xef, 0x2e, 0xe7, 0xee, 0xc2, 0x2a, 0x86, 0xe8, 0xd0, 0x66, 0xa2, 0x5e, 0x44, 0x70, 0x6d, 0xc6, 0x88, 0xc4, 0x99, 0xbd, 0x7e, 0xf0, 0x81, 0x72, 0xc8, 0xcf, 0x36, 0xe3, 0xbd, 0xdf, 0x79, 0xf2, 0xbe, 0xc1, 0x36, 0xa0, 0x1a, 0xad, 0x84, 0x49, 0x30, 0xe4, 0x8a, 0x16, 0xfe, 0x18, 0x00, 0xd6, 0x9f, 0xb0, 0xf4, 0xe1, 0x63};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_54[] = { 0xd0, 0xf1, 0x08, 0xae, 0x7c, 0x65, 0xe1, 0x6c, 0xfa, 0x13, 0xe5, 0x58, 0x22, 0x04, 0xeb, 0x8c, 0xd6, 0xeb, 0xb0, 0x8f, 0x1f, 0x6a, 0x5d, 0x47, 0x6c, 0x27, 0x52, 0x47, 0xc1, 0xa8, 0x3e, 0xb5};
    rng.instantiate(entropy_52, personalization_54, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_53, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10582 */
  {
    static const uint8_t entropy_55[] = { 0x1d, 0xc2, 0x4d, 0xd9, 0xd6, 0xa4, 0x05, 0xa0, 0x07, 0xbd, 0x08, 0x2c, 0xfb, 0xdb, 0xd8, 0x63, 0x18, 0x5e, 0x07, 0x2b, 0x67, 0xd6, 0x63, 0xb1, 0x4d, 0x7e, 0x8f, 0x16, 0x90, 0x0c, 0xfc, 0xe6};
    static const uint8_t returned_56[] = { 0x15, 0x69, 0x38, 0x56, 0x6f, 0xc2, 0x5d, 0x49, 0x3c, 0x1c, 0x60, 0xd8, 0x92, 0x58, 0x19, 0xa6, 0xe5, 0x9a, 0x24, 0x79, 0xd7, 0x5f, 0x3e, 0xff, 0xf1, 0x6d, 0x46, 0xaa, 0xda, 0x68, 0x40, 0x31, 0x40, 0x40, 0x79, 0x55, 0xc1, 0xfd, 0x9d, 0x2a, 0x89, 0x0b, 0xcf, 0x67, 0xac, 0x9b, 0x3b, 0x82, 0xd1, 0xd6, 0xcf, 0x78, 0x8f, 0xd8, 0x63, 0xda, 0x3d, 0x41, 0xac, 0x6e, 0x34, 0xf2, 0x17, 0xa0};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_57[] = { 0x0e, 0xca, 0x85, 0xdd, 0xcb, 0x6f, 0x38, 0xff, 0x36, 0x83, 0x96, 0x8e, 0xf9, 0x8b, 0x52, 0x40, 0x84, 0x28, 0xdc, 0xae, 0x2e, 0xc3, 0xb0, 0xfa, 0x4c, 0x68, 0x90, 0x6c, 0x1b, 0x64, 0x81, 0xcd};
    rng.instantiate(entropy_55, personalization_57, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_56, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10590 */
  {
    static const uint8_t entropy_58[] = { 0xec, 0xb7, 0xe6, 0x1a, 0x47, 0x92, 0xa2, 0x11, 0x52, 0x13, 0xd1, 0x41, 0xd2, 0x07, 0x10, 0xe8, 0xa3, 0x21, 0x2d, 0x78, 0x47, 0xdd, 0x53, 0xdf, 0xa5, 0xd4, 0xd7, 0x77, 0x7d, 0x10, 0xd9, 0x7e};
    static const uint8_t returned_59[] = { 0x86, 0x8d, 0xb5, 0x83, 0x2b, 0x2e, 0x9c, 0x3d, 0x2c, 0x97, 0x94, 0xb1, 0x74, 0xb3, 0x28, 0xed, 0x2c, 0xc8, 0x6e, 0x41, 0x01, 0x78, 0x63, 0xea, 0xbc, 0x4a, 0x7c, 0x09, 0x6a, 0x48, 0x7b, 0xfe, 0x4d, 0x67, 0xcc, 0xf9, 0x3a, 0x5e, 0x2c, 0x67, 0xd8, 0x8d, 0xbd, 0x8f, 0x14, 0x19, 0xb2, 0xa9, 0xf1, 0x29, 0x3e, 0x7a, 0x70, 0xe8, 0xe8, 0xfe, 0x93, 0xe2, 0x15, 0x64, 0x96, 0xb0, 0xfa, 0x54};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_60[] = { 0xbf, 0x09, 0x23, 0x5d, 0x30, 0xcd, 0x69, 0xad, 0xa2, 0x85, 0x94, 0x8f, 0xe1, 0xbe, 0x2e, 0x0c, 0x4e, 0x14, 0x5a, 0xc8, 0x48, 0x5d, 0x12, 0xca, 0x7b, 0x82, 0x39, 0x13, 0x6d, 0xa1, 0xc6, 0x38};
    rng.instantiate(entropy_58, personalization_60, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_59, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10598 */
  {
    static const uint8_t entropy_61[] = { 0xe5, 0x57, 0x27, 0xc5, 0x90, 0xec, 0x3a, 0xc1, 0x08, 0xf4, 0xe5, 0xfe, 0xc3, 0x9a, 0x2d, 0x34, 0xbf, 0x89, 0xae, 0xe4, 0xe2, 0x15, 0xdc, 0xc9, 0x70, 0xdb, 0x8a, 0xe8, 0xf6, 0xa0, 0xe4, 0xa8};
    static const uint8_t returned_62[] = { 0x19, 0x87, 0x42, 0x29, 0x9f, 0xee, 0xcf, 0x60, 0x83, 0xe3, 0xa0, 0xbe, 0xf7, 0x5a, 0xc2, 0xb9, 0x3d, 0xe2, 0xde, 0xfa, 0x65, 0x25, 0x88, 0x3a, 0x55, 0xf8, 0x82, 0x47, 0xdc, 0x69, 0x02, 0x27, 0x9f, 0x79, 0x24, 0x02, 0xfa, 0xff, 0xe4, 0xa8, 0x12, 0x13, 0xe4, 0x0f, 0xac, 0xb8, 0x73, 0xcd, 0x49, 0x9e, 0x4b, 0x0f, 0x7f, 0x0f, 0xf5, 0x92, 0xbc, 0x06, 0x69, 0x9d, 0xb7, 0x73, 0xb8, 0x99};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_63[] = { 0xad, 0xe3, 0xd2, 0x8a, 0x8e, 0x43, 0xaa, 0xb8, 0xfd, 0x31, 0xde, 0xc8, 0xbd, 0xbe, 0x5c, 0x41, 0xc0, 0xb3, 0xf7, 0xf6, 0x9a, 0x2d, 0x0a, 0xad, 0xa5, 0x60, 0x8a, 0xb0, 0xe5, 0x7c, 0x8b, 0xb0};
    rng.instantiate(entropy_61, personalization_63, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_62, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10606 */
  {
    static const uint8_t entropy_64[] = { 0xc3, 0x80, 0xda, 0xfd, 0x84, 0xf2, 0x78, 0x2b, 0x75, 0x39, 0xca, 0x1c, 0x3a, 0xd9, 0x71, 0x5f, 0xe6, 0xb1, 0x80, 0x53, 0x10, 0xa5, 0x78, 0xaf, 0xcf, 0xfc, 0x92, 0x10, 0xac, 0x12, 0x7d, 0xed};
    static const uint8_t returned_65[] = { 0x9a, 0xec, 0x7a, 0x5b, 0xa3, 0xe0, 0x91, 0xe6, 0xa6, 0xc9, 0x9e, 0x04, 0x39, 0x5a, 0xf2, 0xab, 0x2e, 0xea, 0xa1, 0xef, 0x08, 0x9b, 0xaa, 0x51, 0xdc, 0x23, 0xea, 0x31, 0x60, 0x3b, 0x89, 0x9e, 0xa2, 0x98, 0x31, 0x76, 0x03, 0x35, 0x4f, 0x38, 0xfd, 0x9c, 0x36, 0xc2, 0xa5, 0x3a, 0x05, 0xc1, 0xe4, 0x68, 0xc6, 0xae, 0x32, 0xfe, 0x4c, 0x3b, 0x00, 0x56, 0xec, 0x0d, 0x5e, 0xff, 0x22, 0xb6};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_66[] = { 0xb2, 0x98, 0x53, 0x3d, 0x9c, 0x74, 0xa0, 0xd9, 0xb9, 0xaa, 0x0d, 0x82, 0xed, 0xc4, 0x34, 0x00, 0x2b, 0x4d, 0x13, 0x72, 0x31, 0x8c, 0x28, 0x65, 0xb7, 0x70, 0x0a, 0x5b, 0x7e, 0xbe, 0xab, 0xf0};
    rng.instantiate(entropy_64, personalization_66, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_65, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10614 */
  {
    static const uint8_t entropy_67[] = { 0xf1, 0x58, 0x21, 0x05, 0x35, 0xa4, 0x04, 0xf6, 0xcb, 0x4f, 0x95, 0x50, 0xb3, 0xf2, 0x6e, 0x3f, 0x77, 0x7a, 0x9f, 0xaa, 0x16, 0x47, 0x74, 0x74, 0x9f, 0x48, 0xef, 0x4a, 0x8c, 0xe0, 0x94, 0x49};
    static const uint8_t returned_68[] = { 0x03, 0x4b, 0x41, 0xb2, 0xa9, 0xa6, 0x76, 0x4e, 0x5e, 0xd1, 0xed, 0xb0, 0x0a, 0xea, 0x31, 0x85, 0xfe, 0x43, 0xeb, 0x81, 0xb4, 0x25, 0x3e, 0x7c, 0xad, 0xe9, 0x79, 0x56, 0xfc, 0xcd, 0x9f, 0xc5, 0x78, 0x23, 0x28, 0xfa, 0xda, 0x8e, 0xd5, 0x20, 0x8f, 0x1d, 0x46, 0xb1, 0xf8, 0x72, 0xe3, 0x33, 0xb9, 0xe2, 0xf0, 0x36, 0xa5, 0x17, 0x46, 0xcc, 0xaf, 0x39, 0xe1, 0xa8, 0x5a, 0xf8, 0xeb, 0x23};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_69[] = { 0xd5, 0x6f, 0xa8, 0x73, 0xcc, 0x76, 0x2f, 0x64, 0xb3, 0xab, 0x31, 0xb6, 0x29, 0x1e, 0x24, 0x7e, 0xfc, 0xa7, 0x1f, 0xca, 0x90, 0x45, 0x3c, 0xff, 0xf1, 0xf2, 0xb0, 0xb3, 0xe2, 0x65, 0xc4, 0x75};
    rng.instantiate(entropy_67, personalization_69, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_68, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10622 */
  {
    static const uint8_t entropy_70[] = { 0x97, 0x3a, 0x99, 0xb7, 0xe0, 0x3b, 0x39, 0x3e, 0xf6, 0x89, 0xaf, 0x8c, 0xb9, 0x0d, 0x74, 0x36, 0xca, 0xe1, 0x0e, 0x48, 0x14, 0x81, 0x4a, 0xed, 0x34, 0x2d, 0xd3, 0x8e, 0x2a, 0x73, 0x46, 0xe3};
    static const uint8_t returned_71[] = { 0x62, 0x01, 0x28, 0x42, 0x99, 0x1f, 0xe3, 0x22, 0x0f, 0x1d, 0x96, 0x10, 0x45, 0xf0, 0x28, 0xa3, 0xb6, 0xa7, 0x29, 0xf5, 0xa4, 0x51, 0xb8, 0xc2, 0xec, 0x90, 0xe1, 0xc1, 0xe2, 0xb1, 0xe4, 0x04, 0x2e, 0x97, 0x26, 0x7e, 0x1b, 0xfa, 0x17, 0x82, 0xa1, 0x0c, 0x3c, 0x29, 0x50, 0x9b, 0xc8, 0xf2, 0xad, 0xff, 0xd3, 0xd6, 0x95, 0x86, 0x1e, 0x15, 0x94, 0xda, 0x91, 0x70, 0x28, 0x30, 0xfa, 0xf7};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_72[] = { 0x30, 0x0d, 0x3d, 0x2a, 0xdb, 0xac, 0x6d, 0x7d, 0xda, 0xdd, 0xe0, 0x7e, 0x08, 0xb0, 0xd7, 0x2b, 0x5b, 0x39, 0xff, 0x36, 0x03, 0x1e, 0x81, 0xd8, 0x30, 0x39, 0x58, 0x24, 0x2e, 0x3c, 0xf0, 0x3f};
    rng.instantiate(entropy_70, personalization_72, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_71, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10630 */
  {
    static const uint8_t entropy_73[] = { 0x22, 0xd1, 0xd8, 0xc8, 0xbd, 0xe7, 0x6a, 0x23, 0x9d, 0x03, 0x28, 0x04, 0x71, 0x7f, 0xac, 0xe1, 0x6d, 0x77, 0xb5, 0x11, 0x70, 0xd0, 0xf5, 0x3c, 0xcb, 0xcc, 0xa4, 0xea, 0xff, 0x4f, 0xb3, 0x15};
    static const uint8_t returned_74[] = { 0x10, 0x07, 0xe1, 0x1f, 0x48, 0xe3, 0xc4, 0x81, 0x3f, 0xdd, 0xd6, 0x73, 0x10, 0xdb, 0x56, 0xd6, 0x7a, 0x49, 0xfe, 0x93, 0xe4, 0x5e, 0x61, 0xb3, 0x7b, 0xa8, 0x14, 0x85, 0xdf, 0x6a, 0x62, 0xee, 0x57, 0xca, 0x41, 0xfa, 0x1d, 0x98, 0x7f, 0x46, 0x7c, 0x29, 0x39, 0x79, 0x0a, 0x20, 0x42, 0x1c, 0x2b, 0x4f, 0x70, 0xb2, 0x8f, 0xb0, 0xb9, 0x0b, 0xbe, 0xab, 0x1a, 0xc0, 0xae, 0x88, 0x4f, 0x1a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_75[] = { 0x5d, 0x3a, 0x7d, 0x40, 0xfd, 0xf9, 0x5b, 0x98, 0x45, 0x4b, 0xca, 0x03, 0xc6, 0xfc, 0xbf, 0x6a, 0xbf, 0x38, 0x07, 0xde, 0x75, 0x17, 0x1b, 0x55, 0xba, 0xb2, 0xdb, 0x5a, 0x3f, 0x5f, 0x12, 0xf2};
    rng.instantiate(entropy_73, personalization_75, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_74, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10774 */
  {
    static const uint8_t entropy_76[] = { 0x69, 0xa0, 0x9f, 0x6b, 0xf5, 0xdd, 0xa1, 0x5c, 0xd4, 0xaf, 0x29, 0xe1, 0x4c, 0xf5, 0xe0, 0xcd, 0xdd, 0x7d, 0x07, 0xac, 0x39, 0xbb, 0xa5, 0x87, 0xf8, 0xbc, 0x33, 0x11, 0x04, 0xf9, 0xc4, 0x48};
    static const uint8_t returned_77[] = { 0xf7, 0x8a, 0x49, 0x19, 0xa6, 0xec, 0x89, 0x9f, 0x7b, 0x6c, 0x69, 0x38, 0x1f, 0xeb, 0xbb, 0xe0, 0x83, 0x31, 0x5f, 0x3d, 0x28, 0x9e, 0x70, 0x34, 0x6d, 0xb0, 0xe4, 0xec, 0x43, 0x60, 0x47, 0x3a, 0xe0, 0xb3, 0xd9, 0x16, 0xe9, 0xb6, 0xb9, 0x64, 0x30, 0x9f, 0x75, 0x3e, 0xd6, 0x6a, 0xe5, 0x9d, 0xe4, 0x8d, 0xa3, 0x16, 0xcc, 0x19, 0x44, 0xbc, 0x8d, 0xfd, 0x0e, 0x25, 0x75, 0xd0, 0xff, 0x6d};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_76, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_77, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10782 */
  {
    static const uint8_t entropy_78[] = { 0x80, 0xbf, 0xbd, 0x34, 0x0d, 0x79, 0x88, 0x8f, 0x34, 0xf0, 0x43, 0xed, 0x68, 0x07, 0xa9, 0xf2, 0x8b, 0x72, 0xb6, 0x64, 0x4d, 0x9d, 0x9e, 0x9d, 0x77, 0x71, 0x09, 0x48, 0x2b, 0x80, 0x78, 0x8a};
    static const uint8_t returned_79[] = { 0x80, 0xdb, 0x04, 0x8d, 0x2f, 0x13, 0x0d, 0x86, 0x4b, 0x19, 0xbf, 0xc5, 0x47, 0xc9, 0x25, 0x03, 0xe5, 0x80, 0xcb, 0x1a, 0x8e, 0x1f, 0x74, 0xf3, 0xd9, 0x7f, 0xdd, 0xa6, 0x50, 0x1f, 0xb1, 0xaa, 0x81, 0xfc, 0xed, 0xac, 0x0d, 0xd1, 0x8b, 0x6c, 0xcf, 0xdc, 0x18, 0x3c, 0xa2, 0x8a, 0x44, 0xfc, 0x9f, 0x3a, 0x08, 0x83, 0x4b, 0xa8, 0x75, 0x1a, 0x2f, 0x44, 0x95, 0x36, 0x7c, 0x54, 0xa1, 0x85};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_78, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_79, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10790 */
  {
    static const uint8_t entropy_80[] = { 0xa5, 0x59, 0xac, 0x98, 0x72, 0x79, 0x1d, 0x79, 0x19, 0x7e, 0x54, 0xda, 0x70, 0xa8, 0xd8, 0x58, 0xfb, 0xe3, 0x9e, 0x85, 0x14, 0xd2, 0xc8, 0x6a, 0x7b, 0xcf, 0xfa, 0xdc, 0x68, 0x78, 0x2e, 0xdf};
    static const uint8_t returned_81[] = { 0xd1, 0x4b, 0x72, 0xe1, 0x7c, 0x2f, 0x6f, 0x77, 0xb4, 0x6d, 0x07, 0x17, 0xb7, 0x88, 0x42, 0x0e, 0x50, 0x3b, 0xb1, 0x8d, 0xe5, 0x42, 0x13, 0x5f, 0x58, 0x6a, 0x90, 0xc5, 0xc7, 0x3f, 0xce, 0xee, 0xe5, 0x0f, 0xd1, 0x63, 0x3b, 0x5b, 0x09, 0xab, 0x06, 0x1b, 0x93, 0x67, 0xca, 0x78, 0x5e, 0xcb, 0x40, 0x0e, 0x1f, 0x36, 0x81, 0x58, 0x36, 0x61, 0xaa, 0xf8, 0x35, 0x21, 0x84, 0x45, 0x4a, 0xe6};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_80, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_81, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10798 */
  {
    static const uint8_t entropy_82[] = { 0x30, 0x0f, 0xe1, 0x48, 0xdd, 0x39, 0xde, 0x1e, 0xdb, 0x99, 0x3c, 0xa5, 0x26, 0x03, 0x73, 0xb3, 0xf5, 0xf0, 0x9a, 0x5c, 0xf7, 0xa3, 0x2b, 0x0c, 0x41, 0xfe, 0x62, 0x24, 0xf9, 0x81, 0xd3, 0xb1};
    static const uint8_t returned_83[] = { 0xde, 0xea, 0x89, 0xb5, 0x12, 0x8f, 0xb9, 0x92, 0x69, 0x6d, 0x7b, 0x97, 0xeb, 0xc2, 0xc0, 0x79, 0x36, 0x14, 0xb1, 0x72, 0xf4, 0xc7, 0x5b, 0xb8, 0x3c, 0x12, 0xa1, 0xb3, 0x89, 0xba, 0xc3, 0xbf, 0xec, 0xb7, 0x73, 0xcd, 0x77, 0x17, 0x58, 0x3c, 0x2b, 0x61, 0xb3, 0xb2, 0x43, 0xac, 0x96, 0x83, 0xdb, 0xa4, 0xfb, 0xc0, 0x71, 0x82, 0xba, 0xd8, 0x27, 0x1a, 0x7f, 0x16, 0xd8, 0x33, 0xe4, 0xd9};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_82, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_83, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10806 */
  {
    static const uint8_t entropy_84[] = { 0x0c, 0x6e, 0xe2, 0xa5, 0xd4, 0x63, 0x25, 0xba, 0xa8, 0xe9, 0xa3, 0xf6, 0xb5, 0x98, 0xfc, 0x79, 0x0c, 0x51, 0x3d, 0x38, 0x7d, 0x47, 0x00, 0x11, 0x16, 0xd1, 0x9a, 0x61, 0x4d, 0x20, 0x38, 0xc4};
    static const uint8_t returned_85[] = { 0xf1, 0xee, 0x11, 0xbe, 0x18, 0x92, 0x63, 0xfe, 0xd9, 0x93, 0x2c, 0x11, 0x92, 0x21, 0x9d, 0x00, 0x37, 0x8e, 0x36, 0xce, 0x81, 0xa4, 0x31, 0x31, 0x85, 0x45, 0xda, 0x9f, 0x81, 0xf5, 0x0c, 0x29, 0x13, 0xd1, 0xf7, 0xbe, 0x49, 0x9c, 0xe9, 0xe1, 0xe3, 0x9f, 0x93, 0xee, 0x23, 0x60, 0x66, 0x8f, 0x12, 0x73, 0x40, 0x69, 0x1c, 0x17, 0x71, 0x17, 0x07, 0xcf, 0x5f, 0x1f, 0x8a, 0x4d, 0x93, 0xee};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_84, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_85, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10814 */
  {
    static const uint8_t entropy_86[] = { 0xbd, 0xbb, 0xa1, 0xad, 0x48, 0x03, 0xfd, 0xc7, 0x83, 0xef, 0x5d, 0x6e, 0x2a, 0xa6, 0x6d, 0xc9, 0x48, 0xe9, 0x60, 0xbc, 0x11, 0xcc, 0xa8, 0x9a, 0x60, 0xcf, 0xf5, 0xc6, 0x0e, 0x98, 0x43, 0x02};
    static const uint8_t returned_87[] = { 0x26, 0x0a, 0x32, 0xc3, 0x97, 0x37, 0x50, 0xe0, 0xc1, 0x0f, 0x7f, 0x74, 0x95, 0xd4, 0x6e, 0x7c, 0x36, 0x91, 0xc2, 0x7a, 0x58, 0xe8, 0x28, 0xcd, 0xef, 0x48, 0xef, 0x66, 0x07, 0x16, 0xf7, 0x71, 0xd6, 0x1c, 0x3c, 0x76, 0xdb, 0x40, 0x7d, 0x81, 0x60, 0x66, 0xf5, 0xaf, 0xbf, 0x16, 0x99, 0x34, 0x85, 0xcd, 0xb6, 0x53, 0xd4, 0x18, 0xdd, 0x65, 0xff, 0xa5, 0xd3, 0x82, 0x57, 0x32, 0xb8, 0xcb};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_86, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_87, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10822 */
  {
    static const uint8_t entropy_88[] = { 0x22, 0x58, 0x7b, 0xfd, 0xce, 0x62, 0xf4, 0xaf, 0xc1, 0xdd, 0x26, 0x73, 0xf5, 0x30, 0x83, 0x64, 0xf2, 0x7d, 0xb9, 0x91, 0x2a, 0xd0, 0x1b, 0x04, 0x5e, 0x74, 0xdb, 0x45, 0x18, 0x43, 0x59, 0x59};
    static const uint8_t returned_89[] = { 0xc9, 0x04, 0xd0, 0x30, 0x89, 0xb7, 0xdd, 0x1f, 0x17, 0x56, 0x4a, 0x7e, 0xf7, 0x0b, 0x17, 0xbb, 0x1b, 0x29, 0xc0, 0xc1, 0x79, 0x3c, 0xc8, 0xd9, 0x2b, 0x8c, 0x15, 0x8c, 0x04, 0xca, 0x53, 0x66, 0x91, 0x9f, 0x8c, 0xaf, 0x54, 0x4d, 0x5d, 0x07, 0xc2, 0x8a, 0xbe, 0x6d, 0x14, 0xba, 0xaa, 0x0c, 0x56, 0x60, 0x2d, 0xf1, 0xc3, 0x73, 0xe9, 0xac, 0xc4, 0x19, 0xe3, 0xc9, 0x32, 0xe5, 0x77, 0xe6};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_88, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_89, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10830 */
  {
    static const uint8_t entropy_90[] = { 0x8a, 0xbe, 0xfb, 0xb2, 0x3d, 0xfd, 0x58, 0xd8, 0x2b, 0x88, 0xa4, 0xc4, 0xfc, 0xfc, 0xee, 0x18, 0x3c, 0xe0, 0x1d, 0xb9, 0x75, 0xed, 0xee, 0xb4, 0x04, 0xbd, 0x21, 0x6e, 0x61, 0x77, 0xea, 0x0d};
    static const uint8_t returned_91[] = { 0x8a, 0x70, 0x8e, 0x8a, 0x99, 0x03, 0x53, 0x89, 0xa4, 0xd6, 0x6d, 0x57, 0xd1, 0x2f, 0x48, 0x8e, 0xcb, 0xa5, 0x7a, 0x3b, 0x2c, 0xa7, 0x80, 0x15, 0xbe, 0xda, 0xe0, 0x6a, 0xaa, 0x41, 0x4d, 0x79, 0x11, 0x96, 0xe2, 0x62, 0xb2, 0x8f, 0xbd, 0x74, 0x5d, 0xff, 0x94, 0xf8, 0xfe, 0x60, 0x06, 0x87, 0xc9, 0xce, 0x2f, 0x50, 0xcf, 0x6d, 0x79, 0xd3, 0x9b, 0x8c, 0x5e, 0xa3, 0x65, 0x33, 0x75, 0x5d};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_90, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_91, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10838 */
  {
    static const uint8_t entropy_92[] = { 0xc4, 0x5c, 0x9f, 0xec, 0x6b, 0xb8, 0x3f, 0xb0, 0x80, 0x08, 0x87, 0x7c, 0x70, 0xb6, 0x32, 0xd7, 0x92, 0x11, 0x9a, 0x35, 0xc4, 0xc5, 0x98, 0x8c, 0x40, 0x26, 0xcf, 0x3f, 0x86, 0x12, 0xb8, 0x00};
    static const uint8_t returned_93[] = { 0x84, 0x43, 0x0e, 0x49, 0xa9, 0xb4, 0xd3, 0x95, 0xd0, 0x55, 0xca, 0x0e, 0xfd, 0xf2, 0x85, 0xa7, 0x55, 0x1c, 0x5f, 0x71, 0x19, 0xdb, 0xea, 0x5c, 0x10, 0xda, 0xaa, 0x9e, 0x8b, 0xe0, 0x41, 0xe2, 0x3e, 0x9b, 0xc8, 0x93, 0xc9, 0x0a, 0x35, 0xb7, 0x7b, 0x19, 0xdc, 0x20, 0x2e, 0xc8, 0x34, 0x17, 0x2e, 0x6c, 0x8c, 0xea, 0x97, 0xc9, 0xd7, 0xc6, 0x8d, 0xf1, 0x37, 0x4a, 0xee, 0xa9, 0x45, 0x37};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_92, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_93, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10846 */
  {
    static const uint8_t entropy_94[] = { 0x58, 0xcb, 0xcc, 0xd7, 0xf8, 0x6e, 0x5f, 0x04, 0x72, 0xdc, 0xb3, 0x77, 0xf5, 0x98, 0xf2, 0xd4, 0x2e, 0xd9, 0x6a, 0xfd, 0xf0, 0xc8, 0xe4, 0x5f, 0x12, 0xc4, 0xff, 0x4a, 0x96, 0x9c, 0x5b, 0x6b};
    static const uint8_t returned_95[] = { 0x41, 0xff, 0x55, 0xd0, 0x58, 0xbe, 0xaa, 0x04, 0x30, 0x8b, 0xd0, 0xb3, 0x9d, 0x48, 0x01, 0xf7, 0x0f, 0x23, 0xd8, 0x29, 0x03, 0x7e, 0x4c, 0xc9, 0xb2, 0xea, 0x0e, 0xac, 0xf5, 0xae, 0xf9, 0xb8, 0xe3, 0x3f, 0xc5, 0x9c, 0x52, 0x8b, 0x53, 0xbc, 0xe0, 0x8d, 0x2b, 0x53, 0x6d, 0x37, 0xbf, 0x19, 0x4c, 0x79, 0x7f, 0x03, 0x29, 0x04, 0x94, 0xdd, 0x00, 0xef, 0x24, 0x4a, 0xc2, 0x23, 0xe3, 0x50};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_94, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_95, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10854 */
  {
    static const uint8_t entropy_96[] = { 0xd5, 0x05, 0x58, 0xdf, 0xb7, 0xa8, 0x96, 0x6c, 0x63, 0xb3, 0xa1, 0xd0, 0xa8, 0x37, 0x97, 0x0a, 0xd0, 0xbf, 0xf5, 0xad, 0xbd, 0x8a, 0xda, 0xca, 0xe5, 0xd3, 0xac, 0xcf, 0xde, 0x64, 0xcd, 0x4d};
    static const uint8_t returned_97[] = { 0xe9, 0x13, 0x61, 0x51, 0x1d, 0x92, 0x6b, 0xe4, 0xd9, 0x97, 0xfc, 0x97, 0x0b, 0x1a, 0x5d, 0xcd, 0xb3, 0x3a, 0x71, 0x1f, 0x21, 0x5c, 0xbd, 0xbf, 0xfa, 0xbf, 0xcd, 0xaa, 0x62, 0x48, 0x59, 0x68, 0x91, 0xd5, 0x5a, 0x9e, 0x64, 0xf4, 0xe9, 0xf5, 0x18, 0x5e, 0xd7, 0x05, 0x6f, 0x7c, 0xbb, 0x42, 0xf4, 0x74, 0xa2, 0x35, 0x42, 0xfe, 0x9e, 0x9c, 0x24, 0x95, 0x18, 0x2c, 0xef, 0xb3, 0x8a, 0x6a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_96, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_97, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10862 */
  {
    static const uint8_t entropy_98[] = { 0xf7, 0x0c, 0xe2, 0x83, 0xef, 0xd5, 0xba, 0x36, 0xc2, 0x84, 0xcb, 0x26, 0x7d, 0x22, 0xe2, 0x3d, 0xc4, 0x16, 0x71, 0xb2, 0xaa, 0xae, 0x98, 0xe6, 0x38, 0xc6, 0xe4, 0x51, 0xbc, 0x9c, 0x3c, 0xbb};
    static const uint8_t returned_99[] = { 0xfd, 0x9b, 0x3b, 0x53, 0xe1, 0x2b, 0x67, 0x02, 0xe4, 0xc6, 0xe4, 0xac, 0xac, 0x33, 0xae, 0xae, 0x5c, 0xeb, 0x34, 0xce, 0xbf, 0xff, 0xa7, 0x00, 0x7c, 0xb1, 0xab, 0x1c, 0x3b, 0x4b, 0xe1, 0xa3, 0x8e, 0x5c, 0x86, 0xde, 0xa0, 0x77, 0x5a, 0xb0, 0xc8, 0x9a, 0xe1, 0x35, 0xe0, 0xb3, 0x6d, 0xa0, 0x87, 0x92, 0x1d, 0x3f, 0xf2, 0x75, 0xff, 0xc8, 0xe5, 0xdc, 0xee, 0x6e, 0x3d, 0x66, 0xee, 0x43};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_98, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_99, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10870 */
  {
    static const uint8_t entropy_100[] = { 0x58, 0xeb, 0x54, 0x4f, 0x44, 0xdf, 0xe1, 0x04, 0x8a, 0x81, 0x13, 0xd4, 0xb6, 0x90, 0x90, 0x50, 0xab, 0xf9, 0x01, 0x00, 0x36, 0x23, 0x3b, 0xe7, 0xf8, 0xfc, 0xc4, 0x1f, 0x39, 0xba, 0xff, 0x9c};
    static const uint8_t returned_101[] = { 0x5c, 0x6a, 0xed, 0xc0, 0x20, 0xe7, 0x64, 0xf4, 0xd3, 0xbb, 0x8a, 0xbc, 0x29, 0x07, 0xc9, 0xc6, 0x04, 0xdd, 0x98, 0xe1, 0xcf, 0xc2, 0x88, 0x2e, 0xa7, 0x2d, 0x55, 0x4e, 0x39, 0xfe, 0x86, 0x46, 0x3a, 0x51, 0x88, 0x6d, 0x98, 0x0a, 0xc8, 0xcd, 0xda, 0x0f, 0x4e, 0x58, 0x42, 0x26, 0xd4, 0x53, 0x44, 0xe4, 0x3d, 0xd8, 0x4e, 0x84, 0x30, 0xf5, 0x8c, 0x38, 0x80, 0xa0, 0xce, 0x93, 0x08, 0x63};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_100, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_101, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10878 */
  {
    static const uint8_t entropy_102[] = { 0xb6, 0x94, 0xce, 0x5f, 0x4d, 0x9a, 0xf4, 0xce, 0x93, 0x62, 0x66, 0x36, 0xc9, 0xec, 0xb3, 0x41, 0xf3, 0xf5, 0x15, 0x2f, 0xd5, 0x80, 0x74, 0x52, 0x02, 0xcd, 0x0c, 0x83, 0xf4, 0xd5, 0xb4, 0xc5};
    static const uint8_t returned_103[] = { 0x78, 0xb3, 0x2d, 0x39, 0x6f, 0x5a, 0x91, 0x9f, 0x5c, 0xcb, 0x9b, 0xe2, 0xaf, 0xaf, 0x5f, 0x62, 0x12, 0xd7, 0x5b, 0xf0, 0x84, 0xe9, 0x93, 0x57, 0xe2, 0x8c, 0xcc, 0x98, 0xd4, 0x33, 0x69, 0x64, 0x55, 0xb1, 0x0a, 0x85, 0xec, 0xaf, 0x61, 0x68, 0x6a, 0x96, 0x60, 0x6f, 0xf3, 0xe8, 0x96, 0x23, 0x21, 0x35, 0x8a, 0x56, 0xfa, 0x53, 0xca, 0xbb, 0xf1, 0x6c, 0x65, 0xc1, 0xc3, 0x2d, 0xeb, 0xcd};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_102, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_103, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:10886 */
  {
    static const uint8_t entropy_104[] = { 0x42, 0xcb, 0x18, 0x3d, 0x2a, 0x04, 0xc8, 0x9c, 0x69, 0xef, 0xbc, 0xec, 0x08, 0xbe, 0xe2, 0x00, 0x3b, 0x9a, 0x1c, 0xd5, 0x68, 0x78, 0xa7, 0x74, 0xf0, 0x16, 0x2b, 0xf7, 0x0f, 0x2c, 0x70, 0x8f};
    static const uint8_t returned_105[] = { 0xcb, 0x4a, 0xfd, 0xec, 0x03, 0x3b, 0x42, 0x94, 0x9e, 0xbb, 0xb2, 0x72, 0x45, 0xfd, 0x33, 0xc1, 0x50, 0x3c, 0x12, 0x78, 0x02, 0x7e, 0x11, 0xa1, 0xf0, 0x50, 0xe0, 0x40, 0x80, 0xab, 0xe4, 0x85, 0x08, 0x21, 0xb7, 0x1e, 0xd5, 0xa6, 0xbd, 0x83, 0xda, 0x6b, 0xde, 0x8e, 0x56, 0xc5, 0xfa, 0xed, 0x49, 0xda, 0x26, 0x88, 0x70, 0x28, 0xba, 0xb8, 0x07, 0xd1, 0xad, 0x05, 0x5e, 0x2a, 0x8a, 0x27};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_104, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_105, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11030 */
  {
    static const uint8_t entropy_106[] = { 0x3f, 0xef, 0x76, 0x2f, 0x0a, 0xa0, 0x67, 0x7f, 0x61, 0xc6, 0x5d, 0x74, 0x9e, 0xeb, 0x10, 0xb0, 0x13, 0xff, 0x68, 0xcc, 0xc6, 0x31, 0x4f, 0x15, 0x0c, 0xfe, 0xe7, 0x52, 0xdc, 0xd8, 0xf9, 0x87};
    static const uint8_t returned_107[] = { 0xaf, 0x0a, 0xfe, 0x08, 0x37, 0x44, 0x21, 0x36, 0xfb, 0xb1, 0x95, 0x9a, 0x1c, 0x91, 0xa9, 0x29, 0x1c, 0x1d, 0x81, 0x88, 0xed, 0xe0, 0x7c, 0x67, 0xd0, 0xe4, 0xdd, 0x65, 0x41, 0x30, 0x34, 0x15, 0xe7, 0xa6, 0x79, 0x99, 0xc3, 0x02, 0xba, 0x0d, 0xf5, 0x55, 0x32, 0x4c, 0x26, 0x07, 0x75, 0x14, 0x59, 0x2a, 0x9b, 0x6d, 0xb6, 0xbe, 0x2f, 0x15, 0x3f, 0xad, 0x22, 0x50, 0x16, 0x11, 0x64, 0xe4};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_108[] = { 0xf5, 0x6d, 0xb0, 0x99, 0x24, 0x0c, 0x75, 0x90, 0xda, 0xc3, 0x96, 0x37, 0x2b, 0x87, 0x37, 0x40, 0x4d, 0x41, 0x8b, 0x28, 0x64, 0xa3, 0xdf, 0x96, 0xa8, 0xa3, 0x97, 0x96, 0x72, 0x45, 0x73, 0x5f};
    rng.instantiate(entropy_106, personalization_108, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_107, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11038 */
  {
    static const uint8_t entropy_109[] = { 0x3e, 0xeb, 0xe7, 0x7d, 0xb4, 0x63, 0x18, 0x62, 0xe3, 0xeb, 0x7e, 0x39, 0x37, 0x05, 0x15, 0xb8, 0xba, 0xa1, 0xcd, 0xd7, 0x1a, 0x5b, 0x1b, 0x0c, 0xda, 0x79, 0xc1, 0x4d, 0x0b, 0x5f, 0x48, 0xea};
    static const uint8_t returned_110[] = { 0xbe, 0x9e, 0x18, 0xa7, 0x53, 0xdf, 0x26, 0x19, 0x27, 0x47, 0x3c, 0x8b, 0xb5, 0xfb, 0x7c, 0x3e, 0xa6, 0xe8, 0x21, 0xdf, 0x5a, 0xb4, 0x9a, 0xdc, 0x56, 0x6a, 0x4e, 0xbf, 0x44, 0xf7, 0x5f, 0xa8, 0x25, 0xb1, 0xf9, 0xd8, 0xc1, 0x54, 0xbc, 0xd4, 0x69, 0x13, 0x4c, 0x0b, 0xb6, 0x88, 0xe0, 0x7e, 0x3c, 0x3e, 0x45, 0x40, 0x7c, 0xa3, 0x50, 0xd5, 0x40, 0xe1, 0x52, 0x8c, 0xc2, 0xe6, 0x40, 0x68};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_111[] = { 0x4b, 0xe5, 0x6a, 0x9b, 0x9c, 0x21, 0x24, 0x27, 0x39, 0xc9, 0x85, 0xef, 0x12, 0xaa, 0x4d, 0x98, 0xe8, 0xc7, 0xda, 0x07, 0xc4, 0xc1, 0xdc, 0x68, 0x29, 0xf2, 0xe0, 0x68, 0x33, 0xcf, 0xa1, 0x48};
    rng.instantiate(entropy_109, personalization_111, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_110, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11046 */
  {
    static const uint8_t entropy_112[] = { 0x3a, 0x2a, 0x99, 0xb6, 0xcb, 0x3d, 0xdb, 0xe4, 0x11, 0xd6, 0xd5, 0xa2, 0x68, 0xc5, 0x6f, 0xb3, 0x14, 0x41, 0xec, 0xd8, 0xba, 0x47, 0x85, 0x31, 0x95, 0x86, 0x9e, 0x91, 0x2d, 0x3c, 0xbf, 0xff};
    static const uint8_t returned_113[] = { 0x04, 0xd1, 0xaa, 0xa8, 0x1c, 0xe4, 0xd2, 0xf5, 0xcc, 0xa3, 0x58, 0x1c, 0x3a, 0xf5, 0xac, 0x81, 0xcd, 0xf0, 0x79, 0x70, 0xab, 0xe9, 0x80, 0x86, 0x05, 0xb1, 0x74, 0x23, 0xb3, 0x55, 0xe1, 0xe2, 0x3a, 0x19, 0x34, 0x95, 0xa9, 0x25, 0xe7, 0x62, 0x9a, 0xfe, 0x76, 0xf9, 0xb7, 0x3b, 0xcd, 0xd9, 0x92, 0xc9, 0x63, 0x0c, 0x2e, 0xc6, 0x49, 0x1b, 0xd4, 0x82, 0xec, 0xe5, 0xa4, 0x43, 0x84, 0xd0};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_114[] = { 0xbd, 0x1e, 0x82, 0x2b, 0x66, 0x18, 0x0e, 0xa2, 0x9a, 0x0d, 0x9e, 0x60, 0x1e, 0x98, 0x3c, 0x1f, 0x7f, 0x54, 0x87, 0x5e, 0x8c, 0x9c, 0xd8, 0x34, 0x63, 0x30, 0x9d, 0x14, 0xdb, 0xef, 0x0b, 0x82};
    rng.instantiate(entropy_112, personalization_114, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_113, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11054 */
  {
    static const uint8_t entropy_115[] = { 0xf9, 0xd7, 0xe6, 0x02, 0x60, 0x49, 0xbe, 0x4a, 0xd5, 0x1a, 0xe3, 0xea, 0x23, 0xdf, 0x50, 0x43, 0x5b, 0x9e, 0x28, 0x41, 0x13, 0xaf, 0x4d, 0xe6, 0x8a, 0x69, 0xc1, 0xd8, 0x68, 0xaa, 0x57, 0x2d};
    static const uint8_t returned_116[] = { 0x21, 0x67, 0x49, 0xdb, 0xa2, 0xb9, 0xa5, 0x54, 0x71, 0xb1, 0xeb, 0x7f, 0x39, 0x5c, 0x9a, 0x1d, 0x10, 0x5d, 0xb1, 0x54, 0x74, 0x9e, 0xf5, 0x1f, 0xef, 0x1e, 0x67, 0x82, 0x66, 0xa5, 0xe4, 0x80, 0xc7, 0x5d, 0xc5, 0xac, 0x4c, 0xc9, 0xde, 0xd2, 0x02, 0x21, 0x67, 0x08, 0x86, 0x0f, 0x41, 0x27, 0x0a, 0xba, 0xdb, 0xc0, 0x94, 0xcd, 0x6c, 0x2c, 0xa3, 0xa0, 0xa3, 0xd9, 0xa7, 0x0a, 0x1d, 0x70};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_117[] = { 0x2b, 0x33, 0x7d, 0x90, 0xfe, 0x80, 0xe8, 0xe2, 0x06, 0x5e, 0xc3, 0x11, 0x5f, 0x40, 0x4d, 0x44, 0x62, 0x2c, 0xcb, 0xad, 0x48, 0x6c, 0xf6, 0x37, 0x98, 0xa2, 0x26, 0x83, 0xcc, 0xd4, 0x80, 0x87};
    rng.instantiate(entropy_115, personalization_117, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_116, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11062 */
  {
    static const uint8_t entropy_118[] = { 0x12, 0xcf, 0xd7, 0xda, 0xf1, 0x68, 0xd0, 0x90, 0x6d, 0xf0, 0xbc, 0x01, 0xed, 0x5e, 0xd9, 0x39, 0x92, 0xbc, 0xb6, 0xc8, 0x5b, 0xef, 0xf2, 0xcd, 0x3d, 0x2d, 0xff, 0x21, 0xff, 0x34, 0x80, 0xd5};
    static const uint8_t returned_119[] = { 0x25, 0xe0, 0x22, 0x50, 0x85, 0x0d, 0x1a, 0xc8, 0x2f, 0xdf, 0xc1, 0xb1, 0x0b, 0xc0, 0xc5, 0x68, 0xa3, 0xbc, 0xfe, 0xe6, 0x91, 0x63, 0xe3, 0x02, 0x1d, 0x5c, 0x5c, 0xe7, 0x6d, 0xdd, 0xe1, 0x06, 0xe6, 0x95, 0x6d, 0xf4, 0x00, 0xcd, 0xf6, 0xf3, 0x68, 0x68, 0xff, 0xa4, 0x11, 0x1e, 0x76, 0x76, 0x14, 0x1b, 0xea, 0x28, 0x79, 0x10, 0x81, 0x38, 0x7b, 0x3e, 0x5d, 0xce, 0x69, 0x27, 0x2a, 0xae};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_120[] = { 0xdd, 0x85, 0x5c, 0xee, 0x76, 0x09, 0xaa, 0x1b, 0x76, 0xba, 0x7a, 0xa9, 0xf3, 0x12, 0x5a, 0x1b, 0x68, 0x30, 0x79, 0x8c, 0x1a, 0x23, 0x97, 0xe5, 0x02, 0xf5, 0x57, 0x47, 0xff, 0x35, 0x61, 0xca};
    rng.instantiate(entropy_118, personalization_120, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_119, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11070 */
  {
    static const uint8_t entropy_121[] = { 0x04, 0x9b, 0x16, 0x03, 0xf3, 0x86, 0x18, 0xac, 0x46, 0x31, 0x98, 0xe2, 0x45, 0x16, 0x32, 0x7a, 0x59, 0x3a, 0x22, 0x10, 0xf9, 0xb8, 0xf1, 0x6a, 0x91, 0xf5, 0x4c, 0x81, 0xc1, 0xd3, 0xba, 0xe2};
    static const uint8_t returned_122[] = { 0x65, 0x0d, 0x95, 0xd6, 0x08, 0x5b, 0x87, 0x56, 0xb4, 0xc8, 0xfe, 0x2b, 0x16, 0x11, 0x90, 0xdf, 0x1d, 0xd6, 0xc3, 0x49, 0xbd, 0xee, 0x3e, 0x5d, 0x6c, 0x1d, 0xda, 0x80, 0xc9, 0x0d, 0xb5, 0xf4, 0xe8, 0x55, 0xd6, 0x13, 0x34, 0x7c, 0xb9, 0xbd, 0xb8, 0xcc, 0x7b, 0xe1, 0x50, 0x6d, 0x88, 0xaf, 0x68, 0x63, 0xa4, 0xbb, 0xa5, 0x97, 0xb7, 0x57, 0x7f, 0x3b, 0x41, 0x84, 0x02, 0xc8, 0x47, 0x24};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_123[] = { 0x04, 0x05, 0x65, 0xcd, 0xdb, 0x45, 0x31, 0x2e, 0x43, 0x37, 0xc9, 0x09, 0xae, 0x83, 0xdd, 0xe2, 0xc5, 0x51, 0x18, 0xae, 0x94, 0xbf, 0x54, 0x94, 0x38, 0x1c, 0x15, 0x7d, 0x66, 0xe4, 0x75, 0x53};
    rng.instantiate(entropy_121, personalization_123, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_122, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11078 */
  {
    static const uint8_t entropy_124[] = { 0x9e, 0x61, 0x99, 0xad, 0x25, 0xa5, 0x89, 0x71, 0xe7, 0x6e, 0x48, 0xdb, 0x30, 0xab, 0x0b, 0xcf, 0xed, 0xb5, 0x7a, 0x97, 0x4d, 0x33, 0x34, 0x51, 0x4a, 0x4e, 0x03, 0x4a, 0x59, 0x1c, 0xc3, 0xdc};
    static const uint8_t returned_125[] = { 0x60, 0x3a, 0x3b, 0xd8, 0x5b, 0xce, 0xa4, 0xb8, 0x7c, 0xdf, 0xf4, 0xeb, 0xc6, 0xba, 0xa9, 0x81, 0x31, 0x80, 0xc2, 0x2b, 0x1c, 0x48, 0x27, 0x0a, 0xad, 0x93, 0x88, 0x2b, 0x63, 0x76, 0xa6, 0x60, 0x89, 0x8a, 0x11, 0x9c, 0xc9, 0x96, 0x41, 0xfd, 0x5f, 0x75, 0xe0, 0xd1, 0x8f, 0xac, 0xe1, 0x32, 0x41, 0xc5, 0x42, 0x66, 0x8e, 0x46, 0xc9, 0xe0, 0x43, 0xbf, 0x8a, 0x2f, 0xfe, 0x98, 0x76, 0x5f};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_126[] = { 0x40, 0x84, 0x1d, 0x2a, 0xcf, 0xe9, 0x51, 0x61, 0x71, 0x27, 0xfc, 0x08, 0x55, 0x73, 0xf6, 0x26, 0x60, 0x5c, 0xbd, 0xb2, 0xab, 0x08, 0x5a, 0x77, 0xcb, 0x08, 0x0a, 0x99, 0xa9, 0x2e, 0x22, 0xf5};
    rng.instantiate(entropy_124, personalization_126, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_125, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11086 */
  {
    static const uint8_t entropy_127[] = { 0x4a, 0x01, 0xfb, 0x95, 0xff, 0xfe, 0x41, 0x17, 0xa7, 0x1a, 0x52, 0x0a, 0x0b, 0x7d, 0x23, 0xa3, 0xc3, 0x12, 0x0d, 0x4b, 0x20, 0xa8, 0x49, 0x6d, 0x65, 0x01, 0xbf, 0x36, 0xd6, 0x94, 0xba, 0xbb};
    static const uint8_t returned_128[] = { 0x7b, 0xfa, 0x6a, 0xfb, 0xfc, 0x32, 0x29, 0xc2, 0x77, 0xb4, 0x13, 0x96, 0x47, 0x7a, 0xc4, 0x1b, 0x84, 0x7a, 0x2e, 0x58, 0x15, 0x9b, 0xc3, 0x33, 0x7b, 0xdc, 0x98, 0x7b, 0x4a, 0x68, 0x47, 0x91, 0x67, 0x1a, 0x5d, 0xcb, 0x12, 0x49, 0xbd, 0x39, 0x07, 0xe6, 0x8a, 0x5a, 0x87, 0xd4, 0x53, 0x57, 0xe7, 0xc5, 0x4c, 0x53, 0xda, 0x78, 0x21, 0xb5, 0x5d, 0xaa, 0xb7, 0x63, 0xe9, 0xaa, 0xf3, 0xbb};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_129[] = { 0x59, 0xb8, 0x7f, 0x1c, 0x1b, 0xd9, 0xaf, 0x79, 0xba, 0xd4, 0x11, 0xec, 0x61, 0xcb, 0xd5, 0x91, 0xf2, 0xcf, 0x35, 0xf6, 0x60, 0x66, 0xe1, 0x8e, 0x17, 0xb4, 0xf5, 0xd4, 0x19, 0xd1, 0x32, 0x7b};
    rng.instantiate(entropy_127, personalization_129, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_128, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11094 */
  {
    static const uint8_t entropy_130[] = { 0xe7, 0x22, 0x1b, 0x71, 0x0d, 0x0e, 0x91, 0xd3, 0x94, 0x3d, 0x42, 0x94, 0x30, 0x29, 0xf0, 0xc9, 0x5f, 0xbd, 0xfd, 0xd9, 0x76, 0xb5, 0xc0, 0x76, 0x71, 0x56, 0xba, 0x45, 0x03, 0xfd, 0x26, 0xa0};
    static const uint8_t returned_131[] = { 0x89, 0x66, 0x41, 0x5c, 0x21, 0x6d, 0xe8, 0x3d, 0x75, 0xf7, 0x36, 0x26, 0x30, 0x3f, 0x91, 0x4f, 0x8d, 0x75, 0xe9, 0xbf, 0xc2, 0x9d, 0x68, 0xf8, 0x9c, 0x54, 0x92, 0x89, 0x80, 0x59, 0xa1, 0xf6, 0x4e, 0xcd, 0xbe, 0x23, 0x42, 0xa4, 0xfb, 0xfe, 0x63, 0x17, 0xd5, 0xbe, 0x13, 0x25, 0xa7, 0x04, 0xb9, 0xe3, 0xd2, 0xe8, 0x6c, 0x54, 0x6a, 0x81, 0x90, 0x60, 0x42, 0xb6, 0x0d, 0x02, 0xcc, 0x0c};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_132[] = { 0x62, 0x55, 0x9c, 0x1e, 0x44, 0x2d, 0x84, 0x6d, 0x16, 0xdd, 0xcd, 0x60, 0x1c, 0x17, 0xff, 0x37, 0x0c, 0xff, 0x58, 0x28, 0x74, 0xa6, 0x19, 0xda, 0xc6, 0x20, 0x67, 0x48, 0x07, 0x6d, 0x8d, 0x32};
    rng.instantiate(entropy_130, personalization_132, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_131, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11102 */
  {
    static const uint8_t entropy_133[] = { 0x57, 0x15, 0x80, 0xa5, 0x72, 0x4b, 0x11, 0xe4, 0xb3, 0x12, 0xdf, 0x42, 0x0f, 0xa2, 0x60, 0xcd, 0xdf, 0x8c, 0xcd, 0xc4, 0xcc, 0x81, 0xca, 0xc7, 0x5a, 0x2a, 0xdf, 0xb7, 0x36, 0x57, 0xba, 0xdc};
    static const uint8_t returned_134[] = { 0x93, 0x29, 0xe9, 0x15, 0xd3, 0xd8, 0x91, 0xc9, 0x1c, 0x16, 0x1c, 0xc3, 0x91, 0x48, 0xd8, 0xba, 0x37, 0x19, 0x3d, 0x78, 0x40, 0x18, 0x3a, 0x96, 0x72, 0xc7, 0x9f, 0x29, 0xf8, 0xca, 0x56, 0xa2, 0x7f, 0x2c, 0x86, 0x92, 0x05, 0xd3, 0xef, 0xbe, 0xa7, 0x0e, 0x4b, 0x8b, 0x24, 0x5f, 0x49, 0x0c, 0x81, 0x01, 0x73, 0x70, 0xd6, 0xa1, 0x73, 0xb3, 0xf6, 0xef, 0x99, 0x24, 0x23, 0x0f, 0x2d, 0x69};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_135[] = { 0x17, 0x0d, 0x0d, 0x64, 0x02, 0xaa, 0x7c, 0xd2, 0x6a, 0xfd, 0x26, 0xe4, 0xcb, 0x11, 0xd4, 0x6f, 0xe4, 0xaa, 0xc4, 0x8d, 0xf2, 0x3c, 0x69, 0xb0, 0x6d, 0xe7, 0xc0, 0xcd, 0x70, 0x2c, 0x78, 0xb4};
    rng.instantiate(entropy_133, personalization_135, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_134, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11110 */
  {
    static const uint8_t entropy_136[] = { 0x26, 0xfd, 0xa9, 0x30, 0xbc, 0x9c, 0x08, 0xa1, 0x69, 0x1f, 0x02, 0x3f, 0x34, 0x8e, 0x96, 0x56, 0x34, 0x6c, 0xe5, 0x7d, 0x74, 0xd4, 0x6e, 0x81, 0x50, 0xd3, 0x43, 0xb5, 0x2d, 0xf5, 0xfe, 0x89};
    static const uint8_t returned_137[] = { 0x18, 0xbc, 0x44, 0x8e, 0x8c, 0xd5, 0xa2, 0x57, 0x2d, 0x6f, 0xaa, 0x70, 0x9f, 0x1f, 0x75, 0x74, 0x33, 0xff, 0xf9, 0x3e, 0x1a, 0x63, 0x3a, 0x8b, 0x67, 0x1e, 0x97, 0x5a, 0x43, 0xf3, 0xa3, 0xa3, 0x50, 0x6c, 0x4c, 0xe9, 0x76, 0xa9, 0x25, 0xf0, 0x6d, 0x7a, 0x26, 0xcb, 0x20, 0x83, 0xa8, 0x0f, 0x56, 0x5f, 0xea, 0x05, 0x24, 0xc4, 0x5d, 0x36, 0x72, 0xf3, 0xc0, 0x9d, 0x6a, 0x7f, 0x30, 0x8a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_138[] = { 0xc6, 0xb0, 0x8d, 0x04, 0xf3, 0xd3, 0x5b, 0x07, 0xca, 0x64, 0x51, 0xd2, 0xef, 0xe5, 0xff, 0x8c, 0x54, 0x5a, 0x73, 0x42, 0x28, 0xfc, 0xa3, 0x38, 0x80, 0x6f, 0x1d, 0xae, 0x93, 0x38, 0x1f, 0x22};
    rng.instantiate(entropy_136, personalization_138, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_137, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11118 */
  {
    static const uint8_t entropy_139[] = { 0xba, 0x59, 0x5a, 0x79, 0x16, 0x33, 0xaa, 0xda, 0x59, 0xda, 0xa3, 0x53, 0x53, 0x3b, 0x0a, 0x92, 0x48, 0x73, 0x14, 0x0a, 0xf8, 0x26, 0xf4, 0x74, 0x33, 0xe8, 0x1a, 0xed, 0x88, 0xeb, 0x87, 0xc0};
    static const uint8_t returned_140[] = { 0x22, 0x84, 0x93, 0x92, 0x01, 0xb1, 0xae, 0xa4, 0x76, 0x06, 0xcf, 0xd6, 0x23, 0xc6, 0xe0, 0x45, 0x4b, 0x4e, 0x7d, 0x2c, 0x9f, 0xd5, 0x0d, 0x15, 0x87, 0x36, 0x0e, 0x83, 0x8a, 0x19, 0x0d, 0x97, 0xc8, 0x48, 0x28, 0x65, 0xb9, 0x9d, 0x59, 0xa8, 0x19, 0xdd, 0xc8, 0x9c, 0xae, 0x0b, 0x00, 0x52, 0x41, 0xe7, 0x69, 0x9f, 0xbc, 0x66, 0x24, 0x42, 0xcb, 0xef, 0x84, 0x72, 0x97, 0xdb, 0x15, 0xcf};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_141[] = { 0x5a, 0x3f, 0x43, 0x1c, 0x98, 0x40, 0xe0, 0x56, 0x5e, 0x49, 0xa1, 0x2d, 0xd7, 0xcd, 0x65, 0x04, 0x91, 0x2c, 0x43, 0x59, 0xb1, 0x50, 0x8f, 0x6c, 0x84, 0xb2, 0xc7, 0x18, 0xa3, 0x7f, 0xe3, 0xa3};
    rng.instantiate(entropy_139, personalization_141, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_140, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11126 */
  {
    static const uint8_t entropy_142[] = { 0x94, 0x04, 0x3d, 0x90, 0x09, 0x52, 0xe2, 0x5c, 0x04, 0x25, 0x2f, 0xff, 0xfd, 0x1f, 0xe4, 0xe8, 0xa5, 0x4a, 0x3c, 0x04, 0x7e, 0x3c, 0x27, 0x68, 0xc0, 0x32, 0x4d, 0x1f, 0xe3, 0x24, 0x07, 0xdf};
    static const uint8_t returned_143[] = { 0x7a, 0x27, 0x66, 0x6f, 0x38, 0x46, 0xbb, 0x36, 0xf8, 0x33, 0xea, 0x63, 0x87, 0x23, 0xe4, 0xcf, 0x95, 0xd6, 0x92, 0xe0, 0xa6, 0xa3, 0x7f, 0xac, 0x88, 0xa7, 0xcd, 0x5e, 0x4b, 0xcc, 0x3c, 0xcb, 0x73, 0x5c, 0x0c, 0xfe, 0x40, 0x27, 0x59, 0x72, 0xb2, 0xfd, 0xf5, 0x30, 0x45, 0x9a, 0x2a, 0x63, 0xee, 0x13, 0x84, 0x74, 0x60, 0xee, 0x09, 0xea, 0x63, 0xa8, 0x49, 0x01, 0xbc, 0xa8, 0x74, 0xbe};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_144[] = { 0xfb, 0x51, 0xb2, 0x6a, 0x7e, 0x7f, 0x87, 0xd8, 0xda, 0x7c, 0x54, 0xab, 0x1f, 0xad, 0x3d, 0x08, 0xc2, 0xc1, 0x31, 0x12, 0xfc, 0x17, 0xb3, 0xf3, 0x1d, 0xda, 0x72, 0xfd, 0x5b, 0x61, 0xeb, 0x01};
    rng.instantiate(entropy_142, personalization_144, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_143, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11134 */
  {
    static const uint8_t entropy_145[] = { 0x57, 0x22, 0x04, 0x6e, 0xdf, 0x9b, 0x2b, 0x84, 0xf2, 0x88, 0x6e, 0xa9, 0x30, 0x2a, 0xc3, 0x8a, 0x1f, 0xea, 0xd8, 0xed, 0xf6, 0xb3, 0xfa, 0xae, 0xca, 0x23, 0xff, 0xdd, 0x95, 0x99, 0x74, 0x31};
    static const uint8_t returned_146[] = { 0x0b, 0x03, 0xd2, 0x15, 0xfc, 0x30, 0xbb, 0xce, 0x8d, 0xc2, 0xaa, 0x3d, 0x49, 0x68, 0x68, 0x2d, 0x58, 0x6f, 0x10, 0x60, 0x07, 0x57, 0xb0, 0x52, 0x93, 0xc2, 0x63, 0xfc, 0xf1, 0x5e, 0xbc, 0x09, 0xbd, 0xec, 0xd2, 0x81, 0x8d, 0x62, 0x6a, 0x43, 0x98, 0x2f, 0x90, 0x09, 0xf2, 0x97, 0x4f, 0xcd, 0x01, 0x21, 0x4f, 0x6b, 0xe6, 0xec, 0xb2, 0xaa, 0x7d, 0x9d, 0x10, 0x16, 0x98, 0xec, 0x08, 0xe9};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_147[] = { 0x37, 0xda, 0x9a, 0x6f, 0xb1, 0xee, 0xc7, 0x23, 0x41, 0x56, 0xb0, 0xf5, 0x21, 0x0b, 0xa4, 0x7c, 0x3c, 0xa6, 0xc0, 0x3a, 0x34, 0xb6, 0x9d, 0xe3, 0xfe, 0xe1, 0xf5, 0x26, 0x9a, 0x92, 0x9e, 0x1e};
    rng.instantiate(entropy_145, personalization_147, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_146, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11142 */
  {
    static const uint8_t entropy_148[] = { 0x3a, 0xcd, 0x2c, 0x23, 0xbb, 0xae, 0x4d, 0x02, 0xcc, 0x9e, 0x4b, 0xb5, 0x48, 0xe2, 0x64, 0xf4, 0x3e, 0x35, 0x76, 0x4b, 0x44, 0x65, 0x95, 0xbf, 0xe1, 0xe4, 0x51, 0x65, 0xd4, 0x2c, 0x77, 0x0a};
    static const uint8_t returned_149[] = { 0x02, 0x66, 0x4c, 0x05, 0x70, 0xc4, 0xd3, 0xc4, 0x68, 0xd1, 0x6c, 0xc7, 0xc8, 0xb9, 0x9d, 0xa7, 0xa7, 0xf1, 0x75, 0x22, 0x49, 0xe3, 0x0f, 0x28, 0x33, 0xb1, 0xb7, 0xcd, 0x32, 0xa4, 0xdf, 0x3c, 0x23, 0x45, 0x46, 0x21, 0xd7, 0x91, 0x19, 0xa9, 0xaa, 0xcc, 0xc5, 0x2d, 0x3f, 0x90, 0x55, 0xdb, 0xde, 0x98, 0xe7, 0x73, 0xc2, 0x6d, 0x4d, 0xac, 0xe0, 0x9c, 0xe9, 0xbe, 0x1f, 0x1f, 0x61, 0xb2};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_150[] = { 0xaf, 0xb8, 0x20, 0x3d, 0x4f, 0x79, 0x00, 0xc3, 0x5d, 0x7b, 0xb4, 0x54, 0xa8, 0x3c, 0x5f, 0x26, 0x67, 0xab, 0x50, 0x6a, 0x68, 0xb7, 0x10, 0x01, 0x1c, 0x0b, 0xe6, 0x70, 0x55, 0xdf, 0xc3, 0xeb};
    rng.instantiate(entropy_148, personalization_150, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_149, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11286 */
  {
    static const uint8_t entropy_151[] = { 0x48, 0xe8, 0x27, 0x1c, 0x4b, 0x55, 0x4d, 0x9d, 0xa3, 0xf8, 0x8c, 0x82, 0x0d, 0x07, 0x8f, 0x6a, 0x3f, 0x66, 0xac, 0xf0, 0x07, 0xcc, 0x98, 0x84, 0x0e, 0x03, 0xe2, 0x6c, 0x62, 0x52, 0x7f, 0x91};
    static const uint8_t returned_152[] = { 0xb9, 0xa9, 0x56, 0xa6, 0xe3, 0xd1, 0x03, 0x10, 0xe5, 0x7e, 0x28, 0x7c, 0x28, 0x4c, 0x68, 0x67, 0xed, 0x9e, 0x80, 0x84, 0xa6, 0x2b, 0x25, 0xc4, 0x92, 0x18, 0xfa, 0x3a, 0xed, 0xe7, 0xc6, 0xea, 0xec, 0x16, 0x22, 0x69, 0x66, 0x40, 0xf6, 0xb4, 0xad, 0x53, 0x79, 0xc6, 0xfb, 0x8f, 0x9b, 0x5d, 0x72, 0x02, 0xad, 0x89, 0x10, 0x5d, 0x03, 0x17, 0x34, 0x87, 0xe2, 0x9d, 0xa9, 0x73, 0x93, 0x90};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_151, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_152, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11294 */
  {
    static const uint8_t entropy_153[] = { 0xb1, 0xc3, 0x47, 0xb0, 0x96, 0x65, 0x31, 0x0d, 0x0d, 0x04, 0x87, 0x93, 0x5e, 0xa8, 0x1b, 0x4f, 0x73, 0x44, 0x83, 0x86, 0xcf, 0x08, 0x01, 0xcc, 0x9d, 0x6a, 0x0b, 0xb6, 0x55, 0x60, 0x2c, 0x29};
    static const uint8_t returned_154[] = { 0xa6, 0x19, 0xe2, 0x6d, 0x7a, 0xcf, 0x6b, 0x82, 0x84, 0x51, 0x56, 0x2f, 0x51, 0x75, 0xc2, 0xa9, 0xaf, 0xb7, 0x3c, 0xe3, 0xa7, 0x26, 0x5b, 0xea, 0x38, 0xb8, 0xf3, 0xbd, 0xe9, 0xf4, 0x26, 0xcf, 0x55, 0x2f, 0xff, 0x34, 0x35, 0xea, 0xbb, 0xfb, 0x72, 0x44, 0x6d, 0x90, 0x76, 0xee, 0x00, 0x45, 0xbf, 0x82, 0xca, 0xff, 0x76, 0xd9, 0x01, 0x23, 0x7f, 0x7b, 0x6e, 0x33, 0xe6, 0xac, 0xdf, 0x9a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_153, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_154, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11302 */
  {
    static const uint8_t entropy_155[] = { 0x4a, 0xdf, 0x8e, 0xbf, 0xf3, 0x58, 0x8c, 0x1d, 0x86, 0xf8, 0xb0, 0xa7, 0x0f, 0x55, 0x85, 0xcd, 0x7f, 0xa6, 0xe1, 0xa1, 0x17, 0x6e, 0x79, 0x1b, 0xeb, 0x37, 0xb5, 0xa2, 0x51, 0x25, 0xd2, 0xab};
    static const uint8_t returned_156[] = { 0x8b, 0xfd, 0x73, 0xea, 0x99, 0x09, 0xcb, 0x62, 0x24, 0x8f, 0x97, 0x2c, 0xa7, 0x7f, 0xd6, 0x53, 0x79, 0x24, 0xfb, 0xf5, 0x84, 0x7b, 0xd6, 0xb2, 0x9b, 0x2f, 0xe3, 0x67, 0xf8, 0xdd, 0x2f, 0xe2, 0x2c, 0xad, 0xeb, 0x8b, 0x6e, 0x32, 0x85, 0x6d, 0xcf, 0xf8, 0x11, 0xda, 0x72, 0x48, 0x3e, 0xf1, 0x64, 0xcf, 0xa6, 0x78, 0xde, 0xb4, 0xf9, 0xaf, 0x38, 0x1e, 0xfe, 0x2d, 0x70, 0x28, 0x82, 0x92};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_155, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_156, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11310 */
  {
    static const uint8_t entropy_157[] = { 0x28, 0x5d, 0xe6, 0x16, 0xb8, 0xba, 0x8b, 0xb5, 0xf6, 0x46, 0xfe, 0x43, 0x60, 0x16, 0x45, 0x45, 0x4e, 0xc7, 0xd7, 0x08, 0xf4, 0x42, 0xfb, 0x1f, 0xfd, 0xea, 0x09, 0xae, 0x10, 0xac, 0xc0, 0x64};
    static const uint8_t returned_158[] = { 0x31, 0xbe, 0x55, 0x8c, 0xa1, 0x3f, 0x23, 0x8d, 0x59, 0x6e, 0xc5, 0xdb, 0x02, 0xd4, 0xf0, 0xb9, 0x23, 0xbf, 0x01, 0x64, 0x9d, 0x1a, 0x51, 0xf4, 0xcd, 0x27, 0xfc, 0xd7, 0x7b, 0xa2, 0x9e, 0x46, 0x30, 0xef, 0xc9, 0x13, 0xbd, 0xa1, 0xdb, 0xed, 0x32, 0x0c, 0x7f, 0x4c, 0x8d, 0x69, 0xac, 0x7f, 0xb3, 0xec, 0xcc, 0x25, 0x9b, 0xca, 0x82, 0xe4, 0x79, 0x59, 0x9f, 0x3a, 0x67, 0xb1, 0x79, 0x22};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_157, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_158, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11318 */
  {
    static const uint8_t entropy_159[] = { 0x14, 0x5b, 0x3c, 0x65, 0xaf, 0xb2, 0xfb, 0xae, 0x1c, 0xd7, 0x65, 0x25, 0xb2, 0xd5, 0x32, 0x5c, 0xc4, 0x30, 0xcd, 0x4e, 0x1c, 0x8a, 0x63, 0x76, 0xbf, 0xc7, 0xa3, 0x02, 0x3b, 0xb8, 0xf5, 0x9d};
    static const uint8_t returned_160[] = { 0x56, 0x60, 0x03, 0x5f, 0x34, 0xbc, 0xc6, 0xcc, 0xab, 0xae, 0xcb, 0x15, 0x83, 0x82, 0x7c, 0x9f, 0x0f, 0xf4, 0x3e, 0x0e, 0xcb, 0x22, 0x26, 0x9c, 0x06, 0x93, 0x63, 0xc0, 0x5e, 0xc2, 0x82, 0xbc, 0x5f, 0x4d, 0x4a, 0x42, 0x62, 0xe1, 0xe0, 0xa0, 0xfb, 0x66, 0x7a, 0x28, 0x5a, 0x3f, 0xde, 0x69, 0x05, 0x2c, 0x91, 0xc7, 0x3d, 0x04, 0x32, 0xd9, 0x12, 0x35, 0xbf, 0x4f, 0x90, 0x37, 0x3a, 0x22};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_159, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_160, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11326 */
  {
    static const uint8_t entropy_161[] = { 0xb8, 0x0c, 0x0a, 0x02, 0xb6, 0xfc, 0x7b, 0xfc, 0x05, 0x15, 0x88, 0x00, 0x05, 0xc0, 0xa2, 0xc1, 0x8e, 0xf5, 0xb8, 0x12, 0x99, 0x15, 0xfd, 0xac, 0x34, 0xbc, 0x94, 0x6c, 0xb4, 0x80, 0xc0, 0xfd};
    static const uint8_t returned_162[] = { 0x82, 0xef, 0x2a, 0xf1, 0x4b, 0x58, 0xfc, 0xe2, 0x9d, 0x33, 0xf9, 0xf1, 0xb5, 0x26, 0x18, 0xf2, 0x30, 0x24, 0xdd, 0x17, 0xdc, 0x81, 0x33, 0x74, 0x9b, 0x59, 0x98, 0x15, 0x0f, 0x44, 0xf4, 0xde, 0x8f, 0xa2, 0x8f, 0x62, 0xc4, 0xdf, 0xeb, 0x2b, 0xb7, 0xbc, 0xc4, 0xf5, 0x14, 0xaf, 0x9a, 0xd2, 0xc7, 0x64, 0x20, 0xd3, 0xe4, 0xcf, 0x7c, 0xc5, 0x35, 0xc5, 0x56, 0xe1, 0xe7, 0x3a, 0xcc, 0x54};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_161, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_162, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11334 */
  {
    static const uint8_t entropy_163[] = { 0x1a, 0xea, 0x93, 0x80, 0xee, 0x1c, 0x38, 0x37, 0xfd, 0x57, 0xb6, 0xae, 0x69, 0xca, 0xe7, 0xd1, 0xa8, 0x16, 0x63, 0xc2, 0xc3, 0x69, 0x19, 0xa8, 0xfb, 0x46, 0x39, 0x8a, 0x77, 0x57, 0xd7, 0xbf};
    static const uint8_t returned_164[] = { 0x9b, 0xf9, 0xe4, 0xee, 0xee, 0xf1, 0x18, 0xd6, 0x75, 0x49, 0x44, 0xb8, 0xed, 0xd4, 0x6d, 0xea, 0x37, 0x97, 0xd8, 0x21, 0x9d, 0xfb, 0x9d, 0xec, 0x11, 0x86, 0xbb, 0xe2, 0xa9, 0x87, 0x6e, 0x60, 0x4a, 0xd5, 0x2c, 0x02, 0xd0, 0x2e, 0xa0, 0xa9, 0x80, 0x29, 0xe8, 0x83, 0xff, 0xf8, 0xb6, 0x04, 0x39, 0xe6, 0xc3, 0x58, 0xb2, 0x6c, 0xb0, 0xea, 0x40, 0xf0, 0x31, 0x9a, 0x37, 0xf3, 0xea, 0x87};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_163, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_164, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11342 */
  {
    static const uint8_t entropy_165[] = { 0xf2, 0xa7, 0x11, 0xe4, 0xe5, 0xf0, 0x55, 0x1a, 0xe7, 0xc7, 0x91, 0x6a, 0x95, 0xe7, 0x65, 0x42, 0xa4, 0x4c, 0x9a, 0x02, 0xc7, 0x15, 0x35, 0xfd, 0x02, 0x0b, 0x2d, 0xb1, 0x68, 0xf4, 0x3d, 0x31};
    static const uint8_t returned_166[] = { 0xcb, 0x8a, 0xc7, 0x86, 0x03, 0xa6, 0xb4, 0x4f, 0x05, 0x7f, 0x8f, 0xa3, 0x48, 0xe1, 0x98, 0x71, 0x06, 0xd5, 0xaf, 0x6b, 0x92, 0x93, 0xff, 0xe3, 0x72, 0x6b, 0x46, 0x24, 0xba, 0x04, 0xc6, 0x0a, 0x27, 0xb2, 0x1a, 0x62, 0x62, 0x24, 0x74, 0x8e, 0xcc, 0x11, 0x1c, 0xd1, 0xef, 0x10, 0x2d, 0x62, 0xd8, 0xe9, 0x0c, 0xd5, 0x14, 0xef, 0x04, 0x51, 0x67, 0x18, 0x53, 0x05, 0x00, 0x67, 0x8f, 0x20};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_165, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_166, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11350 */
  {
    static const uint8_t entropy_167[] = { 0x15, 0x9c, 0xc9, 0xeb, 0x22, 0xaa, 0xfb, 0x9c, 0xe3, 0x1a, 0x7e, 0xe2, 0xf8, 0xe6, 0x17, 0x15, 0x24, 0xc7, 0xd7, 0xbc, 0x04, 0x56, 0x32, 0xad, 0x04, 0x3d, 0x73, 0x1d, 0x00, 0xfb, 0x2a, 0x67};
    static const uint8_t returned_168[] = { 0xa2, 0x31, 0xa1, 0xab, 0x27, 0x3a, 0x29, 0x7b, 0xd4, 0x43, 0xf1, 0x43, 0x59, 0x92, 0x35, 0xcf, 0xdf, 0xc7, 0x23, 0x59, 0xbb, 0x69, 0x39, 0x4a, 0xf0, 0x91, 0x79, 0x60, 0xec, 0x43, 0xae, 0x17, 0xaa, 0xe4, 0x62, 0x32, 0xf8, 0x27, 0x3e, 0xdd, 0x86, 0x4b, 0x8b, 0x07, 0xa6, 0x13, 0xe9, 0xfc, 0x26, 0x56, 0xe8, 0x95, 0x30, 0x0f, 0xd1, 0x7a, 0x9e, 0x28, 0x60, 0xd4, 0x5d, 0xb6, 0x1e, 0x8c};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_167, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_168, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11358 */
  {
    static const uint8_t entropy_169[] = { 0x1e, 0xbc, 0xcb, 0x0d, 0xd5, 0x03, 0xec, 0x20, 0xe5, 0x8b, 0xb4, 0xd8, 0xc2, 0xec, 0x67, 0xf2, 0xe8, 0xdc, 0x3a, 0x04, 0x36, 0x1d, 0xaf, 0xc8, 0x1c, 0x0c, 0x0b, 0x61, 0x1a, 0xf2, 0x76, 0xa2};
    static const uint8_t returned_170[] = { 0xc6, 0x4d, 0xb3, 0x84, 0xb4, 0xb7, 0xb0, 0x54, 0xb0, 0x0d, 0x31, 0xbb, 0x94, 0xc0, 0x27, 0x35, 0x0e, 0x7a, 0x5c, 0x2f, 0xe0, 0x0e, 0xef, 0x37, 0x15, 0x6c, 0x94, 0x63, 0x9c, 0xdb, 0x04, 0x33, 0xfb, 0x31, 0xbe, 0x02, 0x37, 0x01, 0x9b, 0xfa, 0xf6, 0xf9, 0xc5, 0x49, 0xff, 0x77, 0xd5, 0x23, 0xb5, 0xb5, 0x3c, 0x07, 0xd1, 0xe0, 0x0f, 0x79, 0xb0, 0x74, 0xb7, 0xfb, 0x5c, 0x78, 0x14, 0xe4};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_169, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_170, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11366 */
  {
    static const uint8_t entropy_171[] = { 0x6d, 0xbf, 0x76, 0xe7, 0x8b, 0x9a, 0xf7, 0x74, 0x4c, 0x84, 0xa2, 0x4e, 0x5d, 0x9a, 0x4b, 0x42, 0x49, 0x32, 0xb1, 0x9e, 0x6a, 0x62, 0xa9, 0xab, 0x3a, 0x04, 0xb3, 0x2c, 0x76, 0xee, 0xf7, 0xde};
    static const uint8_t returned_172[] = { 0xea, 0x09, 0xfc, 0x60, 0x69, 0xb9, 0x9c, 0x9e, 0xd1, 0x16, 0xdf, 0x49, 0x47, 0x1b, 0xe2, 0xd7, 0x26, 0x17, 0x10, 0xa8, 0xaf, 0xba, 0x1c, 0xf3, 0xa0, 0xd3, 0xf3, 0xd2, 0x2d, 0x80, 0x72, 0xb0, 0xb5, 0x0e, 0x00, 0x3d, 0x7f, 0xab, 0x02, 0x11, 0xd5, 0xa4, 0x4d, 0x6f, 0x75, 0xf4, 0x54, 0x1f, 0x5b, 0x97, 0x3e, 0x72, 0x71, 0x05, 0xe0, 0x29, 0x7c, 0x3b, 0x9f, 0x0c, 0xa9, 0x4e, 0x00, 0x43};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_171, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_172, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11374 */
  {
    static const uint8_t entropy_173[] = { 0xb0, 0xa4, 0xfa, 0x9c, 0xc2, 0xa5, 0xb4, 0x28, 0xdd, 0x92, 0x4c, 0x31, 0x2d, 0xcc, 0x05, 0x4b, 0xfb, 0xf7, 0x4c, 0x0f, 0x9c, 0x38, 0xed, 0x02, 0x40, 0x04, 0x6f, 0x35, 0x4d, 0x2f, 0xc6, 0xb2};
    static const uint8_t returned_174[] = { 0x6f, 0x51, 0x33, 0x61, 0xb3, 0x07, 0x6f, 0x5e, 0xac, 0x6c, 0xa5, 0x40, 0x86, 0x9b, 0xdc, 0x40, 0x11, 0x88, 0xf9, 0xe4, 0xbe, 0x25, 0x34, 0x8e, 0x22, 0xa6, 0xb8, 0xda, 0xa0, 0x43, 0x11, 0xb5, 0x27, 0x84, 0xba, 0xff, 0x3c, 0x2a, 0x11, 0xca, 0xf0, 0x3d, 0xea, 0xc3, 0x64, 0x31, 0x74, 0xb0, 0xc8, 0xe4, 0x4b, 0x54, 0x4c, 0x0b, 0xbb, 0x4d, 0xa7, 0x24, 0x1b, 0xbf, 0x65, 0x7e, 0xc1, 0x76};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_173, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_174, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11382 */
  {
    static const uint8_t entropy_175[] = { 0x85, 0x7a, 0x11, 0x86, 0xa0, 0x82, 0xd7, 0x7e, 0xd7, 0x89, 0x3b, 0xb4, 0x67, 0xda, 0xa7, 0x95, 0x76, 0xd1, 0xfc, 0x66, 0x7e, 0x07, 0x11, 0x74, 0x90, 0x52, 0x2f, 0x87, 0xee, 0x19, 0xbb, 0x9f};
    static const uint8_t returned_176[] = { 0xfb, 0x88, 0x89, 0xbf, 0xe0, 0x08, 0xf0, 0xd4, 0x50, 0x34, 0xc2, 0x6b, 0xb0, 0x41, 0x4f, 0xf1, 0x95, 0x13, 0xb6, 0xc4, 0x44, 0x5a, 0xcc, 0x4a, 0x56, 0x3f, 0x6d, 0xf9, 0x55, 0x2e, 0xc5, 0xdf, 0x95, 0xf8, 0xcc, 0x71, 0x43, 0x75, 0x7e, 0x74, 0x06, 0xfe, 0xb4, 0xf5, 0xbe, 0x7f, 0x1b, 0x65, 0x76, 0x04, 0x90, 0xdf, 0x90, 0x29, 0x8e, 0x73, 0x05, 0x58, 0x30, 0x94, 0x3d, 0xbd, 0x7c, 0x38};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_175, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_176, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11390 */
  {
    static const uint8_t entropy_177[] = { 0xb2, 0x78, 0xae, 0xf0, 0x58, 0x9b, 0xa4, 0x9f, 0x91, 0xd3, 0xce, 0x6e, 0xf0, 0xaf, 0x69, 0x8b, 0xbf, 0x28, 0x2e, 0xd6, 0xc1, 0x12, 0xca, 0xd9, 0xe8, 0x66, 0x46, 0xd0, 0x10, 0x76, 0x31, 0xdd};
    static const uint8_t returned_178[] = { 0xe6, 0xe3, 0x45, 0xa5, 0x0c, 0xed, 0x3c, 0xc6, 0x8a, 0xe2, 0x4e, 0xd9, 0xad, 0x8c, 0xdb, 0x48, 0x28, 0x15, 0x28, 0x4e, 0x66, 0xf9, 0xb0, 0x15, 0x1f, 0xdd, 0x75, 0xd1, 0x3c, 0x97, 0x58, 0x66, 0x3c, 0x4d, 0xf9, 0xab, 0x99, 0xce, 0xf4, 0xfe, 0xd8, 0xae, 0x86, 0xfd, 0x18, 0x68, 0xbe, 0x6c, 0x5e, 0xae, 0xad, 0x7a, 0x6a, 0x9d, 0xe7, 0x22, 0xf1, 0x2d, 0xa1, 0xe9, 0x55, 0xdb, 0xc6, 0x41};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_177, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_178, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11398 */
  {
    static const uint8_t entropy_179[] = { 0xab, 0x87, 0x58, 0x86, 0x82, 0x71, 0x97, 0xb7, 0x84, 0xb1, 0x37, 0x72, 0x6f, 0x1f, 0x58, 0x62, 0xc0, 0x16, 0xe2, 0xc8, 0x78, 0x04, 0x52, 0xfe, 0x98, 0xf4, 0xee, 0xb6, 0x8f, 0x71, 0xac, 0xa5};
    static const uint8_t returned_180[] = { 0xb6, 0x63, 0x44, 0x52, 0x66, 0x1b, 0x01, 0x9a, 0xfb, 0xf2, 0xe9, 0xb6, 0xe2, 0x0b, 0x8b, 0xe7, 0xd9, 0xca, 0xb7, 0x39, 0x38, 0x3d, 0xe8, 0x63, 0x64, 0x04, 0xc2, 0x75, 0xdc, 0x49, 0x5f, 0x54, 0xfb, 0xf2, 0x32, 0x05, 0xdb, 0xf8, 0x43, 0xaf, 0xeb, 0xbc, 0x4e, 0x88, 0xc6, 0xee, 0x12, 0x6f, 0x72, 0x9c, 0xc4, 0x07, 0xcc, 0xbb, 0xe7, 0x92, 0xe3, 0x31, 0x92, 0x30, 0xf2, 0x30, 0x23, 0xd1};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_179, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_180, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11542 */
  {
    static const uint8_t entropy_181[] = { 0x52, 0x54, 0x4b, 0xe6, 0xee, 0xbf, 0xd2, 0x27, 0x80, 0x9c, 0xde, 0x95, 0xf1, 0x9a, 0x06, 0x2b, 0xdf, 0xf8, 0xad, 0xf9, 0x4a, 0xfa, 0xdf, 0xb6, 0x01, 0x2c, 0x8c, 0x3d, 0x99, 0xd1, 0x7b, 0x8b};
    static const uint8_t returned_182[] = { 0x91, 0xcf, 0x40, 0x38, 0x78, 0xec, 0xca, 0x1f, 0xd4, 0x5d, 0x31, 0xdc, 0x67, 0x63, 0x02, 0xe0, 0x2e, 0x92, 0xd4, 0x47, 0x10, 0xbf, 0x92, 0x00, 0x49, 0x2a, 0xee, 0x1d, 0xe6, 0xd1, 0xb6, 0x4f, 0x34, 0x2c, 0x1a, 0xd8, 0x07, 0xc8, 0x45, 0xb5, 0x39, 0x65, 0x2c, 0xab, 0xe0, 0x34, 0xb6, 0x9f, 0x2e, 0x84, 0xb4, 0x22, 0x0c, 0xf7, 0xcc, 0x1b, 0xa6, 0xee, 0xdd, 0xf8, 0x6d, 0x8f, 0x3d, 0x99};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_183[] = { 0xb4, 0xad, 0x54, 0x42, 0xe7, 0xbb, 0xba, 0x49, 0x9c, 0x36, 0xfa, 0x52, 0x05, 0x03, 0x79, 0x5e, 0x7f, 0x2a, 0x31, 0xbe, 0x8d, 0x95, 0x94, 0x3e, 0xb3, 0x4d, 0xb5, 0x38, 0xd6, 0x67, 0x23, 0xee};
    rng.instantiate(entropy_181, personalization_183, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_182, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11550 */
  {
    static const uint8_t entropy_184[] = { 0x25, 0xf5, 0xec, 0x23, 0x69, 0x5d, 0xb8, 0x15, 0x13, 0x14, 0xd7, 0x9d, 0x5f, 0x8d, 0x3a, 0x6d, 0x2f, 0x1c, 0xf7, 0x44, 0xa0, 0x2c, 0xff, 0x05, 0x8a, 0x31, 0x09, 0x3a, 0xa2, 0x95, 0x0d, 0x5e};
    static const uint8_t returned_185[] = { 0x8a, 0xd6, 0x7e, 0x6d, 0xee, 0x16, 0x8d, 0xa8, 0x30, 0x27, 0x0c, 0x84, 0xfe, 0x6f, 0x54, 0xf2, 0x85, 0x27, 0x06, 0x91, 0xa9, 0x82, 0xaa, 0x32, 0xf0, 0x40, 0xba, 0xf4, 0x3d, 0xea, 0x48, 0x23, 0x87, 0x3a, 0x08, 0xa0, 0xb3, 0xbe, 0xe2, 0x78, 0x4d, 0xb0, 0xf9, 0x38, 0x5c, 0xd8, 0x46, 0xde, 0x32, 0xb4, 0xf4, 0x17, 0xae, 0xb2, 0x3e, 0xfb, 0x85, 0x51, 0xdd, 0xf4, 0xac, 0x1c, 0xff, 0x6a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_186[] = { 0x6b, 0xc7, 0x75, 0x68, 0x17, 0x6a, 0xd5, 0x9c, 0x72, 0xcb, 0x06, 0x4e, 0x81, 0xc8, 0x0f, 0x8f, 0xf3, 0xbe, 0x2d, 0x4e, 0x2e, 0x1a, 0x46, 0x7d, 0x60, 0x03, 0x1c, 0x6c, 0x19, 0x05, 0xcd, 0xc4};
    rng.instantiate(entropy_184, personalization_186, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_185, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11558 */
  {
    static const uint8_t entropy_187[] = { 0xae, 0xc2, 0xcd, 0x6f, 0x65, 0x78, 0x1d, 0x4e, 0x11, 0x68, 0xba, 0x57, 0x19, 0x12, 0x80, 0x09, 0x8c, 0x39, 0xe3, 0x48, 0xaf, 0x42, 0xb3, 0xf4, 0x5a, 0x79, 0x90, 0x3c, 0x29, 0xde, 0x70, 0xb3};
    static const uint8_t returned_188[] = { 0xa8, 0xe1, 0xfd, 0x99, 0xf1, 0x8a, 0x3b, 0x31, 0x32, 0x25, 0xc9, 0xf6, 0xaf, 0x0c, 0xe0, 0x32, 0x6a, 0x90, 0x71, 0x44, 0xd0, 0x91, 0xb4, 0xdf, 0x1b, 0xf8, 0x44, 0x25, 0x66, 0x58, 0x70, 0xa8, 0x08, 0x01, 0xb0, 0x7f, 0xf7, 0x4c, 0x0f, 0x74, 0x98, 0xf3, 0x7d, 0xcd, 0x34, 0x23, 0x20, 0x70, 0x73, 0x4f, 0x76, 0x0e, 0xb1, 0x9c, 0x96, 0x61, 0x40, 0xe3, 0x56, 0x5a, 0xcc, 0x7c, 0x9c, 0x32};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_189[] = { 0xc7, 0x22, 0xc7, 0xd8, 0xc1, 0xfa, 0xd0, 0xd4, 0xff, 0xeb, 0x4f, 0xfc, 0x0c, 0x0f, 0xf0, 0xfb, 0x5a, 0x98, 0xdf, 0x29, 0x5e, 0x32, 0x43, 0x70, 0x7a, 0xce, 0x3c, 0x97, 0x48, 0x3c, 0x4c, 0x17};
    rng.instantiate(entropy_187, personalization_189, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_188, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11566 */
  {
    static const uint8_t entropy_190[] = { 0x30, 0xe4, 0xa1, 0x76, 0x5b, 0xe1, 0x24, 0x9e, 0xea, 0x46, 0xf2, 0x98, 0xa6, 0x7c, 0x27, 0x1c, 0x2b, 0x34, 0xc6, 0xb5, 0xb7, 0xa5, 0xfb, 0xe9, 0x74, 0x0f, 0xc3, 0x72, 0x9a, 0x80, 0x75, 0x8a};
    static const uint8_t returned_191[] = { 0x86, 0x69, 0xf2, 0xc2, 0x59, 0x65, 0x94, 0x8b, 0x61, 0xf6, 0x38, 0x8a, 0x0f, 0x0e, 0x0c, 0xb8, 0xb2, 0x86, 0xef, 0x44, 0x42, 0x01, 0xd3, 0xb9, 0x8d, 0x68, 0x45, 0xa7, 0xe1, 0x4d, 0x14, 0x5b, 0xde, 0x1d, 0x01, 0x42, 0x0e, 0x59, 0x0d, 0xff, 0xb6, 0x45, 0xe6, 0xc9, 0x0e, 0x30, 0x56, 0x86, 0xcf, 0x9b, 0x68, 0x5c, 0xa9, 0x5c, 0x97, 0xeb, 0xff, 0x38, 0x64, 0xc6, 0x2a, 0x00, 0x4b, 0xd6};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_192[] = { 0x18, 0x35, 0xea, 0xd1, 0xd8, 0x6c, 0x79, 0xc3, 0x36, 0x24, 0xfc, 0xae, 0x73, 0xdb, 0x91, 0xe8, 0x58, 0x31, 0xc1, 0x88, 0x2d, 0x72, 0x8a, 0x3c, 0x19, 0xa0, 0x5f, 0x90, 0x53, 0x3e, 0xbe, 0x8b};
    rng.instantiate(entropy_190, personalization_192, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_191, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11574 */
  {
    static const uint8_t entropy_193[] = { 0xce, 0x80, 0xf4, 0x9a, 0x95, 0x12, 0xb7, 0x64, 0x77, 0xbd, 0x40, 0xac, 0xf3, 0x20, 0xd1, 0xcc, 0xe7, 0x42, 0x56, 0x59, 0x04, 0xef, 0x45, 0xc8, 0x01, 0xd5, 0xbb, 0xd6, 0x20, 0x6d, 0xd2, 0x0f};
    static const uint8_t returned_194[] = { 0x5f, 0xed, 0x82, 0xf1, 0xd1, 0x0b, 0x8c, 0xe1, 0xdf, 0xb5, 0x97, 0xc9, 0x05, 0xe4, 0x11, 0xe8, 0x1f, 0xb9, 0x62, 0x63, 0x84, 0x22, 0x99, 0xa1, 0x9a, 0x0a, 0xfc, 0xaa, 0xaf, 0x6f, 0x40, 0xc1, 0x18, 0xad, 0x0a, 0x3f, 0x2b, 0x5f, 0xdc, 0xa0, 0x79, 0x53, 0x8c, 0x35, 0x41, 0x62, 0xae, 0xde, 0x2a, 0x49, 0xd5, 0x29, 0xd3, 0x70, 0xb6, 0xad, 0x1c, 0x56, 0x18, 0xd3, 0xf8, 0x07, 0xb3, 0x2c};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_195[] = { 0xd2, 0x12, 0x10, 0x1d, 0x3f, 0x55, 0x8c, 0x33, 0x91, 0x5a, 0xca, 0x3f, 0x7c, 0xa3, 0x2b, 0x65, 0xd8, 0xe6, 0x74, 0xc1, 0xa8, 0xc8, 0x80, 0x45, 0x7b, 0xfb, 0xea, 0xe5, 0x9b, 0x87, 0x67, 0x78};
    rng.instantiate(entropy_193, personalization_195, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_194, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11582 */
  {
    static const uint8_t entropy_196[] = { 0xcf, 0x9d, 0x04, 0x88, 0x7a, 0x64, 0xdf, 0x7e, 0x2a, 0x4d, 0x10, 0x7d, 0x48, 0x7d, 0x3b, 0x14, 0x6e, 0xe8, 0x49, 0x38, 0x8f, 0x96, 0x0d, 0x0a, 0x14, 0xef, 0x2a, 0x5e, 0x26, 0xa3, 0x2b, 0x92};
    static const uint8_t returned_197[] = { 0x8c, 0xaf, 0x1a, 0x41, 0xdf, 0x0e, 0xd4, 0x8e, 0x05, 0xbd, 0x57, 0xd7, 0xe8, 0xb1, 0xd7, 0x84, 0xfe, 0x4c, 0x55, 0xc7, 0xc0, 0x8e, 0x0c, 0x2f, 0xeb, 0x56, 0xda, 0x99, 0xcb, 0xb6, 0x0b, 0x82, 0x42, 0xdc, 0xbb, 0x2e, 0x23, 0x6d, 0x48, 0x13, 0x28, 0xc0, 0x35, 0x2e, 0x3c, 0x20, 0x60, 0x68, 0x80, 0xe1, 0xf0, 0x9b, 0x68, 0x47, 0x03, 0x98, 0x4b, 0x33, 0x2b, 0x7c, 0x59, 0xbd, 0x86, 0x67};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_198[] = { 0x39, 0x50, 0xf0, 0x9d, 0x6b, 0x56, 0x4c, 0xa2, 0x49, 0x6d, 0x74, 0x0a, 0x92, 0xc2, 0x3f, 0xe0, 0x9f, 0xf8, 0x75, 0xce, 0xae, 0xa5, 0x8a, 0x3e, 0xc6, 0x8d, 0x12, 0xbc, 0x84, 0x94, 0x7d, 0x74};
    rng.instantiate(entropy_196, personalization_198, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_197, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11590 */
  {
    static const uint8_t entropy_199[] = { 0xc6, 0x1f, 0x9c, 0xfd, 0xc7, 0xea, 0x70, 0xe4, 0x03, 0xd4, 0x97, 0x2a, 0x23, 0x43, 0x78, 0xbb, 0x6a, 0xc9, 0x9c, 0x13, 0xfe, 0xe4, 0x35, 0x9b, 0xa8, 0x70, 0xfa, 0xe2, 0x9d, 0x22, 0xa8, 0xb8};
    static const uint8_t returned_200[] = { 0x76, 0x00, 0x7d, 0x13, 0x43, 0x06, 0x42, 0x5f, 0x4d, 0x1b, 0x1f, 0xc8, 0x1c, 0x01, 0x4b, 0x6f, 0x69, 0x71, 0x89, 0x18, 0x57, 0x69, 0x6e, 0x7c, 0x7e, 0xa1, 0xf8, 0x73, 0x14, 0x07, 0x55, 0x0a, 0x2d, 0x88, 0x64, 0x46, 0x36, 0x9f, 0x70, 0x3f, 0x97, 0xba, 0x3d, 0x1a, 0x3a, 0x86, 0x51, 0x3e, 0x6e, 0x2a, 0xf4, 0x06, 0x86, 0x9c, 0xe7, 0x7c, 0x16, 0x96, 0x85, 0x55, 0x06, 0x40, 0xe4, 0x4d};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_201[] = { 0x86, 0xee, 0xb3, 0x3b, 0x00, 0x86, 0x77, 0x0f, 0x72, 0xee, 0x97, 0x1b, 0x8e, 0x84, 0xda, 0x92, 0xce, 0x90, 0x97, 0x4e, 0x37, 0x42, 0x63, 0x1a, 0x0a, 0x21, 0x95, 0xb8, 0x87, 0x66, 0xa5, 0x33};
    rng.instantiate(entropy_199, personalization_201, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_200, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11598 */
  {
    static const uint8_t entropy_202[] = { 0x05, 0x41, 0xd6, 0xf9, 0x91, 0x66, 0x87, 0x7f, 0x14, 0xe2, 0xec, 0x40, 0xd3, 0x7d, 0xcd, 0x69, 0x3a, 0x53, 0x9f, 0xee, 0x18, 0x75, 0x2d, 0xcc, 0x16, 0x68, 0x56, 0x94, 0xef, 0x86, 0x53, 0xa7};
    static const uint8_t returned_203[] = { 0x47, 0xeb, 0x4f, 0x0f, 0x7d, 0x57, 0xe0, 0xd3, 0x60, 0xfe, 0x51, 0xd6, 0xb2, 0xaa, 0x54, 0xb6, 0x2f, 0x05, 0xcd, 0xd6, 0x2a, 0x78, 0x9c, 0xd6, 0x39, 0xf6, 0x3d, 0x90, 0xb5, 0xb5, 0xc5, 0xcc, 0x1b, 0xaf, 0xbe, 0x06, 0x16, 0x3b, 0x84, 0x42, 0x30, 0xa9, 0xf5, 0x28, 0x75, 0xeb, 0xdc, 0x34, 0x2f, 0x84, 0x14, 0x9d, 0x80, 0xd4, 0x81, 0x89, 0x2f, 0x6e, 0x31, 0x62, 0x21, 0x04, 0x4d, 0x9b};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_204[] = { 0xc2, 0xb8, 0x91, 0xc8, 0xe8, 0xf8, 0x5f, 0x13, 0xb0, 0xf8, 0x20, 0x68, 0x20, 0x19, 0x45, 0xbd, 0x6f, 0xec, 0x9d, 0x10, 0x2b, 0x8e, 0x20, 0xa5, 0xbc, 0xa1, 0x00, 0xdd, 0x9b, 0x1c, 0x25, 0x7d};
    rng.instantiate(entropy_202, personalization_204, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_203, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11606 */
  {
    static const uint8_t entropy_205[] = { 0x07, 0x43, 0x67, 0xca, 0x90, 0xc0, 0x4e, 0xe7, 0x88, 0x06, 0x18, 0x68, 0x3d, 0x02, 0x01, 0x7f, 0xe5, 0x82, 0x90, 0x34, 0xed, 0xf5, 0xef, 0xb8, 0x0d, 0x85, 0xd2, 0x37, 0x31, 0xec, 0x16, 0x7a};
    static const uint8_t returned_206[] = { 0x8e, 0xb4, 0xe9, 0x30, 0x79, 0x96, 0xa6, 0xd1, 0x7e, 0x91, 0x37, 0xa1, 0xab, 0xa5, 0x2c, 0x51, 0x8a, 0xa5, 0x60, 0xd5, 0x93, 0x8d, 0x9c, 0xf5, 0x7f, 0x2f, 0x20, 0x09, 0xa0, 0x7c, 0x82, 0xed, 0x54, 0x0d, 0x1c, 0xb4, 0x0b, 0x70, 0x97, 0xf7, 0x7d, 0x6d, 0xd2, 0xe4, 0x90, 0x08, 0xdf, 0x8c, 0x98, 0x97, 0x9c, 0xe3, 0x7e, 0xd3, 0xf7, 0x63, 0xc3, 0x07, 0xe2, 0xd7, 0x9c, 0x7a, 0xe6, 0x16};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_207[] = { 0x21, 0x67, 0xff, 0xee, 0x68, 0x63, 0xe6, 0xe9, 0xa8, 0xd7, 0x70, 0x3b, 0x4e, 0x92, 0xee, 0xe3, 0x1a, 0x73, 0x66, 0x09, 0xd9, 0x2f, 0x90, 0xb9, 0xe3, 0xdf, 0xf4, 0x55, 0x6e, 0x12, 0xb7, 0x7b};
    rng.instantiate(entropy_205, personalization_207, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_206, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11614 */
  {
    static const uint8_t entropy_208[] = { 0x4f, 0x68, 0xa0, 0xa4, 0xac, 0xa7, 0x11, 0x55, 0x0d, 0x02, 0xcf, 0xef, 0x7b, 0xaf, 0x55, 0x5e, 0x45, 0x2a, 0x10, 0xcc, 0xb7, 0xe6, 0x32, 0x9c, 0xed, 0x3a, 0xff, 0x01, 0x96, 0x34, 0xe4, 0x15};
    static const uint8_t returned_209[] = { 0x4d, 0xce, 0x9d, 0xc3, 0xb2, 0x02, 0x05, 0x95, 0xad, 0x97, 0x23, 0x14, 0xa1, 0x19, 0x46, 0x75, 0xca, 0xa7, 0x0c, 0xcb, 0xee, 0xb0, 0x23, 0xaa, 0xda, 0x1b, 0xd9, 0x91, 0xaa, 0xa9, 0x66, 0xb4, 0xef, 0x5e, 0x0d, 0xaf, 0x46, 0xca, 0xe5, 0x16, 0x53, 0x7b, 0x35, 0x18, 0x1e, 0x66, 0x84, 0xeb, 0x0d, 0x73, 0x1b, 0x91, 0x9e, 0x14, 0x70, 0x3f, 0x12, 0x19, 0x60, 0x35, 0x2d, 0xbd, 0xfe, 0x78};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_210[] = { 0x77, 0xe2, 0xd6, 0x22, 0x99, 0x68, 0xc8, 0xa1, 0x6a, 0xc9, 0xbb, 0x1e, 0xf0, 0x42, 0x0e, 0xb0, 0x84, 0xd9, 0xfc, 0xd0, 0x10, 0x89, 0x2a, 0xcc, 0x79, 0xba, 0xab, 0x89, 0x9d, 0x19, 0xce, 0x2b};
    rng.instantiate(entropy_208, personalization_210, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_209, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11622 */
  {
    static const uint8_t entropy_211[] = { 0xc2, 0xd0, 0x01, 0x2e, 0xdd, 0xe1, 0x41, 0xae, 0xa2, 0xe9, 0x45, 0x4c, 0xa0, 0x4d, 0x5c, 0xdb, 0xd8, 0xa2, 0x93, 0xaf, 0xf9, 0x6c, 0xde, 0x59, 0xe4, 0x0d, 0xe0, 0x68, 0xf9, 0xda, 0xb8, 0xf9};
    static const uint8_t returned_212[] = { 0x5d, 0x40, 0x3a, 0x36, 0xe5, 0xee, 0xa6, 0x06, 0x7c, 0x6b, 0x28, 0xb1, 0xcb, 0xc4, 0x8e, 0x9d, 0xad, 0x76, 0xc6, 0x6f, 0x6d, 0x14, 0xba, 0xd9, 0xc6, 0x86, 0x11, 0xfe, 0xf9, 0x77, 0x58, 0xec, 0x6f, 0x5c, 0x79, 0x87, 0x60, 0xe6, 0x71, 0x0d, 0x8b, 0xea, 0x3c, 0x8d, 0xd2, 0x04, 0x5c, 0xa8, 0x92, 0xfa, 0x01, 0x5e, 0x39, 0xe9, 0x38, 0x5d, 0x29, 0xbb, 0xa9, 0x08, 0xd7, 0x00, 0x5a, 0x6c};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_213[] = { 0xd8, 0x0e, 0x1d, 0xdb, 0x2e, 0x39, 0x0b, 0xac, 0x90, 0x08, 0xf1, 0xf4, 0xcf, 0xa1, 0xd5, 0xcf, 0x13, 0xa9, 0x41, 0xcb, 0x46, 0x69, 0xeb, 0x6a, 0x9b, 0x1d, 0xd2, 0x33, 0x58, 0x39, 0x02, 0x86};
    rng.instantiate(entropy_211, personalization_213, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_212, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11630 */
  {
    static const uint8_t entropy_214[] = { 0x10, 0x33, 0x3b, 0xc1, 0x06, 0xe9, 0xee, 0xa9, 0x36, 0xab, 0x55, 0xe3, 0x4c, 0x5f, 0x28, 0x33, 0xad, 0x23, 0x95, 0xc4, 0x66, 0x12, 0x5b, 0xeb, 0x40, 0x00, 0xd4, 0x2b, 0x1c, 0x0a, 0x80, 0xd3};
    static const uint8_t returned_215[] = { 0xd1, 0x22, 0x39, 0xdf, 0x3f, 0x0a, 0x25, 0xe3, 0x84, 0xba, 0x01, 0xe9, 0x2e, 0xf4, 0x84, 0x02, 0x72, 0xcb, 0x82, 0x57, 0x9c, 0xe6, 0xe5, 0xc1, 0x12, 0x5b, 0xa1, 0x91, 0xf2, 0xba, 0xe8, 0xea, 0x86, 0x38, 0xd4, 0xfe, 0x02, 0x0c, 0x20, 0xe2, 0x36, 0xda, 0x8d, 0x6a, 0x83, 0x0c, 0xcd, 0xb8, 0x4e, 0x53, 0x1a, 0x27, 0xf8, 0xcf, 0x9f, 0x16, 0x75, 0xa6, 0x0e, 0x95, 0x7a, 0x15, 0xf7, 0xa4};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_216[] = { 0xa1, 0xa7, 0x77, 0x5e, 0xf0, 0xff, 0x03, 0xd7, 0xad, 0xab, 0x74, 0xb1, 0xb8, 0xf0, 0x5b, 0xf3, 0xd7, 0xb6, 0x2e, 0xda, 0x1d, 0x29, 0x68, 0x5e, 0x86, 0x1c, 0x5e, 0x28, 0xf1, 0x6d, 0x91, 0x48};
    rng.instantiate(entropy_214, personalization_216, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_215, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11638 */
  {
    static const uint8_t entropy_217[] = { 0x3d, 0x4e, 0x96, 0x66, 0x72, 0x3c, 0x05, 0xdd, 0xd2, 0xc1, 0x3a, 0xaa, 0x26, 0xda, 0xdb, 0x43, 0xcb, 0xc1, 0x88, 0xb0, 0xc2, 0x05, 0x7c, 0xeb, 0x1f, 0x0a, 0xc7, 0x8b, 0xc8, 0x57, 0x5c, 0x9e};
    static const uint8_t returned_218[] = { 0xf8, 0x66, 0x42, 0xda, 0xde, 0x14, 0x93, 0xc2, 0x89, 0xc1, 0x6a, 0x21, 0x0c, 0xdf, 0xa7, 0x23, 0x98, 0x8c, 0x72, 0x00, 0xce, 0xbb, 0x36, 0x11, 0x61, 0x6e, 0xa8, 0xa6, 0x36, 0x75, 0x57, 0x6c, 0x64, 0xf6, 0xf4, 0xa9, 0x95, 0xca, 0x22, 0x0f, 0x85, 0x6e, 0x72, 0x5f, 0x30, 0x23, 0xd3, 0xae, 0xce, 0x61, 0xf2, 0x37, 0x54, 0xf0, 0x58, 0x5d, 0xdd, 0x1e, 0x03, 0x31, 0x1c, 0xf5, 0xcb, 0x16};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_219[] = { 0xdb, 0x9e, 0x87, 0x0d, 0x9c, 0xe2, 0xba, 0x3c, 0x7b, 0x26, 0x1f, 0x7e, 0xbe, 0x29, 0x48, 0x2b, 0x0f, 0x12, 0xeb, 0xee, 0xea, 0xe3, 0xf6, 0xfe, 0xce, 0xe4, 0xc0, 0x49, 0x0c, 0x05, 0xe3, 0xeb};
    rng.instantiate(entropy_217, personalization_219, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_218, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11646 */
  {
    static const uint8_t entropy_220[] = { 0xd9, 0x5f, 0x81, 0xf1, 0x98, 0xd9, 0x73, 0x57, 0x7f, 0x90, 0x2d, 0xca, 0xf7, 0x07, 0xd9, 0x3f, 0x5e, 0x9e, 0x0f, 0x4d, 0xa5, 0x0f, 0x48, 0xd3, 0xa1, 0xa2, 0xb6, 0xa0, 0x16, 0x66, 0x41, 0x60};
    static const uint8_t returned_221[] = { 0xc4, 0x35, 0x44, 0xc9, 0x52, 0x28, 0xcb, 0x76, 0xd7, 0xc5, 0xa4, 0x99, 0x37, 0xfe, 0x69, 0x38, 0xd2, 0x20, 0x45, 0x80, 0x04, 0x77, 0x9b, 0x02, 0xcb, 0x7a, 0xa2, 0x8f, 0x8f, 0xb0, 0xc7, 0x95, 0x11, 0x5e, 0x94, 0x2a, 0x65, 0x78, 0xdd, 0xc0, 0xb5, 0x67, 0x9c, 0x0c, 0x9f, 0x54, 0x47, 0x8b, 0x8a, 0x33, 0x53, 0xeb, 0x39, 0x0e, 0x31, 0x77, 0x4e, 0xab, 0xb9, 0xcc, 0x6b, 0x80, 0x33, 0x4d};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_222[] = { 0xc5, 0xe4, 0x22, 0x56, 0xb2, 0xd0, 0x23, 0x9d, 0x20, 0x40, 0x93, 0xca, 0x5f, 0x99, 0xd1, 0x88, 0x0c, 0xeb, 0xc9, 0x6b, 0x67, 0x07, 0xb6, 0xc2, 0x09, 0xea, 0x2d, 0xa0, 0xd2, 0x6a, 0x41, 0x1e};
    rng.instantiate(entropy_220, personalization_222, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_221, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11654 */
  {
    static const uint8_t entropy_223[] = { 0x0c, 0x45, 0x64, 0xba, 0x25, 0x44, 0x55, 0xb6, 0x55, 0x7a, 0xec, 0x1c, 0xfe, 0xe2, 0xb2, 0xb7, 0x26, 0xd2, 0xc4, 0xf4, 0x53, 0x79, 0x26, 0x7f, 0x0e, 0x27, 0xd1, 0x1c, 0x6f, 0x1e, 0xdc, 0x7f};
    static const uint8_t returned_224[] = { 0xc9, 0x48, 0x94, 0xd5, 0x69, 0x85, 0xd7, 0x3a, 0xc5, 0x16, 0xc1, 0x24, 0x9c, 0xea, 0x3d, 0x8e, 0x79, 0xb6, 0x7d, 0xcd, 0xb2, 0xbf, 0x24, 0xb8, 0x30, 0xd5, 0x2f, 0x9e, 0x1f, 0xbd, 0xd8, 0xbd, 0xb3, 0x7a, 0x54, 0x6c, 0x4f, 0xfe, 0x13, 0x18, 0x6c, 0xeb, 0x0a, 0x23, 0x0a, 0x14, 0xee, 0x1b, 0xe0, 0xe4, 0x09, 0xeb, 0x19, 0xee, 0xf0, 0x18, 0xe5, 0x4f, 0x79, 0xc3, 0xdd, 0xd4, 0xfb, 0xd4};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_225[] = { 0x46, 0xae, 0xfb, 0x02, 0x4c, 0x6a, 0xcd, 0xc9, 0x29, 0x7d, 0x50, 0x19, 0x10, 0x93, 0x10, 0xde, 0x55, 0x8f, 0x6a, 0xfc, 0xca, 0x73, 0x0c, 0x84, 0x14, 0xc5, 0x4f, 0x4e, 0x57, 0x4f, 0xab, 0x1e};
    rng.instantiate(entropy_223, personalization_225, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_224, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11798 */
  {
    static const uint8_t entropy_226[] = { 0x08, 0x4b, 0x35, 0x2f, 0x38, 0xab, 0x28, 0xd9, 0xc1, 0xc7, 0xff, 0x16, 0x55, 0x8e, 0x0a, 0x12, 0x37, 0x7d, 0x82, 0x0c, 0xd6, 0xec, 0xa3, 0xa3, 0x52, 0xa6, 0xfe, 0xc3, 0x81, 0xf3, 0x58, 0x44};
    static const uint8_t returned_227[] = { 0xcb, 0xdf, 0xff, 0x95, 0xde, 0x29, 0x06, 0xf3, 0x42, 0x3e, 0xb4, 0x42, 0x2b, 0xd3, 0xb0, 0xe6, 0xed, 0x55, 0xa7, 0x84, 0x3a, 0xb6, 0xeb, 0xed, 0xf5, 0x2a, 0xca, 0xf2, 0x8e, 0x7a, 0x5a, 0xe0, 0x61, 0xae, 0xdb, 0x49, 0xe7, 0x47, 0x67, 0x83, 0xf5, 0xcf, 0x29, 0x54, 0x16, 0x8c, 0x8e, 0xbc, 0x3c, 0x9a, 0xb0, 0xb1, 0xa1, 0xcb, 0x87, 0x90, 0x76, 0xb4, 0x76, 0x97, 0xb3, 0x6f, 0x95, 0x40};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_226, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_227, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11806 */
  {
    static const uint8_t entropy_228[] = { 0x8c, 0x25, 0x66, 0xac, 0x86, 0x0f, 0x23, 0x2f, 0xa3, 0x17, 0x08, 0x7f, 0x84, 0xf0, 0x17, 0x6f, 0x98, 0xf5, 0x7e, 0xc0, 0x87, 0xae, 0x8c, 0xae, 0x97, 0x52, 0x7b, 0xea, 0x92, 0x24, 0xab, 0xf1};
    static const uint8_t returned_229[] = { 0xa6, 0x64, 0xd3, 0x1a, 0x2f, 0xa0, 0x8d, 0xd1, 0x6a, 0x2b, 0x89, 0xf6, 0xbc, 0x60, 0xeb, 0x52, 0xe4, 0x7d, 0x99, 0x78, 0x23, 0x94, 0x04, 0x1e, 0x39, 0x1d, 0x9f, 0x56, 0x86, 0x24, 0x7a, 0xa2, 0x43, 0x00, 0xe4, 0x87, 0xa7, 0x30, 0xd5, 0x20, 0x0d, 0xfd, 0xec, 0xcc, 0x47, 0x4d, 0x22, 0xf5, 0xaa, 0x8e, 0xd5, 0x23, 0xc3, 0xa0, 0xf6, 0x29, 0x7d, 0xc5, 0x33, 0x93, 0x65, 0x92, 0xac, 0x3f};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_228, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_229, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11814 */
  {
    static const uint8_t entropy_230[] = { 0x09, 0xc8, 0xe3, 0x92, 0x2a, 0x75, 0x6b, 0xfa, 0x74, 0x0d, 0x09, 0x23, 0x42, 0x55, 0xe0, 0xfc, 0x4b, 0x1b, 0x46, 0xe3, 0x51, 0x39, 0x69, 0xd2, 0x42, 0x44, 0xb0, 0xd9, 0xb4, 0x92, 0xfb, 0x26};
    static const uint8_t returned_231[] = { 0x31, 0xc5, 0x02, 0xfe, 0x08, 0x77, 0x5f, 0x53, 0xfb, 0xaa, 0x52, 0xde, 0x6e, 0xc5, 0x3e, 0xd9, 0x68, 0x87, 0xee, 0x6c, 0x49, 0x74, 0x3b, 0xc5, 0xa8, 0x8b, 0x01, 0x6f, 0x46, 0x95, 0xa6, 0xf5, 0x35, 0x2c, 0xd6, 0xf1, 0x82, 0xb2, 0x7a, 0x50, 0xb3, 0x75, 0x50, 0x64, 0x4a, 0x51, 0x8e, 0xfc, 0xcc, 0xc8, 0x47, 0xae, 0x08, 0x78, 0x07, 0x66, 0xaa, 0xb2, 0xd0, 0x98, 0x4d, 0xc1, 0x37, 0xe6};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_230, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_231, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11822 */
  {
    static const uint8_t entropy_232[] = { 0x6e, 0xb0, 0x55, 0xa3, 0x30, 0xf2, 0xc1, 0x81, 0x77, 0x48, 0x18, 0x5d, 0x5c, 0xf1, 0x18, 0x62, 0xe2, 0x7a, 0x17, 0x3c, 0x7c, 0xaa, 0x98, 0x31, 0x28, 0xac, 0x7d, 0x35, 0x6d, 0x39, 0xf4, 0x40};
    static const uint8_t returned_233[] = { 0x3a, 0x34, 0xb6, 0x91, 0x1f, 0xe2, 0x7f, 0x5d, 0x5b, 0x4d, 0xa7, 0x56, 0x1f, 0xb5, 0x7d, 0xb8, 0xfc, 0xee, 0x03, 0x93, 0x88, 0xca, 0x9b, 0xba, 0x1f, 0xf1, 0xdb, 0x8f, 0xf5, 0x80, 0x96, 0x26, 0x3e, 0x96, 0xb0, 0xb0, 0x67, 0xe2, 0xc6, 0xea, 0xf4, 0x88, 0xf2, 0x99, 0xd3, 0x70, 0x51, 0xc5, 0x95, 0x05, 0x87, 0x26, 0x01, 0xe2, 0x8b, 0x9d, 0x2a, 0xf7, 0xdb, 0xd8, 0x9f, 0x23, 0x54, 0x07};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_232, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_233, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11830 */
  {
    static const uint8_t entropy_234[] = { 0x70, 0xb3, 0x40, 0x65, 0x29, 0x9c, 0xab, 0xb6, 0x72, 0x89, 0x09, 0xfa, 0xfe, 0x37, 0xd6, 0xb2, 0x68, 0xfe, 0x9f, 0xdc, 0xff, 0x83, 0x3e, 0x63, 0x8f, 0x13, 0x4c, 0x02, 0xd2, 0x32, 0xb4, 0xee};
    static const uint8_t returned_235[] = { 0xcb, 0x78, 0xab, 0x06, 0x75, 0x91, 0x15, 0x5f, 0xcd, 0x3a, 0x89, 0x20, 0x53, 0xd9, 0xb2, 0x71, 0xac, 0x05, 0xa8, 0xc7, 0xc3, 0x23, 0x38, 0xbf, 0x63, 0x90, 0x18, 0x4a, 0x46, 0xf0, 0x7f, 0x8a, 0x47, 0x57, 0xb0, 0xe0, 0x3e, 0x94, 0x75, 0x8b, 0x14, 0x3d, 0x5a, 0x23, 0x30, 0xc6, 0xb8, 0xf8, 0x8a, 0xa6, 0x21, 0xeb, 0x10, 0x20, 0x50, 0x96, 0x29, 0x40, 0x78, 0x8a, 0xec, 0x9b, 0xe6, 0x54};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_234, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_235, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11838 */
  {
    static const uint8_t entropy_236[] = { 0x61, 0xba, 0x1e, 0xd5, 0x28, 0xe5, 0xa6, 0x07, 0x09, 0x81, 0xcd, 0x5c, 0x11, 0xb4, 0xbe, 0x2c, 0x2c, 0x57, 0x35, 0x9d, 0xf0, 0x61, 0xc3, 0x05, 0x3c, 0x5a, 0x1c, 0x6a, 0x20, 0x06, 0xee, 0x26};
    static const uint8_t returned_237[] = { 0x86, 0xad, 0xa4, 0xfa, 0xb2, 0xbc, 0xf5, 0xd0, 0x64, 0x18, 0x97, 0xe6, 0xb7, 0x28, 0xb1, 0x3c, 0xe6, 0x85, 0xde, 0x59, 0xf8, 0x59, 0xae, 0xe2, 0xbc, 0x15, 0xca, 0x0b, 0xab, 0x67, 0x03, 0xf8, 0xd1, 0x99, 0x1a, 0x4a, 0x60, 0x33, 0xe4, 0x0c, 0x58, 0xfb, 0xc1, 0x9b, 0xe5, 0x3a, 0x13, 0x39, 0x8e, 0x53, 0x7b, 0xf9, 0x03, 0xfe, 0x19, 0xea, 0x0a, 0xac, 0x55, 0xb2, 0x72, 0xa8, 0xa3, 0x46};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_236, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_237, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11846 */
  {
    static const uint8_t entropy_238[] = { 0x5b, 0xe7, 0x68, 0x7f, 0xb7, 0xd0, 0xee, 0x62, 0xbf, 0x62, 0xf0, 0x6f, 0xac, 0x2e, 0xee, 0x25, 0x21, 0xbe, 0x7e, 0x73, 0x0c, 0x1e, 0xcc, 0x63, 0x37, 0x1f, 0x5d, 0x87, 0x87, 0xbb, 0xce, 0x75};
    static const uint8_t returned_239[] = { 0x28, 0x5c, 0xa1, 0xfe, 0x69, 0xb8, 0xbb, 0x0a, 0x7b, 0x78, 0x78, 0x23, 0xf4, 0x6c, 0xcc, 0x9f, 0x8e, 0xc6, 0xac, 0xcf, 0x8b, 0xe1, 0x7e, 0xaf, 0x95, 0xe6, 0x3c, 0x4a, 0x1d, 0x27, 0xd4, 0x69, 0x9f, 0x9a, 0xe9, 0xb5, 0x94, 0x33, 0x87, 0xb5, 0x76, 0x27, 0x6e, 0x45, 0x9f, 0x2d, 0x57, 0x92, 0xcc, 0x51, 0xa1, 0xba, 0xe1, 0x32, 0x48, 0xc3, 0x55, 0x60, 0xbf, 0x21, 0x1c, 0xc1, 0xd7, 0x81};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_238, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_239, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11854 */
  {
    static const uint8_t entropy_240[] = { 0x07, 0x9a, 0x18, 0x3f, 0x31, 0x2e, 0x9b, 0xd4, 0xd2, 0x3c, 0xb9, 0x97, 0x54, 0x80, 0x28, 0xb0, 0x31, 0x01, 0x0e, 0x80, 0xbd, 0x59, 0xd5, 0x67, 0x34, 0x14, 0xe4, 0xeb, 0xc1, 0x0d, 0xd9, 0x9d};
    static const uint8_t returned_241[] = { 0xe8, 0x29, 0x02, 0xb5, 0x88, 0x1d, 0x6a, 0x8d, 0x4d, 0x42, 0xc1, 0x52, 0xae, 0x60, 0xea, 0x1c, 0x81, 0xa6, 0xfd, 0x17, 0x16, 0x76, 0xd1, 0x6b, 0x7e, 0x94, 0xe4, 0xa8, 0x5f, 0xaf, 0x46, 0x28, 0x79, 0xc6, 0x67, 0x25, 0x40, 0x42, 0x59, 0xaf, 0x44, 0x13, 0xc4, 0x28, 0xb8, 0x58, 0x51, 0x8e, 0x46, 0x74, 0x78, 0x8f, 0xc5, 0x35, 0x6b, 0xb9, 0xb6, 0x00, 0xf9, 0x6b, 0x88, 0xed, 0x47, 0x06};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_240, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_241, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11862 */
  {
    static const uint8_t entropy_242[] = { 0x0a, 0x55, 0xa5, 0x79, 0xdc, 0xcc, 0x4b, 0xf1, 0x1b, 0x59, 0xfa, 0x85, 0xdb, 0x6e, 0x33, 0xed, 0xa0, 0x69, 0x25, 0x72, 0x06, 0xfd, 0x62, 0x34, 0x54, 0x45, 0xcc, 0xba, 0x20, 0x32, 0x70, 0x43};
    static const uint8_t returned_243[] = { 0xf9, 0x62, 0x01, 0xa7, 0xe0, 0xdd, 0x00, 0xd5, 0x9b, 0x9b, 0x64, 0xeb, 0xed, 0x6a, 0xc9, 0xa7, 0xd5, 0x10, 0x8d, 0xa0, 0xaf, 0xef, 0xb6, 0xfa, 0x86, 0x90, 0x59, 0x14, 0xa3, 0x37, 0x87, 0x85, 0x24, 0x07, 0x08, 0xfc, 0xf6, 0x7d, 0xe0, 0x48, 0x1b, 0x35, 0x18, 0xcc, 0x4a, 0x8b, 0xf0, 0x5f, 0xfa, 0x4f, 0x82, 0xea, 0x87, 0x43, 0xdb, 0x32, 0x1f, 0x7d, 0xaf, 0x86, 0x67, 0x94, 0xcf, 0x93};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_242, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_243, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11870 */
  {
    static const uint8_t entropy_244[] = { 0xc7, 0x9f, 0xdb, 0xd9, 0xdb, 0xe4, 0x94, 0xbe, 0x55, 0x97, 0xac, 0xf6, 0x6c, 0xc5, 0x8d, 0x54, 0x87, 0xf0, 0x32, 0xfb, 0xda, 0x9a, 0x73, 0x70, 0x28, 0x3c, 0x41, 0x50, 0x28, 0xb3, 0x35, 0x41};
    static const uint8_t returned_245[] = { 0x76, 0x68, 0xfb, 0x8d, 0x9b, 0xc2, 0x79, 0xae, 0xfa, 0xfc, 0x0c, 0x39, 0xc0, 0xad, 0x66, 0x53, 0xb9, 0xbc, 0x3d, 0xd1, 0x73, 0x7c, 0xe1, 0x9b, 0x18, 0x07, 0x44, 0x54, 0x46, 0x05, 0xab, 0x8c, 0x70, 0xf4, 0x61, 0xac, 0xbb, 0x33, 0x7d, 0x68, 0x6a, 0xeb, 0x27, 0x83, 0xb5, 0x03, 0x63, 0xff, 0xfe, 0xa0, 0x76, 0x4d, 0xe4, 0x6d, 0x1a, 0x6d, 0x51, 0x1c, 0x5e, 0xc0, 0x24, 0xe5, 0xa7, 0x3b};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_244, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_245, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11878 */
  {
    static const uint8_t entropy_246[] = { 0xad, 0xad, 0x3e, 0x00, 0x63, 0xdf, 0x27, 0x1a, 0xbb, 0x77, 0xb2, 0xa0, 0xd5, 0x28, 0x63, 0x8d, 0xeb, 0x4d, 0xeb, 0x5e, 0xe1, 0x4d, 0x00, 0x25, 0x3c, 0x1b, 0xbe, 0x7e, 0x3f, 0xf9, 0xb6, 0xd4};
    static const uint8_t returned_247[] = { 0x4a, 0x19, 0xa0, 0xb8, 0x97, 0x52, 0x43, 0xa3, 0xad, 0x46, 0xf2, 0x9a, 0x2a, 0x02, 0x4d, 0x47, 0x7b, 0xca, 0xfd, 0xfb, 0x50, 0xf1, 0x7a, 0xac, 0xa5, 0x66, 0x00, 0x39, 0xfc, 0xed, 0x2f, 0x07, 0x64, 0x72, 0x06, 0x20, 0xdc, 0xfb, 0x7c, 0xcd, 0x25, 0x01, 0xfa, 0x13, 0x83, 0x9f, 0x79, 0x87, 0xbd, 0x33, 0x9d, 0xba, 0xa2, 0xeb, 0xe5, 0x1e, 0x90, 0x57, 0x83, 0x7f, 0xf5, 0x10, 0x38, 0x0f};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_246, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_247, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11886 */
  {
    static const uint8_t entropy_248[] = { 0xf8, 0xf6, 0x2d, 0x35, 0xef, 0xab, 0x49, 0x93, 0xf8, 0x99, 0xeb, 0xa7, 0x5e, 0x02, 0x19, 0xc8, 0x65, 0x13, 0x49, 0xc9, 0xe8, 0xf8, 0xe7, 0x46, 0x77, 0x9c, 0xb5, 0xb1, 0x20, 0x3a, 0x3b, 0x0d};
    static const uint8_t returned_249[] = { 0x59, 0x40, 0x00, 0x43, 0x44, 0xe5, 0x7a, 0x3a, 0x9f, 0xcc, 0x53, 0x31, 0x34, 0x38, 0x07, 0xdf, 0xea, 0x44, 0x26, 0xa8, 0x61, 0xe9, 0xbf, 0x0e, 0xcb, 0x07, 0xf4, 0xb4, 0x75, 0x72, 0x58, 0xff, 0xee, 0xf5, 0x03, 0x37, 0x9d, 0xe2, 0x78, 0xb2, 0x73, 0x6e, 0xf0, 0x6a, 0xf1, 0xf7, 0x82, 0x66, 0xbf, 0xec, 0xf1, 0x14, 0xd4, 0x52, 0xde, 0x8a, 0xfe, 0x1a, 0x31, 0xd3, 0x5d, 0x96, 0x1f, 0x4a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_248, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_249, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11894 */
  {
    static const uint8_t entropy_250[] = { 0x7c, 0x32, 0x1c, 0xc7, 0xa0, 0x27, 0x10, 0xf4, 0x2f, 0x5c, 0x64, 0xf7, 0xd5, 0x0e, 0x1c, 0xca, 0x13, 0x9f, 0x91, 0x81, 0x50, 0x21, 0x47, 0x6c, 0xb3, 0xb6, 0x53, 0x36, 0xec, 0x0a, 0x8c, 0x64};
    static const uint8_t returned_251[] = { 0xc8, 0x60, 0xe9, 0xe0, 0x9b, 0x4e, 0x36, 0x38, 0x1a, 0x4d, 0x8b, 0x0b, 0x24, 0x73, 0x38, 0x92, 0x4a, 0xa7, 0x82, 0xeb, 0x79, 0x60, 0x3a, 0x26, 0x89, 0x02, 0x50, 0xf5, 0x66, 0xab, 0x11, 0xde, 0x34, 0xda, 0xca, 0x00, 0x56, 0x40, 0x3c, 0x49, 0xc0, 0x74, 0x72, 0x14, 0x81, 0xc2, 0xc0, 0xb0, 0x6c, 0xb4, 0x66, 0x9f, 0xf9, 0xa3, 0xdf, 0xbf, 0xcb, 0x73, 0xc6, 0x22, 0x80, 0xe5, 0x32, 0xbe};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_250, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_251, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11902 */
  {
    static const uint8_t entropy_252[] = { 0xff, 0xfc, 0xe2, 0x29, 0xdc, 0xc8, 0xf7, 0x7e, 0x3b, 0x71, 0x49, 0x80, 0x4e, 0x94, 0xb2, 0x9c, 0x8c, 0x3d, 0x85, 0x1c, 0x12, 0x9d, 0x1a, 0x41, 0x7e, 0x18, 0x1a, 0xde, 0xdf, 0x8d, 0xd1, 0x2b};
    static const uint8_t returned_253[] = { 0x9a, 0xb8, 0xf2, 0x73, 0x0c, 0xd5, 0x03, 0x9a, 0x1c, 0x78, 0xf8, 0x37, 0xcc, 0xaf, 0x77, 0x47, 0xb2, 0x7c, 0xa4, 0x25, 0xb0, 0x77, 0x28, 0x93, 0x3e, 0x61, 0xbc, 0x39, 0xb5, 0xc0, 0x9f, 0xd6, 0x3a, 0x0f, 0x5e, 0x75, 0x86, 0xfb, 0xb0, 0x0f, 0xe4, 0xfb, 0xea, 0x80, 0x93, 0x92, 0xa7, 0xf9, 0x52, 0x06, 0x34, 0x5c, 0x64, 0x0c, 0xeb, 0xb9, 0x89, 0x97, 0xd5, 0x3c, 0xd1, 0xbe, 0xa4, 0xbc};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_252, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_253, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:11910 */
  {
    static const uint8_t entropy_254[] = { 0x39, 0x74, 0x27, 0xac, 0xb3, 0x68, 0x3a, 0xf1, 0x36, 0x36, 0xa7, 0x0f, 0xa2, 0xd9, 0xff, 0x5b, 0x6d, 0x03, 0x2f, 0x9f, 0xc6, 0x19, 0x7d, 0x62, 0xce, 0x10, 0x27, 0x51, 0x7c, 0xb6, 0x62, 0x68};
    static const uint8_t returned_255[] = { 0x2c, 0x6b, 0x5c, 0x56, 0x82, 0x18, 0x77, 0x40, 0xfb, 0x56, 0x6c, 0xa6, 0x06, 0x44, 0x05, 0x2b, 0x2e, 0x0b, 0xc3, 0x28, 0x5a, 0x39, 0x9e, 0x81, 0x27, 0xae, 0x53, 0xfa, 0xfa, 0x3d, 0x52, 0x86, 0x68, 0x04, 0x16, 0x77, 0x2e, 0x55, 0x2a, 0x2c, 0xbc, 0xe4, 0xa5, 0x23, 0xf2, 0x6e, 0x7e, 0x7e, 0x45, 0x82, 0x7a, 0x29, 0x1b, 0x61, 0xa8, 0xb6, 0xfc, 0x78, 0x36, 0xe3, 0xa1, 0x4e, 0x69, 0x4a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    rng.instantiate(entropy_254, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_255, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12054 */
  {
    static const uint8_t entropy_256[] = { 0xc4, 0x55, 0xc4, 0x67, 0x01, 0x37, 0xc6, 0x5c, 0x0c, 0x58, 0x21, 0x01, 0x5e, 0x78, 0x5f, 0x84, 0x88, 0x71, 0xf9, 0x8f, 0x57, 0xe5, 0x56, 0x31, 0x42, 0xf0, 0x15, 0x22, 0x3c, 0xd3, 0x95, 0x23};
    static const uint8_t returned_257[] = { 0x18, 0x21, 0x7c, 0x3a, 0xff, 0x49, 0x74, 0x0e, 0x09, 0x30, 0xbf, 0x33, 0xb4, 0xae, 0xfd, 0x42, 0x20, 0xc5, 0xb7, 0x7c, 0xf3, 0xb2, 0x45, 0xfd, 0xff, 0x3f, 0x57, 0x0a, 0x46, 0x0a, 0x59, 0xb9, 0x9f, 0x52, 0xe9, 0x65, 0x66, 0xc0, 0xd6, 0xfd, 0xdd, 0x37, 0xe4, 0xce, 0xe0, 0x60, 0x31, 0x9a, 0x14, 0xc2, 0xf3, 0x39, 0x4e, 0xf0, 0xd4, 0x29, 0xbe, 0x54, 0x15, 0x92, 0x5f, 0x18, 0x85, 0x1c};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_258[] = { 0x3e, 0xd6, 0x37, 0x5b, 0x5b, 0x58, 0x23, 0x81, 0xc0, 0x5e, 0xb9, 0xa9, 0xf4, 0x0f, 0xef, 0x0d, 0x9d, 0xc5, 0xdb, 0xe3, 0xb4, 0xaf, 0x3c, 0x9d, 0x15, 0x49, 0xe6, 0x2e, 0x75, 0x61, 0x7e, 0xdc};
    rng.instantiate(entropy_256, personalization_258, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_257, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12062 */
  {
    static const uint8_t entropy_259[] = { 0x38, 0xe0, 0xe5, 0xf8, 0x82, 0xb5, 0x4e, 0xb0, 0xf8, 0x20, 0x85, 0xed, 0x01, 0x77, 0xde, 0x9f, 0xac, 0x81, 0x50, 0x1f, 0x95, 0xbb, 0x9b, 0x59, 0x56, 0x38, 0x20, 0xdb, 0xa6, 0x5d, 0xb3, 0x20};
    static const uint8_t returned_260[] = { 0xaa, 0x88, 0xe2, 0xdb, 0x42, 0x5f, 0x79, 0x9a, 0xf1, 0x5d, 0xb9, 0xef, 0x26, 0x16, 0x4f, 0x62, 0xe9, 0x06, 0xe9, 0x42, 0xe5, 0xed, 0x52, 0x10, 0xc7, 0xd2, 0x25, 0x45, 0x32, 0x6c, 0x29, 0x7b, 0xea, 0x0e, 0x6a, 0x09, 0x72, 0x03, 0x8e, 0x4c, 0x33, 0xfb, 0x15, 0x47, 0x9f, 0x68, 0xb0, 0x1e, 0xfb, 0x0b, 0xae, 0x77, 0x82, 0x9c, 0xd1, 0xb2, 0x9f, 0xe9, 0xc8, 0x6a, 0x64, 0xe3, 0x3f, 0x67};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_261[] = { 0x1b, 0xce, 0x11, 0x40, 0xba, 0xd4, 0x5a, 0x5e, 0xdd, 0x24, 0xf0, 0x1a, 0x5d, 0xe1, 0xe2, 0xf8, 0x58, 0x08, 0xe1, 0x61, 0x8a, 0x34, 0x78, 0xc1, 0x3c, 0x79, 0xe6, 0x85, 0xeb, 0x7b, 0x89, 0x94};
    rng.instantiate(entropy_259, personalization_261, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_260, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12070 */
  {
    static const uint8_t entropy_262[] = { 0x9b, 0x5e, 0x7e, 0x5f, 0x42, 0x4b, 0xdd, 0x71, 0x98, 0x79, 0xf8, 0x28, 0x57, 0x78, 0x97, 0xda, 0x33, 0x0d, 0x5a, 0xcf, 0xb0, 0xe0, 0x00, 0xe7, 0xc5, 0xa4, 0xc5, 0x7d, 0xd6, 0x39, 0xea, 0x8c};
    static const uint8_t returned_263[] = { 0x1e, 0xf7, 0x94, 0xcb, 0xe0, 0x45, 0x5c, 0xf7, 0x67, 0xb5, 0xa8, 0x93, 0x60, 0xe8, 0xce, 0xed, 0x86, 0x1d, 0x43, 0x7c, 0x64, 0xaa, 0xde, 0x0f, 0xf4, 0xbb, 0x51, 0xc2, 0x28, 0xa3, 0x66, 0xfe, 0xaa, 0x29, 0x19, 0x95, 0x8a, 0x72, 0xbf, 0x2c, 0xf2, 0xbb, 0x0a, 0x3a, 0x72, 0xb3, 0x23, 0x90, 0x61, 0x3e, 0xeb, 0xb3, 0x0f, 0x54, 0x4e, 0xf1, 0x2a, 0xba, 0xde, 0x70, 0xa2, 0x90, 0xe9, 0x84};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_264[] = { 0xec, 0xe4, 0xf7, 0x1c, 0x95, 0x87, 0x6c, 0xa7, 0xef, 0x40, 0x5a, 0xf4, 0x2a, 0x3a, 0x56, 0xe3, 0x3d, 0x58, 0x5f, 0x8a, 0x73, 0x21, 0x57, 0xae, 0x50, 0xc5, 0xf4, 0x6a, 0x30, 0xee, 0x89, 0xb3};
    rng.instantiate(entropy_262, personalization_264, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_263, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12078 */
  {
    static const uint8_t entropy_265[] = { 0xa1, 0xea, 0xe6, 0x72, 0x63, 0xa8, 0xed, 0x5e, 0x5b, 0x44, 0x6e, 0xbb, 0x46, 0x3d, 0xf9, 0xc9, 0x72, 0x32, 0x29, 0x7d, 0x41, 0xdf, 0x8a, 0xae, 0x4b, 0x2b, 0x26, 0x95, 0xaa, 0x5d, 0x75, 0xe0};
    static const uint8_t returned_266[] = { 0xa4, 0xe4, 0x8a, 0x82, 0x29, 0xe9, 0x3d, 0x4c, 0xea, 0x55, 0x83, 0x53, 0xe1, 0x28, 0x7a, 0x05, 0xcb, 0x4b, 0xe8, 0xe3, 0x45, 0xf6, 0x42, 0x49, 0x69, 0x4d, 0x85, 0xcc, 0xeb, 0x06, 0x0f, 0x4f, 0x60, 0xe3, 0x5c, 0x72, 0x13, 0xc8, 0xbd, 0x6e, 0x54, 0x0a, 0xf1, 0xef, 0x48, 0xe0, 0x6f, 0x78, 0x35, 0xce, 0x82, 0x92, 0x35, 0x9f, 0x24, 0xea, 0xcd, 0xa1, 0xf8, 0x25, 0xbc, 0x5b, 0xc9, 0x86};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_267[] = { 0x56, 0x95, 0xc8, 0x98, 0x8e, 0xce, 0x97, 0x4e, 0xc4, 0x1c, 0x57, 0xea, 0x45, 0x59, 0xa1, 0x0b, 0x4e, 0x81, 0x42, 0x9d, 0x59, 0xf5, 0x0a, 0xa1, 0x72, 0xcc, 0x5e, 0x42, 0x8b, 0x5a, 0x7d, 0x3b};
    rng.instantiate(entropy_265, personalization_267, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_266, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12086 */
  {
    static const uint8_t entropy_268[] = { 0x42, 0x2d, 0xb7, 0xfa, 0x67, 0x03, 0x4d, 0x9b, 0x77, 0xa6, 0x64, 0x31, 0x9f, 0x3a, 0x9d, 0xbe, 0x1e, 0x9c, 0x96, 0x64, 0xca, 0x7c, 0x9b, 0x3a, 0xcd, 0x8d, 0x47, 0xa8, 0x34, 0xfc, 0xcc, 0x2f};
    static const uint8_t returned_269[] = { 0x99, 0x8f, 0x5b, 0x9e, 0x2d, 0xac, 0xe2, 0x4a, 0x46, 0x5f, 0xdf, 0xd0, 0x26, 0x28, 0xfa, 0xda, 0xdd, 0xfb, 0x42, 0x8d, 0x7a, 0xc5, 0x0c, 0xd0, 0x35, 0x03, 0xaa, 0xe7, 0x77, 0x9f, 0xca, 0x70, 0x18, 0x23, 0xf2, 0xe0, 0x5d, 0x1b, 0xe3, 0xe6, 0xe0, 0xd6, 0x61, 0xcd, 0x57, 0xcb, 0xf5, 0xda, 0x8e, 0x08, 0xa6, 0x41, 0xb0, 0x01, 0x8e, 0x56, 0xd7, 0x57, 0x97, 0x4d, 0x40, 0xfe, 0x25, 0xe4};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_270[] = { 0x95, 0xce, 0x4f, 0x75, 0x4e, 0xa4, 0x40, 0x59, 0x54, 0xfc, 0x05, 0x5f, 0xbb, 0x8b, 0x7e, 0x9a, 0x6b, 0x25, 0x17, 0xef, 0x97, 0xbc, 0xcc, 0xfc, 0xb3, 0x9a, 0xee, 0x8e, 0x9f, 0x7a, 0x34, 0x2f};
    rng.instantiate(entropy_268, personalization_270, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_269, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12094 */
  {
    static const uint8_t entropy_271[] = { 0xe5, 0xb2, 0xf8, 0x2d, 0xaf, 0x26, 0x3b, 0x34, 0xb8, 0xc2, 0x1b, 0xdf, 0xf1, 0x10, 0x37, 0x2a, 0xdd, 0x43, 0xc7, 0xd8, 0xd0, 0xe8, 0x2c, 0x22, 0xc8, 0xfb, 0xb4, 0x44, 0xda, 0x61, 0xd9, 0xc4};
    static const uint8_t returned_272[] = { 0xb3, 0xb8, 0xab, 0x1d, 0x48, 0x0e, 0x61, 0x23, 0xbf, 0xaa, 0x85, 0xf5, 0x26, 0xdd, 0x8a, 0x8d, 0xb1, 0x0b, 0xf0, 0xc4, 0xa8, 0x2e, 0x3b, 0x09, 0xed, 0x73, 0x30, 0x25, 0xb1, 0x9c, 0x08, 0xe4, 0x9f, 0xa3, 0x2a, 0x9a, 0x6e, 0x8d, 0x52, 0x07, 0xc5, 0xab, 0xcc, 0x9d, 0xcf, 0x5e, 0x36, 0x66, 0x28, 0x19, 0xdd, 0x6a, 0x50, 0x30, 0x88, 0xf0, 0xd1, 0x8e, 0x48, 0xba, 0x8d, 0x71, 0xf5, 0x3f};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_273[] = { 0x19, 0x11, 0x35, 0x23, 0x55, 0x6c, 0x74, 0xa7, 0xbb, 0x31, 0x32, 0x80, 0x98, 0xea, 0xa2, 0x5a, 0xc8, 0xb4, 0x2c, 0x47, 0x80, 0x52, 0x47, 0xa0, 0x16, 0xae, 0x2c, 0xdd, 0x91, 0x39, 0xf5, 0xbf};
    rng.instantiate(entropy_271, personalization_273, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_272, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12102 */
  {
    static const uint8_t entropy_274[] = { 0xc0, 0x82, 0x65, 0x7d, 0xa3, 0xa6, 0x6b, 0x0a, 0xb1, 0x7c, 0x64, 0x79, 0x27, 0x6a, 0xec, 0xbb, 0x67, 0x98, 0xf0, 0xcc, 0x79, 0x1a, 0xf2, 0xe9, 0x71, 0x3d, 0x2b, 0x7a, 0x90, 0x45, 0x4f, 0xa6};
    static const uint8_t returned_275[] = { 0xbb, 0xa3, 0x37, 0xdc, 0xc4, 0xef, 0xa6, 0xc1, 0xe0, 0xb2, 0x4b, 0xad, 0x11, 0xf9, 0x23, 0x08, 0x05, 0x44, 0xbd, 0x6d, 0x58, 0xf7, 0x9e, 0xa0, 0x59, 0x23, 0x27, 0xbe, 0x33, 0xb0, 0x53, 0x04, 0xb1, 0x97, 0xa6, 0x77, 0x0f, 0x9d, 0x2c, 0x17, 0x47, 0xc3, 0x2c, 0x79, 0x2f, 0x80, 0xd7, 0xb0, 0x48, 0x8b, 0x6c, 0xf8, 0x49, 0x60, 0x48, 0xd4, 0xe4, 0xd5, 0xc6, 0x05, 0x1b, 0xbd, 0x06, 0xf9};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_276[] = { 0x33, 0x6b, 0xcb, 0x3a, 0x62, 0x37, 0x33, 0xf6, 0x2e, 0xae, 0xa9, 0x70, 0x22, 0x9c, 0xb4, 0x26, 0xf6, 0x17, 0xa2, 0xca, 0x77, 0xa6, 0x85, 0x86, 0x58, 0x91, 0x18, 0x84, 0x2c, 0x9f, 0x31, 0x5f};
    rng.instantiate(entropy_274, personalization_276, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_275, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12110 */
  {
    static const uint8_t entropy_277[] = { 0x20, 0x7c, 0x2e, 0x64, 0xe9, 0x08, 0xf3, 0x0f, 0x83, 0xd3, 0x5d, 0x2a, 0x1e, 0x78, 0x30, 0x41, 0xfb, 0xab, 0x4a, 0x8e, 0x1a, 0x19, 0xda, 0xb7, 0x00, 0xf3, 0x02, 0x03, 0x11, 0x58, 0xa2, 0x6b};
    static const uint8_t returned_278[] = { 0xb0, 0x76, 0x1b, 0x36, 0xa7, 0xd5, 0xd5, 0xb4, 0x7a, 0x72, 0xe5, 0xda, 0xff, 0xf3, 0x1d, 0xa8, 0xac, 0x15, 0xee, 0xd0, 0x77, 0x99, 0x57, 0x43, 0x92, 0x2d, 0xf4, 0xdc, 0x11, 0x02, 0xc7, 0xe9, 0xb6, 0x4d, 0xb6, 0x58, 0x57, 0x35, 0xf0, 0x11, 0xa7, 0x6a, 0x37, 0x8d, 0x8a, 0x7f, 0xff, 0x8e, 0xda, 0x0f, 0x0a, 0x13, 0x60, 0x54, 0x25, 0xe3, 0x44, 0xbb, 0x50, 0x27, 0xa2, 0x3c, 0x23, 0x84};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_279[] = { 0x7b, 0xc5, 0xcf, 0x5c, 0x52, 0x5a, 0x3d, 0x06, 0x19, 0x15, 0x13, 0x53, 0x41, 0x95, 0xb9, 0x7c, 0x89, 0x68, 0x64, 0x84, 0xbf, 0x04, 0x92, 0xe0, 0x8a, 0x18, 0xe4, 0xe1, 0xb9, 0x99, 0x15, 0x56};
    rng.instantiate(entropy_277, personalization_279, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_278, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12118 */
  {
    static const uint8_t entropy_280[] = { 0xf2, 0xd9, 0x17, 0x76, 0x69, 0x5a, 0x50, 0x02, 0xaa, 0x86, 0x63, 0x54, 0x0f, 0x32, 0x9a, 0xd7, 0x24, 0x0a, 0x4a, 0x1b, 0x1e, 0x7d, 0xfc, 0x89, 0x19, 0xca, 0x0e, 0x83, 0x14, 0x5d, 0xa0, 0x9b};
    static const uint8_t returned_281[] = { 0x10, 0x26, 0x23, 0xf2, 0x58, 0xd2, 0x7f, 0xe2, 0x74, 0xd0, 0xbe, 0xe7, 0x6f, 0x6c, 0xc2, 0x0a, 0x79, 0x04, 0xf7, 0xc8, 0xa1, 0x99, 0x1d, 0xff, 0x15, 0xb5, 0x5b, 0xaa, 0x92, 0xf1, 0x89, 0x47, 0xbc, 0xd4, 0x00, 0x41, 0x4b, 0x28, 0x03, 0x77, 0xb3, 0x7a, 0x1d, 0x13, 0x14, 0x07, 0x34, 0x3a, 0x87, 0xf1, 0x0a, 0x42, 0xbd, 0x60, 0x01, 0x0a, 0xd7, 0xb8, 0x58, 0x0a, 0x49, 0x80, 0xdf, 0x14};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_282[] = { 0x80, 0xc0, 0x30, 0x6c, 0x1f, 0xc4, 0xa5, 0x6b, 0x7c, 0xf8, 0x5c, 0x06, 0x65, 0xd0, 0x7d, 0xcf, 0x77, 0x61, 0x05, 0x53, 0xd3, 0xbe, 0xb4, 0xcf, 0xf4, 0x55, 0x93, 0x24, 0x0a, 0x98, 0x63, 0x16};
    rng.instantiate(entropy_280, personalization_282, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_281, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12126 */
  {
    static const uint8_t entropy_283[] = { 0x73, 0x45, 0x6d, 0xf4, 0xea, 0x33, 0xf0, 0x93, 0x15, 0xf5, 0x52, 0x7f, 0xdd, 0xb2, 0x7f, 0x19, 0x5f, 0xa6, 0x22, 0x98, 0xd2, 0x98, 0xf6, 0xca, 0x5f, 0x40, 0x23, 0x75, 0x8f, 0x35, 0xeb, 0xbf};
    static const uint8_t returned_284[] = { 0xfc, 0x88, 0x67, 0x1d, 0x75, 0x83, 0x34, 0xf2, 0x8d, 0x97, 0xc4, 0x34, 0x60, 0x79, 0xba, 0xf8, 0x0a, 0x3a, 0xc5, 0x19, 0x19, 0xd5, 0xb2, 0x47, 0x67, 0x00, 0x73, 0x19, 0x9c, 0x89, 0xaf, 0xc8, 0xfb, 0xda, 0x22, 0x19, 0x37, 0xc0, 0x6a, 0x78, 0xd3, 0x66, 0x3e, 0x67, 0x94, 0xe6, 0x64, 0x3c, 0x4f, 0x4a, 0x78, 0x28, 0x79, 0xca, 0xda, 0x5c, 0x76, 0x5b, 0xf6, 0xb7, 0xbd, 0xf0, 0x0a, 0x8b};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_285[] = { 0x5b, 0xdc, 0x81, 0x79, 0x75, 0xa6, 0x24, 0x15, 0xad, 0x32, 0x27, 0xc3, 0xef, 0x89, 0x06, 0x09, 0x98, 0xfc, 0x91, 0x30, 0xb3, 0x00, 0x8c, 0x7b, 0xb9, 0x83, 0x07, 0xc9, 0x64, 0xc5, 0x63, 0x19};
    rng.instantiate(entropy_283, personalization_285, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_284, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12134 */
  {
    static const uint8_t entropy_286[] = { 0xfe, 0x48, 0x32, 0xc4, 0x93, 0xc5, 0x36, 0x55, 0x85, 0x9c, 0x05, 0xd0, 0x50, 0x1e, 0xb0, 0x01, 0x56, 0x10, 0xc4, 0x25, 0x76, 0x9c, 0x9b, 0x66, 0xff, 0xfb, 0x13, 0x63, 0xab, 0x8c, 0xf8, 0x59};
    static const uint8_t returned_287[] = { 0xa8, 0x5b, 0x86, 0x8b, 0x92, 0x0b, 0x7a, 0x24, 0xcd, 0xe0, 0xb8, 0xc8, 0xbd, 0x65, 0x64, 0x38, 0xe6, 0x11, 0x3e, 0x7e, 0xb3, 0x1a, 0xf1, 0x6f, 0x63, 0x61, 0x35, 0xf9, 0x1b, 0x52, 0x87, 0xd4, 0xbe, 0x39, 0xe4, 0xac, 0xca, 0x8c, 0xac, 0xf2, 0x1b, 0x3d, 0x7f, 0xf5, 0x17, 0xeb, 0xf6, 0xf9, 0xff, 0xd3, 0x97, 0x99, 0xff, 0x48, 0x9b, 0x5d, 0xac, 0x62, 0x8e, 0x24, 0xc2, 0x23, 0x63, 0x5a};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_288[] = { 0x65, 0x40, 0xeb, 0xcc, 0xad, 0xf8, 0x32, 0x8b, 0x7b, 0x4a, 0x34, 0xc3, 0x2b, 0x7f, 0x01, 0xf9, 0x81, 0x88, 0x90, 0x37, 0xd0, 0x45, 0x15, 0x9a, 0x37, 0x9b, 0xe9, 0xcc, 0xd6, 0x80, 0x0e, 0x33};
    rng.instantiate(entropy_286, personalization_288, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_287, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12142 */
  {
    static const uint8_t entropy_289[] = { 0x47, 0x2f, 0x8a, 0xd0, 0x42, 0x8a, 0xa5, 0xa5, 0xb6, 0x33, 0x62, 0x28, 0xf8, 0x83, 0x9b, 0xe6, 0x61, 0x92, 0x1e, 0xb7, 0xf5, 0xc7, 0xec, 0x24, 0x06, 0xec, 0x4f, 0x74, 0x7b, 0xa4, 0x8e, 0x68};
    static const uint8_t returned_290[] = { 0xd9, 0xaf, 0x4c, 0x41, 0x24, 0xb8, 0x8c, 0x0e, 0x76, 0x92, 0x1f, 0x79, 0x7e, 0x0c, 0xd3, 0x12, 0xf2, 0x38, 0xde, 0x7c, 0xaa, 0xf8, 0x09, 0xa1, 0x0b, 0xc0, 0xdf, 0x90, 0x90, 0xb2, 0x13, 0x25, 0xf7, 0x52, 0x30, 0x9d, 0x9a, 0xa6, 0xbb, 0x2c, 0x6f, 0xc5, 0x0d, 0x40, 0xf4, 0x9c, 0xe0, 0xa1, 0x59, 0x5c, 0x0d, 0xea, 0x0f, 0xd2, 0xca, 0x9c, 0x1f, 0x3f, 0x91, 0x0e, 0x03, 0x8a, 0x55, 0x82};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_291[] = { 0x46, 0xb3, 0xb7, 0xb9, 0xcf, 0xed, 0xd0, 0x9f, 0x4a, 0x51, 0xea, 0xbd, 0x0b, 0x54, 0x00, 0xcf, 0xe5, 0xeb, 0xf1, 0x5a, 0x5f, 0xf3, 0x86, 0x50, 0x6c, 0x13, 0xd6, 0x55, 0xf5, 0x91, 0x0e, 0x91};
    rng.instantiate(entropy_289, personalization_291, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_290, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12150 */
  {
    static const uint8_t entropy_292[] = { 0xe2, 0x2c, 0x61, 0xbe, 0xe8, 0x33, 0x39, 0xfa, 0x8f, 0x72, 0xb0, 0x19, 0x1c, 0xa5, 0xcd, 0x13, 0x56, 0xd9, 0x12, 0x75, 0xd3, 0x74, 0xf0, 0x40, 0x14, 0x5e, 0x96, 0xae, 0x45, 0x0e, 0x6a, 0x9b};
    static const uint8_t returned_293[] = { 0x37, 0x10, 0x39, 0x09, 0x40, 0xf6, 0x41, 0xc9, 0x9f, 0x03, 0x2c, 0x1a, 0x1b, 0x9a, 0xdd, 0xf6, 0xbb, 0x91, 0xeb, 0xc4, 0xab, 0x27, 0x8f, 0x7a, 0x1e, 0xaf, 0xa8, 0x60, 0x92, 0xb5, 0x5b, 0x52, 0xb9, 0x72, 0x1f, 0x4b, 0x5e, 0xa3, 0x79, 0x3b, 0x4c, 0xfb, 0x4b, 0xa8, 0xbd, 0xb4, 0x94, 0x29, 0x33, 0x1a, 0xc7, 0xf1, 0x7c, 0x66, 0xa4, 0x77, 0x1b, 0x29, 0xfa, 0x2f, 0xf0, 0xe1, 0x39, 0x09};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_294[] = { 0xe5, 0x4a, 0xe2, 0xd8, 0xa4, 0xcd, 0x7e, 0x61, 0x4f, 0xe7, 0x78, 0x2c, 0xf9, 0x6f, 0xce, 0x02, 0x33, 0x11, 0x1e, 0x2d, 0xa3, 0x48, 0x29, 0x82, 0x6f, 0x7b, 0xe8, 0x4c, 0x17, 0x74, 0x4a, 0xba};
    rng.instantiate(entropy_292, personalization_294, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_293, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12158 */
  {
    static const uint8_t entropy_295[] = { 0xf8, 0x51, 0xb7, 0xec, 0xef, 0x38, 0x42, 0x2b, 0x43, 0x7d, 0x4d, 0xbd, 0xd6, 0x3a, 0x11, 0x86, 0xa1, 0x5b, 0x3b, 0xac, 0xe8, 0x50, 0x8a, 0x2a, 0x81, 0xd5, 0xca, 0xcc, 0x5a, 0xc5, 0xa9, 0x68};
    static const uint8_t returned_296[] = { 0xd1, 0xa4, 0x12, 0xcc, 0x86, 0xf7, 0x9a, 0xe7, 0xc4, 0x79, 0xcf, 0xed, 0x85, 0x90, 0xf3, 0x10, 0xe2, 0x2a, 0x68, 0x84, 0x51, 0xb6, 0x0a, 0xa8, 0x63, 0x0f, 0xc8, 0xc2, 0xb1, 0xee, 0x0f, 0x94, 0x80, 0x6f, 0x75, 0x97, 0x5c, 0x29, 0xdc, 0xe0, 0xe3, 0x68, 0x54, 0xfa, 0x7b, 0x86, 0x04, 0xc5, 0xf5, 0x4d, 0xb9, 0xf6, 0x9c, 0x8e, 0x19, 0x78, 0x47, 0x2d, 0x50, 0x81, 0xec, 0x7e, 0x15, 0x53};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_297[] = { 0x83, 0xe4, 0x31, 0x5a, 0x6c, 0x4c, 0xfa, 0x98, 0x52, 0xc9, 0x10, 0x69, 0xa9, 0xa1, 0xc9, 0x14, 0x0a, 0xd6, 0x7f, 0xe9, 0x3e, 0xe3, 0x63, 0x3e, 0x27, 0x93, 0x7f, 0x78, 0xfc, 0x8a, 0x11, 0xa1};
    rng.instantiate(entropy_295, personalization_297, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_296, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12166 */
  {
    static const uint8_t entropy_298[] = { 0x31, 0x5b, 0xbe, 0x53, 0x0e, 0xcf, 0xa4, 0x4e, 0xb2, 0x72, 0x50, 0xf6, 0xd2, 0x0f, 0x4b, 0x6c, 0x64, 0x8e, 0x42, 0xc6, 0x1f, 0x6f, 0xae, 0xd6, 0xfe, 0x48, 0x3f, 0x26, 0xf6, 0xf8, 0x42, 0x7f};
    static const uint8_t returned_299[] = { 0xc5, 0x92, 0xd9, 0xe7, 0xb6, 0x74, 0x15, 0xd0, 0x9d, 0xfc, 0x46, 0xd3, 0x03, 0x9b, 0x3a, 0xfc, 0x1c, 0xe6, 0x6a, 0xfa, 0x98, 0xe8, 0x79, 0x34, 0x37, 0xcf, 0xcb, 0x5a, 0xb3, 0xa1, 0x22, 0xc6, 0x36, 0xf0, 0xa8, 0x4e, 0xdc, 0x04, 0x09, 0x9d, 0x38, 0x19, 0xd7, 0xfa, 0x30, 0xd1, 0x96, 0x88, 0x0d, 0x91, 0x99, 0xde, 0x17, 0xf7, 0x17, 0x0d, 0xe7, 0x25, 0xf3, 0x65, 0x0e, 0xf3, 0x4b, 0x19};
    uint8_t buffer[64];
    AesCtrDrbg128 rng;
    static const uint8_t personalization_300[] = { 0xef, 0xa1, 0x0f, 0xa5, 0xbc, 0x1e, 0x44, 0x5c, 0x03, 0x16, 0x20, 0xeb, 0xb3, 0x7e, 0x75, 0x52, 0xc2, 0xdf, 0xa0, 0x83, 0x07, 0xdf, 0xe5, 0x3c, 0x1b, 0x8e, 0x74, 0xec, 0x55, 0x05, 0x03, 0x56};
    rng.instantiate(entropy_298, personalization_300, 32);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_299, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12310 */
  {
    static const uint8_t entropy_301[] = { 0xf1, 0xef, 0x7e, 0xb3, 0x11, 0xc8, 0x50, 0xe1, 0x89, 0xbe, 0x22, 0x9d, 0xf7, 0xe6, 0xd6, 0x8f, 0x17, 0x95, 0xaa, 0x8e, 0x21, 0xd9, 0x35, 0x04, 0xe7, 0x5a, 0xbe, 0x78, 0xf0, 0x41, 0x39, 0x58, 0x73, 0x54, 0x03, 0x86, 0x81, 0x2a, 0x9a, 0x2a};
    static const uint8_t returned_302[] = { 0x6b, 0xb0, 0xaa, 0x5b, 0x4b, 0x97, 0xee, 0x83, 0x76, 0x57, 0x36, 0xad, 0x0e, 0x90, 0x68, 0xdf, 0xef, 0x0c, 0xcf, 0xc9, 0x3b, 0x71, 0xc1, 0xd3, 0x42, 0x53, 0x02, 0xef, 0x7b, 0xa4, 0x63, 0x5f, 0xfc, 0x09, 0x98, 0x1d, 0x26, 0x21, 0x77, 0xe2, 0x08, 0xa7, 0xec, 0x90, 0xa5, 0x57, 0xb6, 0xd7, 0x61, 0x12, 0xd5, 0x6c, 0x40, 0x89, 0x38, 0x92, 0xc3, 0x03, 0x48, 0x35, 0x03, 0x6d, 0x7a, 0x69};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_301, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_302, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12318 */
  {
    static const uint8_t entropy_303[] = { 0x81, 0x8d, 0x5b, 0x46, 0x0c, 0xf0, 0xe1, 0x8f, 0xaf, 0x24, 0x41, 0xc9, 0x7e, 0xef, 0x12, 0xeb, 0xa4, 0xec, 0xa4, 0xbe, 0x95, 0xa2, 0x77, 0xc4, 0xf7, 0xca, 0x90, 0x4d, 0xa1, 0x98, 0x1c, 0xb9, 0x05, 0xa2, 0x90, 0x60, 0x1d, 0xb8, 0xb6, 0x77};
    static const uint8_t returned_304[] = { 0x6f, 0xd7, 0x54, 0x98, 0xe5, 0xf3, 0x8c, 0x40, 0xe7, 0x2a, 0x0a, 0x3c, 0x2e, 0x22, 0x47, 0xca, 0x13, 0x39, 0x31, 0xbf, 0xed, 0x42, 0x37, 0xf0, 0xc9, 0xa1, 0x9f, 0x6b, 0xbf, 0x6a, 0xb8, 0x38, 0x1f, 0x92, 0x71, 0x33, 0x7f, 0x6d, 0xe6, 0xaf, 0x53, 0xd7, 0xd5, 0xf6, 0x72, 0x57, 0xfc, 0xe6, 0xbc, 0x8e, 0x60, 0x2a, 0xf8, 0xb9, 0x84, 0x4f, 0x04, 0x3c, 0x78, 0xf2, 0xd2, 0x4e, 0x4f, 0xfb};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_303, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_304, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12326 */
  {
    static const uint8_t entropy_305[] = { 0xe4, 0x5d, 0xc4, 0x11, 0x3f, 0x01, 0xb5, 0x89, 0xe5, 0x03, 0xe7, 0xc5, 0x8f, 0x6a, 0x7c, 0x91, 0x0d, 0x8a, 0x34, 0x58, 0xb7, 0x1f, 0xb3, 0x22, 0xbb, 0xbf, 0xee, 0x17, 0x5e, 0x15, 0x06, 0x0b, 0x27, 0x8a, 0xe6, 0x92, 0xfb, 0x39, 0xd4, 0x6e};
    static const uint8_t returned_306[] = { 0x65, 0xc6, 0x96, 0xc8, 0xcd, 0x52, 0x49, 0x77, 0xea, 0xef, 0x54, 0xb5, 0xf7, 0x59, 0x6f, 0x84, 0xd9, 0x68, 0x1e, 0xfc, 0x7f, 0xee, 0x5a, 0x41, 0xc1, 0x47, 0x9c, 0x04, 0xb1, 0x81, 0x75, 0xe2, 0xec, 0x02, 0x96, 0xc9, 0x77, 0x7c, 0xe4, 0x60, 0xeb, 0xb6, 0xe2, 0xc5, 0x06, 0x30, 0x31, 0x42, 0x02, 0x58, 0x39, 0x1c, 0x70, 0xf5, 0x92, 0x6b, 0xe1, 0x15, 0x03, 0x5d, 0xd9, 0x51, 0x55, 0xbb};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_305, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_306, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12334 */
  {
    static const uint8_t entropy_307[] = { 0x6f, 0x1c, 0xce, 0x67, 0xd7, 0xb6, 0x37, 0x4d, 0x3c, 0x0f, 0x08, 0x4b, 0xca, 0xd9, 0xdb, 0xd4, 0x5d, 0x6e, 0x50, 0xb9, 0x89, 0x89, 0x1a, 0x57, 0x82, 0x71, 0x9a, 0x7b, 0xa0, 0xa9, 0xc3, 0xc2, 0x1f, 0x06, 0x77, 0x3e, 0x76, 0x7a, 0x97, 0x31};
    static const uint8_t returned_308[] = { 0x61, 0x9d, 0x8d, 0x8a, 0x12, 0x13, 0xf3, 0x56, 0x60, 0x88, 0x5d, 0xe1, 0xee, 0xf5, 0x92, 0x86, 0x9a, 0xea, 0x27, 0xa6, 0x1e, 0x79, 0x1a, 0x0c, 0xb4, 0xfa, 0x5a, 0x68, 0x39, 0xf4, 0xf2, 0xa7, 0xfe, 0x4d, 0xe5, 0x24, 0xc9, 0x8f, 0x12, 0x1b, 0x06, 0x52, 0x48, 0xf2, 0xc3, 0xbd, 0xe6, 0x50, 0x93, 0x34, 0xea, 0xfe, 0xbc, 0xd5, 0x0e, 0x77, 0x21, 0xfd, 0x80, 0x80, 0xf5, 0x0d, 0x00, 0xf7};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_307, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_308, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12342 */
  {
    static const uint8_t entropy_309[] = { 0x40, 0xef, 0xaa, 0x49, 0x98, 0x6a, 0xa9, 0x0e, 0x98, 0xf3, 0xb8, 0x4a, 0x7d, 0x21, 0x28, 0x27, 0xd2, 0x15, 0xaf, 0x86, 0x15, 0x63, 0xe4, 0xe2, 0xb7, 0xae, 0xfb, 0x8b, 0xb4, 0xf2, 0x74, 0x84, 0x8b, 0xd0, 0x7a, 0xf0, 0x4d, 0xfb, 0xb9, 0x98};
    static const uint8_t returned_310[] = { 0x44, 0xba, 0xb6, 0x94, 0x29, 0xd1, 0x96, 0x00, 0xa3, 0x10, 0x30, 0x21, 0x66, 0x78, 0x84, 0x91, 0x8a, 0x45, 0x55, 0x07, 0xda, 0x16, 0x6e, 0xbe, 0x7c, 0xbe, 0x03, 0xbb, 0xad, 0x90, 0x49, 0x38, 0x65, 0x9a, 0x9a, 0x27, 0xdf, 0x6c, 0xa4, 0xa1, 0x67, 0x59, 0x7e, 0x74, 0xb0, 0x5a, 0x2e, 0xd3, 0x0b, 0x92, 0x65, 0x36, 0xb4, 0x1d, 0x03, 0xaa, 0x68, 0xb3, 0xea, 0xb1, 0xf2, 0x33, 0x15, 0xa7};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_309, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_310, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12350 */
  {
    static const uint8_t entropy_311[] = { 0xf2, 0xb9, 0xf3, 0x7f, 0x53, 0xdd, 0xe8, 0x7a, 0x03, 0xf4, 0x18, 0x4e, 0x9f, 0x25, 0x0e, 0xe6, 0x02, 0xb6, 0x1c, 0x29, 0x4e, 0xa3, 0x21, 0x4d, 0x94, 0x9f, 0x7b, 0x55, 0x64, 0xc9, 0x62, 0xcb, 0xdc, 0x70, 0xa6, 0xf8, 0x1e, 0xf6, 0x6a, 0x5d};
    static const uint8_t returned_312[] = { 0xb0, 0x40, 0x9f, 0xc5, 0x1b, 0x5d, 0x25, 0x5d, 0x0b, 0x7a, 0x1f, 0xed, 0x2a, 0x60, 0x67, 0x8b, 0x35, 0xc6, 0x4d, 0xf7, 0x79, 0xd0, 0xcf, 0xba, 0x95, 0x43, 0x92, 0x4e, 0x75, 0x52, 0xbc, 0x6d, 0x9b, 0xf4, 0x6e, 0xce, 0xdc, 0xef, 0xe9, 0x16, 0x01, 0x6f, 0xb5, 0xdb, 0xd2, 0x37, 0xa4, 0x50, 0xf5, 0x40, 0x68, 0xb1, 0x4c, 0x67, 0xf4, 0x73, 0xd8, 0xf6, 0xdf, 0x08, 0x28, 0x52, 0xb1, 0x5b};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_311, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_312, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12358 */
  {
    static const uint8_t entropy_313[] = { 0x7f, 0xbb, 0xba, 0x28, 0x45, 0xdd, 0xe1, 0x8c, 0x0b, 0xfa, 0x21, 0x5f, 0x83, 0x70, 0x59, 0xcc, 0xf4, 0x77, 0xce, 0xca, 0xcb, 0x88, 0x45, 0x2d, 0x61, 0xca, 0x3b, 0xe2, 0x7b, 0x7d, 0xde, 0x56, 0x37, 0xc4, 0x85, 0x3e, 0xd1, 0xc7, 0x29, 0xdf};
    static const uint8_t returned_314[] = { 0x05, 0xb6, 0xa3, 0x6d, 0xb2, 0x4c, 0x06, 0x9e, 0xf5, 0x83, 0x51, 0x48, 0x82, 0x45, 0x1f, 0xcf, 0x30, 0x42, 0xf8, 0x30, 0x63, 0xec, 0x03, 0xb0, 0xdc, 0x83, 0x22, 0x1c, 0x8f, 0x0d, 0xce, 0xa9, 0x0f, 0x76, 0x92, 0xa8, 0x89, 0x45, 0xc1, 0xd2, 0x8f, 0xd6, 0x21, 0x8a, 0x67, 0x57, 0xae, 0x66, 0x5a, 0x21, 0xd1, 0x49, 0xb7, 0xba, 0xb4, 0x96, 0xf6, 0xe1, 0x06, 0x6c, 0xcf, 0x1f, 0xbd, 0xb7};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_313, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_314, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12366 */
  {
    static const uint8_t entropy_315[] = { 0x2f, 0x85, 0xae, 0x86, 0xc3, 0x8a, 0x54, 0x68, 0x97, 0xa8, 0x2f, 0xd2, 0x20, 0x49, 0x60, 0x99, 0xc9, 0x4b, 0x81, 0xa6, 0x5a, 0x2b, 0xd5, 0xa2, 0xd6, 0xe6, 0x6b, 0x17, 0x28, 0xef, 0xd5, 0xe2, 0xa9, 0x9a, 0xf8, 0x50, 0xa1, 0x7c, 0x08, 0x9b};
    static const uint8_t returned_316[] = { 0x30, 0xb5, 0x5d, 0x02, 0xb0, 0xfd, 0xcc, 0x1f, 0x37, 0x5c, 0xe1, 0xf2, 0x29, 0xf5, 0x4e, 0x7c, 0xb8, 0x91, 0xf3, 0x55, 0x1e, 0xbd, 0x3c, 0x74, 0x73, 0xe6, 0x10, 0x8f, 0x87, 0x65, 0x5b, 0x8c, 0x10, 0x13, 0x7e, 0x77, 0x0a, 0xd5, 0x46, 0x6c, 0x61, 0xc1, 0x21, 0xdd, 0x48, 0x9c, 0x2b, 0x8f, 0xe4, 0x50, 0x6b, 0x0c, 0x90, 0xdd, 0x49, 0x7e, 0x00, 0x52, 0x88, 0xff, 0x1a, 0x03, 0x00, 0x52};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_315, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_316, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12374 */
  {
    static const uint8_t entropy_317[] = { 0x15, 0xbd, 0x0f, 0x42, 0xca, 0x57, 0xba, 0xeb, 0xa4, 0x4c, 0x71, 0xc6, 0x9b, 0xbf, 0x29, 0x9c, 0x5d, 0x8b, 0xc0, 0x52, 0xc0, 0xd9, 0x84, 0x29, 0xa0, 0x79, 0x4f, 0x15, 0xd2, 0xc1, 0xc6, 0x73, 0x01, 0x8b, 0xf9, 0xe4, 0xe6, 0xb3, 0x8a, 0x53};
    static const uint8_t returned_318[] = { 0x5e, 0x57, 0x71, 0x80, 0xd6, 0x45, 0x4e, 0x58, 0x5c, 0x72, 0x57, 0x2e, 0xa1, 0x45, 0x1c, 0x28, 0xd0, 0x50, 0x6e, 0xcd, 0xec, 0xc6, 0x6f, 0x20, 0xf5, 0x7b, 0x57, 0xd7, 0x39, 0xd8, 0x93, 0x84, 0x19, 0x0f, 0x9e, 0x97, 0xae, 0x02, 0x56, 0xcb, 0x62, 0x56, 0xd7, 0x70, 0x3d, 0x3d, 0xa0, 0xb1, 0x1a, 0x0a, 0xc9, 0x57, 0x58, 0x0a, 0xe9, 0xa3, 0xcb, 0xb4, 0xfd, 0xb7, 0x30, 0xac, 0xe6, 0x3f};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_317, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_318, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12382 */
  {
    static const uint8_t entropy_319[] = { 0xa9, 0x88, 0x28, 0x5b, 0x9e, 0xa1, 0x1c, 0xcc, 0x14, 0x37, 0xc5, 0x19, 0x60, 0x70, 0x93, 0xbc, 0x6a, 0xed, 0x41, 0xb5, 0x09, 0xbb, 0xe0, 0x0b, 0x70, 0x00, 0x58, 0x43, 0x7e, 0x8a, 0x52, 0xe9, 0x0b, 0xb0, 0x43, 0xcc, 0x67, 0x13, 0x3a, 0x0d};
    static const uint8_t returned_320[] = { 0x94, 0x9a, 0x6e, 0xed, 0xb8, 0x42, 0xd9, 0xb6, 0x5a, 0x49, 0x6a, 0xa4, 0xb8, 0x02, 0xf8, 0x20, 0x23, 0x42, 0x17, 0xc4, 0x83, 0x42, 0x24, 0xfc, 0xe9, 0xfb, 0xaa, 0x72, 0x11, 0xd0, 0x74, 0x75, 0xf4, 0xc1, 0x2e, 0x1d, 0xb7, 0x28, 0x92, 0x50, 0x94, 0xde, 0x32, 0xb1, 0x9b, 0x3e, 0xe0, 0xfb, 0x36, 0xcf, 0x00, 0xd5, 0x66, 0x13, 0x79, 0xca, 0x76, 0xf1, 0x98, 0xfa, 0xad, 0x76, 0x16, 0xec};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_319, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_320, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12390 */
  {
    static const uint8_t entropy_321[] = { 0xd7, 0xd5, 0x62, 0xd6, 0xc9, 0xcc, 0x96, 0x0a, 0x49, 0xc0, 0xb7, 0xc8, 0x51, 0xcd, 0xfd, 0x6f, 0x53, 0x95, 0x61, 0xdc, 0xf1, 0x84, 0xef, 0x4c, 0x96, 0x8e, 0x57, 0xf2, 0xac, 0xd7, 0x2b, 0x43, 0x2e, 0xf1, 0x1d, 0xf3, 0xe0, 0xa0, 0xbb, 0x19};
    static const uint8_t returned_322[] = { 0xd8, 0xa6, 0xe5, 0x7f, 0x2a, 0xcb, 0x7b, 0x5a, 0xe9, 0x90, 0x36, 0x38, 0x2c, 0x83, 0x18, 0x22, 0x62, 0xc1, 0x55, 0xdb, 0xed, 0x02, 0x0b, 0x5e, 0x8f, 0x3d, 0xd4, 0x96, 0x66, 0xfe, 0xc4, 0x6a, 0x20, 0x22, 0xb1, 0x82, 0x46, 0xae, 0x99, 0x2c, 0xbd, 0xe9, 0x78, 0xf4, 0x44, 0x1d, 0x64, 0x39, 0x60, 0x67, 0xed, 0x03, 0x17, 0x39, 0xa3, 0x30, 0x2f, 0x15, 0x6e, 0xb8, 0x93, 0x92, 0xc7, 0x67};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_321, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_322, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12398 */
  {
    static const uint8_t entropy_323[] = { 0x07, 0xd9, 0x96, 0x26, 0x93, 0x8c, 0x9f, 0x30, 0xa9, 0x96, 0x68, 0xd9, 0x68, 0x81, 0x62, 0xba, 0xf3, 0x09, 0x3c, 0x6f, 0xbf, 0xa7, 0x83, 0xc9, 0x9b, 0x9d, 0x92, 0x9e, 0x4b, 0x3b, 0xd4, 0x8e, 0xee, 0x1a, 0xb4, 0x94, 0xa7, 0xd8, 0x51, 0xaa};
    static const uint8_t returned_324[] = { 0x50, 0x2e, 0x41, 0x25, 0x96, 0xd1, 0x88, 0x63, 0xff, 0xd5, 0x38, 0xbd, 0x30, 0x47, 0xa1, 0xd2, 0x73, 0xe0, 0x52, 0x69, 0x94, 0xf4, 0xec, 0xa5, 0x33, 0x8b, 0xc3, 0x1e, 0x41, 0xc5, 0xd6, 0xaf, 0x27, 0x3a, 0xe3, 0x09, 0x28, 0x24, 0xa1, 0x4c, 0x10, 0x71, 0x66, 0x63, 0x1b, 0x5a, 0x8a, 0x94, 0xcb, 0xf4, 0x9a, 0x7f, 0xdf, 0x9c, 0xad, 0xc1, 0x2c, 0xd1, 0x4b, 0x31, 0x64, 0x2e, 0x70, 0x1f};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_323, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_324, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12406 */
  {
    static const uint8_t entropy_325[] = { 0xc5, 0x49, 0x35, 0x74, 0x29, 0xb4, 0x2c, 0xb2, 0x9b, 0x49, 0xf5, 0x7c, 0x8e, 0xf8, 0x77, 0xca, 0x1c, 0xf1, 0xa4, 0x3c, 0x0b, 0xa7, 0xe0, 0xc6, 0x0e, 0x54, 0x93, 0x52, 0xae, 0x84, 0x30, 0x84, 0x44, 0xe9, 0xe7, 0x03, 0x5b, 0x49, 0x4f, 0xce};
    static const uint8_t returned_326[] = { 0x5d, 0x34, 0x19, 0x06, 0xe6, 0x87, 0x66, 0x36, 0xd7, 0x2c, 0x0e, 0x9c, 0x78, 0x9d, 0x52, 0xea, 0x6e, 0x82, 0x7d, 0x10, 0xe4, 0xae, 0x2c, 0x8e, 0xaf, 0x6b, 0x20, 0x3c, 0x3a, 0x26, 0xc7, 0x18, 0xc7, 0x64, 0x60, 0x85, 0x39, 0xc5, 0x7f, 0x8c, 0x15, 0x81, 0x9a, 0xda, 0xb1, 0xb0, 0xbc, 0x3d, 0x9a, 0x13, 0x2f, 0xf0, 0x13, 0x78, 0x1f, 0x22, 0xce, 0xe4, 0xb7, 0x3a, 0xdd, 0xb5, 0x0b, 0x96};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_325, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_326, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12414 */
  {
    static const uint8_t entropy_327[] = { 0x2c, 0x7d, 0x6a, 0x54, 0x49, 0x3e, 0xc7, 0x62, 0x38, 0x86, 0x45, 0x62, 0x31, 0x26, 0x4d, 0x25, 0x80, 0xfc, 0x08, 0x1e, 0xd0, 0xb9, 0x7f, 0xa5, 0x73, 0x20, 0xef, 0x34, 0x03, 0x40, 0xba, 0xd5, 0x60, 0x16, 0x4e, 0xf2, 0x65, 0x62, 0x9b, 0xec};
    static const uint8_t returned_328[] = { 0x20, 0xd7, 0x34, 0xab, 0x56, 0x11, 0xa3, 0x9d, 0x6c, 0xca, 0xf8, 0x94, 0x1d, 0x25, 0x48, 0x04, 0xc3, 0x6b, 0xa8, 0xbf, 0x20, 0x6b, 0xf1, 0x0d, 0x82, 0xf7, 0x21, 0xba, 0x95, 0x48, 0xb9, 0xf7, 0xcc, 0x10, 0x0f, 0x94, 0x8a, 0xaf, 0xe3, 0xf3, 0x24, 0xca, 0x49, 0x43, 0x78, 0x32, 0x56, 0x64, 0x1d, 0x5a, 0x1f, 0xb2, 0x3f, 0xd6, 0x06, 0x13, 0xfc, 0x0f, 0xbe, 0x30, 0xc9, 0xca, 0xa8, 0xfa};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_327, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_328, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12422 */
  {
    static const uint8_t entropy_329[] = { 0x8d, 0xc5, 0xa9, 0xe8, 0xe9, 0x45, 0x8f, 0x84, 0x1d, 0xae, 0x78, 0x8d, 0x24, 0xbb, 0x5f, 0xb1, 0x92, 0xef, 0x1f, 0xfa, 0xcc, 0xd9, 0x91, 0xf8, 0x9f, 0x2b, 0x5d, 0x3b, 0xa5, 0x7c, 0x14, 0x71, 0x61, 0x24, 0x96, 0xc7, 0xd9, 0xcd, 0xd1, 0x74};
    static const uint8_t returned_330[] = { 0xfd, 0x74, 0xa7, 0xb1, 0x5c, 0x9a, 0xf2, 0xea, 0x14, 0x0a, 0x2d, 0x0e, 0x35, 0x3c, 0x33, 0x87, 0xb3, 0x89, 0x14, 0x4d, 0xda, 0x57, 0x79, 0xc6, 0x9f, 0x29, 0x99, 0x17, 0xdf, 0xb1, 0x9d, 0xe6, 0xad, 0x60, 0xdd, 0x44, 0x0c, 0x14, 0xc0, 0x10, 0xca, 0x16, 0x14, 0x36, 0x24, 0x3b, 0xf9, 0xd3, 0x3a, 0x66, 0x49, 0x33, 0x9a, 0x35, 0x43, 0xb8, 0xe7, 0x17, 0x89, 0x62, 0x1d, 0xa7, 0xab, 0x7b};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_329, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_330, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12566 */
  {
    static const uint8_t entropy_331[] = { 0xd7, 0x66, 0x97, 0x49, 0x5a, 0xdd, 0x9b, 0xaa, 0xc8, 0xcf, 0xdf, 0x90, 0xe0, 0xa6, 0xf3, 0x38, 0x1a, 0x52, 0xb2, 0x88, 0x9f, 0x84, 0x0a, 0x24, 0xcf, 0xc9, 0x60, 0x6f, 0x97, 0xc4, 0x94, 0x46, 0x20, 0x2e, 0x70, 0x58, 0x3f, 0xde, 0x09, 0xdc};
    static const uint8_t returned_332[] = { 0x56, 0x93, 0xf6, 0x8e, 0xc7, 0xa8, 0xd2, 0x63, 0x1d, 0xee, 0x9d, 0x37, 0x15, 0x03, 0xe0, 0x5c, 0xbd, 0x5f, 0xb8, 0x72, 0x50, 0x6f, 0x04, 0x00, 0x50, 0xb1, 0xd4, 0x41, 0xa9, 0x4b, 0xd7, 0x4e, 0xc0, 0x6f, 0x24, 0xc1, 0xcc, 0x43, 0x63, 0xec, 0xe1, 0xd8, 0xb2, 0x29, 0x5e, 0x74, 0x38, 0x9b, 0x6d, 0xd8, 0xb1, 0xe5, 0x43, 0x8b, 0xce, 0xab, 0x2f, 0x2b, 0xc2, 0xaf, 0x5a, 0x9d, 0x8d, 0xa8};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_333[] = { 0xd6, 0x4e, 0x54, 0x65, 0x23, 0xfb, 0x08, 0x2b, 0x5e, 0x87, 0xbb, 0xe6, 0xb6, 0x6a, 0x8e, 0x6a, 0x79, 0x40, 0xbb, 0x06, 0xed, 0x17, 0xfe, 0x83, 0x3c, 0x4e, 0x9b, 0xbb, 0x21, 0x13, 0x96, 0xc2, 0x27, 0xf8, 0x36, 0x71, 0xc9, 0x24, 0x24, 0x0e};
    rng.instantiate(entropy_331, personalization_333, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_332, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12574 */
  {
    static const uint8_t entropy_334[] = { 0xc2, 0x97, 0xf7, 0x68, 0xf7, 0xff, 0x47, 0x41, 0x87, 0x6c, 0x90, 0xd3, 0xeb, 0x15, 0x60, 0x0f, 0x11, 0x68, 0x5f, 0x9b, 0x93, 0x1e, 0x62, 0xec, 0x58, 0x0a, 0xc0, 0x5d, 0xc8, 0xf1, 0x22, 0xf6, 0xa7, 0xa0, 0x5e, 0x09, 0xc9, 0x43, 0x23, 0xae};
    static const uint8_t returned_335[] = { 0x85, 0x8c, 0x54, 0x20, 0x88, 0x0d, 0x2d, 0x22, 0xc9, 0xa3, 0xd2, 0x27, 0x0c, 0xc8, 0xfb, 0xfe, 0x2c, 0x7b, 0x53, 0xb2, 0x11, 0x07, 0xb9, 0xe4, 0x56, 0xe6, 0x46, 0x15, 0x7e, 0xe7, 0x48, 0xfd, 0xaf, 0xcc, 0xd8, 0x28, 0x15, 0x42, 0x3f, 0xe6, 0x18, 0xc4, 0x45, 0xc8, 0x10, 0xda, 0x9a, 0x32, 0x3c, 0xdb, 0x95, 0xde, 0xf4, 0x8e, 0x8b, 0xca, 0xf3, 0xb7, 0x28, 0x1a, 0xcd, 0x49, 0x42, 0x2a};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_336[] = { 0x0d, 0x47, 0xaa, 0x43, 0xac, 0x1c, 0xc6, 0x7a, 0x75, 0x4b, 0x0a, 0x5a, 0xfa, 0xcd, 0xff, 0x9e, 0x78, 0x4c, 0x9e, 0xcd, 0x18, 0x4a, 0xd3, 0x1b, 0x07, 0x65, 0x74, 0xc5, 0x6a, 0x48, 0x55, 0x0b, 0xcd, 0x7d, 0x32, 0xb3, 0xe9, 0xb3, 0xa1, 0x14};
    rng.instantiate(entropy_334, personalization_336, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_335, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12582 */
  {
    static const uint8_t entropy_337[] = { 0xbd, 0x71, 0x61, 0xdb, 0x32, 0x82, 0xde, 0x22, 0x58, 0xea, 0xc2, 0xbb, 0x30, 0x40, 0x02, 0xfc, 0xc9, 0x6f, 0x87, 0xf9, 0x96, 0xae, 0x00, 0xe3, 0x5b, 0xe3, 0xd8, 0x4f, 0xcb, 0x04, 0x83, 0x5e, 0xb7, 0x5f, 0x84, 0x3e, 0x67, 0x99, 0xf7, 0xfd};
    static const uint8_t returned_338[] = { 0xca, 0xb8, 0x9f, 0x54, 0x88, 0x71, 0x69, 0x75, 0x8c, 0x26, 0xfa, 0xb0, 0xf8, 0x33, 0x97, 0x2d, 0x0c, 0x07, 0x81, 0x01, 0x5b, 0x71, 0xef, 0xf1, 0xa2, 0x28, 0x46, 0x05, 0xc7, 0xed, 0x98, 0x75, 0x52, 0xf0, 0xbc, 0xf1, 0x7a, 0x59, 0x56, 0xcb, 0xbf, 0xf1, 0x80, 0x52, 0x84, 0x28, 0x5d, 0x53, 0x8b, 0xec, 0x14, 0xf4, 0x14, 0xf3, 0xb2, 0xbc, 0x01, 0x6b, 0xfa, 0xc8, 0x05, 0xdb, 0x96, 0xf8};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_339[] = { 0x28, 0xb6, 0xdb, 0x39, 0x36, 0x0d, 0xd5, 0xb1, 0x9d, 0x9f, 0x4b, 0x86, 0x2a, 0x8b, 0xc5, 0xc0, 0x61, 0x7c, 0xcf, 0x3c, 0x80, 0xd0, 0x2c, 0xbc, 0xe1, 0xbd, 0xf9, 0xb3, 0x0e, 0x46, 0x64, 0x7e, 0xf5, 0x4f, 0x6b, 0x5c, 0xe3, 0x47, 0x3e, 0x91};
    rng.instantiate(entropy_337, personalization_339, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_338, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12590 */
  {
    static const uint8_t entropy_340[] = { 0x82, 0xf1, 0xc5, 0xee, 0xc1, 0x63, 0x7e, 0xc6, 0x63, 0x2b, 0xc9, 0x6c, 0x8f, 0x70, 0x96, 0x27, 0x56, 0x1d, 0xe6, 0xb5, 0x6b, 0x88, 0x5c, 0x12, 0x1d, 0x4f, 0x82, 0x0e, 0xd2, 0x2c, 0x21, 0x14, 0xde, 0x94, 0x67, 0x15, 0x0f, 0x0e, 0x98, 0x19};
    static const uint8_t returned_341[] = { 0x2e, 0x33, 0x81, 0x68, 0xab, 0xba, 0xba, 0x95, 0xa5, 0x87, 0xcd, 0xc6, 0xd9, 0xb1, 0x1e, 0x8b, 0x55, 0x5d, 0x89, 0x52, 0x65, 0x5d, 0x6d, 0xe4, 0xed, 0x02, 0x6b, 0x05, 0x82, 0x37, 0xf5, 0xd7, 0xd0, 0x22, 0x14, 0xba, 0x08, 0x48, 0xe5, 0x01, 0xc0, 0xa0, 0xb7, 0xe3, 0x8f, 0x98, 0xff, 0x32, 0x78, 0x5c, 0xc5, 0x29, 0xb0, 0xa2, 0x67, 0x91, 0x83, 0x14, 0x73, 0xd1, 0x88, 0xb0, 0x24, 0x87};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_342[] = { 0x0a, 0x6d, 0x16, 0x49, 0xba, 0x34, 0x0d, 0xa7, 0xd7, 0x9f, 0x6f, 0x09, 0x8b, 0xa2, 0x28, 0x4c, 0xf7, 0xf5, 0x7b, 0x28, 0x72, 0x5b, 0x21, 0x11, 0x75, 0x5e, 0x36, 0xe7, 0x79, 0x8c, 0x5b, 0x66, 0x79, 0x4c, 0x8b, 0x10, 0x9c, 0xd2, 0x99, 0x71};
    rng.instantiate(entropy_340, personalization_342, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_341, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12598 */
  {
    static const uint8_t entropy_343[] = { 0x96, 0x43, 0xdf, 0x0b, 0x92, 0xd8, 0xcf, 0x95, 0x7b, 0xb6, 0x7e, 0xd8, 0x6b, 0xdc, 0x02, 0x0b, 0xbf, 0xae, 0xbf, 0x53, 0x40, 0xac, 0xd2, 0xf3, 0x44, 0x91, 0x9f, 0xd6, 0x3a, 0xf0, 0x75, 0x75, 0xa0, 0xe0, 0x1a, 0x8b, 0x50, 0x07, 0x49, 0x4c};
    static const uint8_t returned_344[] = { 0x89, 0x5c, 0x49, 0x95, 0x17, 0x7a, 0xfa, 0x56, 0xfc, 0x49, 0x00, 0x37, 0xc2, 0x3e, 0xf8, 0x30, 0x7b, 0xe1, 0x04, 0x9d, 0xa8, 0xa0, 0xba, 0x32, 0x9a, 0x25, 0xb4, 0x89, 0xe5, 0xbd, 0x26, 0xb7, 0xd5, 0x0c, 0x29, 0xdd, 0xe0, 0xe7, 0x98, 0x02, 0xa1, 0x3c, 0x70, 0x26, 0x40, 0x32, 0xff, 0xad, 0x06, 0xbb, 0x91, 0xcb, 0xa9, 0xcb, 0xd7, 0xdf, 0x36, 0x1f, 0x74, 0xbd, 0x83, 0x09, 0xaa, 0x8a};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_345[] = { 0x8a, 0xa8, 0x4e, 0x2a, 0x29, 0xed, 0x39, 0x36, 0x3a, 0x80, 0x10, 0xf7, 0x32, 0xcd, 0xe9, 0xc4, 0x6e, 0x86, 0x31, 0x4b, 0x69, 0x04, 0xd6, 0x90, 0xa4, 0x0e, 0x65, 0xc6, 0x13, 0x86, 0xa2, 0x6d, 0x9e, 0x9c, 0x88, 0x21, 0xee, 0x68, 0xaf, 0xa8};
    rng.instantiate(entropy_343, personalization_345, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_344, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12606 */
  {
    static const uint8_t entropy_346[] = { 0x98, 0xb1, 0x95, 0x35, 0xdc, 0xce, 0xb0, 0xa0, 0x07, 0xdd, 0x62, 0xfe, 0x75, 0x0b, 0xe5, 0x4d, 0x1e, 0x58, 0xf7, 0xae, 0x75, 0xac, 0x42, 0x91, 0x9d, 0x6b, 0xd7, 0x69, 0xda, 0x73, 0xf8, 0xe4, 0x60, 0xb9, 0xd0, 0x38, 0x95, 0x3c, 0xc0, 0xdd};
    static const uint8_t returned_347[] = { 0x14, 0x56, 0xfd, 0xdb, 0x09, 0xdb, 0x4d, 0xd4, 0x43, 0xf1, 0xbe, 0x27, 0x0c, 0xbe, 0x1f, 0xeb, 0x7e, 0xa8, 0xeb, 0xdd, 0xc8, 0x79, 0x68, 0xb1, 0x3c, 0x5d, 0x37, 0xe8, 0xeb, 0x51, 0x5f, 0xd5, 0x15, 0xca, 0x5a, 0xd8, 0x37, 0xc4, 0x24, 0x38, 0x9d, 0x0b, 0x60, 0xfb, 0x06, 0x70, 0x20, 0xa4, 0x94, 0x2d, 0x3d, 0x4b, 0x6f, 0x3c, 0xe1, 0x77, 0x8b, 0x35, 0x42, 0x0b, 0x9d, 0xb1, 0xf8, 0xf3};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_348[] = { 0x8c, 0x43, 0x81, 0xf6, 0x1b, 0x04, 0x8c, 0x25, 0x8c, 0x4b, 0x30, 0x9e, 0x13, 0x2e, 0x21, 0x7b, 0xe9, 0x2e, 0x58, 0xf8, 0xc5, 0xa5, 0xdd, 0x15, 0x38, 0x7a, 0xfc, 0xfb, 0x10, 0xab, 0x9f, 0xaf, 0xde, 0xd9, 0xc2, 0xd1, 0xce, 0x48, 0x32, 0xc0};
    rng.instantiate(entropy_346, personalization_348, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_347, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12614 */
  {
    static const uint8_t entropy_349[] = { 0xa6, 0x74, 0x41, 0x7c, 0x5b, 0x05, 0x6b, 0x1a, 0x04, 0x71, 0x9f, 0xac, 0x10, 0x12, 0xfc, 0x42, 0x64, 0xb8, 0xc4, 0x43, 0x47, 0x86, 0xfb, 0xb3, 0xf3, 0x29, 0x0d, 0xd3, 0xb2, 0xc6, 0x2b, 0xba, 0x1d, 0x21, 0x88, 0x29, 0x2a, 0x8a, 0x82, 0x30};
    static const uint8_t returned_350[] = { 0xfe, 0xf3, 0xf3, 0x83, 0x72, 0x8a, 0x86, 0x8c, 0x90, 0x08, 0x3a, 0xce, 0x7b, 0x41, 0xe9, 0xd0, 0x55, 0xd2, 0x87, 0xe1, 0x0f, 0xad, 0x82, 0xc4, 0xae, 0x3f, 0xec, 0xe1, 0x8b, 0x5c, 0xa6, 0x7f, 0x29, 0x63, 0x88, 0x39, 0xe2, 0x41, 0xae, 0xc6, 0xda, 0xaa, 0x8c, 0xbf, 0x26, 0x30, 0xbe, 0x42, 0xe7, 0x3b, 0x24, 0x3a, 0x5e, 0x69, 0x7d, 0xd9, 0x03, 0x6f, 0xa9, 0x9d, 0x0e, 0xf3, 0x30, 0xdb};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_351[] = { 0x19, 0xaa, 0x3b, 0xbf, 0x14, 0x8b, 0x88, 0x07, 0xa7, 0xb3, 0x1e, 0xa8, 0xf0, 0xfa, 0x67, 0x0c, 0x68, 0x51, 0x7b, 0xb7, 0x81, 0xd9, 0xbe, 0xa5, 0x46, 0xce, 0x43, 0xa7, 0x07, 0x74, 0xb9, 0xa8, 0x15, 0xc3, 0xd6, 0xd5, 0xb6, 0x4c, 0x1e, 0x27};
    rng.instantiate(entropy_349, personalization_351, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_350, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12622 */
  {
    static const uint8_t entropy_352[] = { 0xde, 0x22, 0x98, 0x37, 0x31, 0x40, 0xa3, 0xe3, 0x76, 0x30, 0x22, 0xb6, 0xaa, 0x22, 0x50, 0x0e, 0x74, 0xb0, 0xd8, 0xc1, 0x63, 0x7f, 0x77, 0x8e, 0x14, 0x24, 0x0b, 0x2b, 0x23, 0xff, 0x65, 0xd5, 0x8e, 0xb3, 0xef, 0x42, 0x43, 0xbc, 0x40, 0x7b};
    static const uint8_t returned_353[] = { 0x28, 0x3a, 0x1b, 0x1f, 0x36, 0xcf, 0x5d, 0x65, 0x4a, 0x92, 0x66, 0xa8, 0x47, 0xf2, 0x45, 0x98, 0x5e, 0x8d, 0x40, 0x47, 0x3e, 0x6c, 0x9e, 0xfd, 0xcc, 0xe1, 0xba, 0xe3, 0x20, 0x18, 0x4e, 0x1b, 0x81, 0x70, 0x2e, 0xf0, 0x41, 0x28, 0x88, 0x8a, 0xdf, 0xc5, 0xb1, 0x42, 0xb8, 0xd0, 0xb1, 0xf2, 0xe6, 0xa1, 0x71, 0xb8, 0xd1, 0xa0, 0x79, 0x56, 0x19, 0x2d, 0x67, 0x1a, 0x9f, 0x55, 0x77, 0xe6};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_354[] = { 0x96, 0xfb, 0xc0, 0xe7, 0x51, 0x9f, 0xf5, 0xe3, 0x36, 0xad, 0x3b, 0x52, 0xf9, 0xd0, 0x29, 0x25, 0xee, 0xd5, 0xa5, 0xa2, 0xe0, 0x5f, 0xa5, 0x43, 0xd9, 0xaa, 0x3a, 0x10, 0x3a, 0x48, 0xf0, 0x55, 0x82, 0x02, 0x3a, 0xa1, 0xc3, 0x91, 0xc1, 0xc7};
    rng.instantiate(entropy_352, personalization_354, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_353, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12630 */
  {
    static const uint8_t entropy_355[] = { 0x7b, 0xc9, 0x2d, 0x09, 0x2d, 0x7c, 0x03, 0x08, 0x33, 0x1c, 0xa5, 0x7a, 0x1e, 0x8e, 0xf1, 0x3e, 0x92, 0x86, 0x7e, 0x74, 0x9d, 0xbe, 0x1b, 0xd7, 0x0e, 0x82, 0x2e, 0x39, 0x10, 0xd8, 0x97, 0x70, 0xfd, 0x72, 0x32, 0x25, 0x95, 0x40, 0x2f, 0x6f};
    static const uint8_t returned_356[] = { 0xe6, 0x07, 0xd5, 0x97, 0x77, 0x34, 0x49, 0x8f, 0xb3, 0x2d, 0x27, 0x42, 0x04, 0xe3, 0xc7, 0x88, 0xb1, 0x99, 0xf3, 0xec, 0xc6, 0x44, 0x5a, 0xfc, 0xea, 0x5a, 0x56, 0x4d, 0x86, 0xaf, 0xa5, 0x89, 0x14, 0xf6, 0xad, 0x36, 0xc4, 0x5f, 0xca, 0xec, 0x2f, 0xcb, 0x8b, 0x82, 0x56, 0x0d, 0x81, 0x47, 0x4b, 0xa3, 0x33, 0x8b, 0xa4, 0x7c, 0x1b, 0x7d, 0x94, 0xbf, 0x69, 0xb5, 0xcc, 0x55, 0x31, 0x80};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_357[] = { 0x74, 0x5f, 0x63, 0x68, 0xad, 0x6a, 0xf8, 0x15, 0x5a, 0x2d, 0x03, 0x26, 0xfc, 0x26, 0x08, 0x03, 0xbd, 0x43, 0xd4, 0x7e, 0x0d, 0x71, 0xed, 0x66, 0x18, 0xf5, 0xfe, 0x85, 0x21, 0x79, 0x88, 0x96, 0xe8, 0x3e, 0xd1, 0xac, 0xe8, 0xc8, 0x98, 0xf8};
    rng.instantiate(entropy_355, personalization_357, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_356, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12638 */
  {
    static const uint8_t entropy_358[] = { 0xaf, 0x9e, 0x55, 0x67, 0x75, 0x9f, 0x9f, 0x57, 0x0a, 0x5e, 0xcf, 0xc1, 0xb2, 0x12, 0x53, 0x03, 0x4f, 0xec, 0x65, 0x4e, 0x91, 0x36, 0x5d, 0x99, 0x02, 0x58, 0x5a, 0x18, 0x94, 0xd6, 0xb6, 0x33, 0x44, 0xd9, 0x5b, 0x6e, 0x88, 0xfd, 0x75, 0xb6};
    static const uint8_t returned_359[] = { 0x58, 0xa9, 0xeb, 0x36, 0x3c, 0xde, 0x49, 0xd7, 0x6c, 0x9e, 0xfa, 0x45, 0xfc, 0xdc, 0x4d, 0x01, 0x02, 0x92, 0xaa, 0x1f, 0x41, 0x30, 0x9e, 0xbc, 0xd7, 0xbc, 0xb7, 0x76, 0x47, 0x64, 0xcf, 0x1e, 0x39, 0xc3, 0xf2, 0x5d, 0x64, 0x0b, 0xdd, 0xae, 0x78, 0x57, 0x0f, 0xc6, 0x96, 0xf0, 0x41, 0x9c, 0x07, 0xa1, 0x97, 0x9b, 0xc3, 0xcb, 0xff, 0xc4, 0x58, 0x9f, 0x23, 0xbd, 0xa8, 0x96, 0xf6, 0x17};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_360[] = { 0xe6, 0x47, 0x86, 0x31, 0xbd, 0xcd, 0x52, 0x19, 0xa5, 0x16, 0x83, 0x91, 0x95, 0x24, 0x9c, 0xda, 0x75, 0x72, 0x4f, 0xd6, 0x31, 0x5c, 0xe3, 0x95, 0xd2, 0x10, 0xf4, 0x35, 0x01, 0x00, 0x94, 0xfa, 0x28, 0xd5, 0x08, 0xca, 0xfe, 0xfe, 0xcb, 0xab};
    rng.instantiate(entropy_358, personalization_360, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_359, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12646 */
  {
    static const uint8_t entropy_361[] = { 0xb1, 0xf6, 0x92, 0xd2, 0x4d, 0xa2, 0xf9, 0xed, 0x26, 0x4f, 0x3f, 0xc1, 0xb2, 0x39, 0x37, 0x19, 0x8d, 0xf7, 0x14, 0x05, 0xbf, 0xc9, 0xa6, 0xcc, 0xf2, 0x5c, 0xe3, 0x70, 0x9d, 0xe3, 0xb5, 0x33, 0x4a, 0x0f, 0x88, 0x5e, 0x2b, 0xae, 0xa4, 0xd7};
    static const uint8_t returned_362[] = { 0xcc, 0x5b, 0x65, 0xb7, 0x12, 0xd9, 0x6e, 0x83, 0x17, 0x2e, 0xb7, 0xe3, 0x0a, 0x22, 0xac, 0xfc, 0xc9, 0x96, 0x0a, 0x75, 0xa5, 0xf5, 0x04, 0x08, 0x26, 0x5b, 0x8b, 0xd8, 0x57, 0x11, 0xf9, 0xb6, 0xc2, 0xae, 0x08, 0xab, 0x1f, 0x33, 0x12, 0xcc, 0x58, 0xac, 0xff, 0xf5, 0xf4, 0x90, 0x1b, 0xcb, 0xba, 0xf4, 0xbe, 0xe0, 0x8f, 0x29, 0x89, 0xf1, 0x32, 0x4d, 0x91, 0xfc, 0x71, 0xdf, 0xb0, 0xf0};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_363[] = { 0x2b, 0x75, 0x08, 0xf8, 0x3b, 0xea, 0xd9, 0x00, 0xb0, 0x40, 0x24, 0xdb, 0xf8, 0x1a, 0xeb, 0xc0, 0x0e, 0x6a, 0x03, 0xc9, 0xb7, 0xd6, 0x0d, 0x83, 0xb0, 0x76, 0x6d, 0x31, 0x09, 0x63, 0x0d, 0xff, 0x15, 0x1d, 0xf1, 0x79, 0x75, 0x16, 0x49, 0x12};
    rng.instantiate(entropy_361, personalization_363, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_362, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12654 */
  {
    static const uint8_t entropy_364[] = { 0x14, 0xfe, 0x15, 0xd3, 0x5f, 0x4c, 0x97, 0xb6, 0xdd, 0xe6, 0xf0, 0xc1, 0x5e, 0x77, 0x48, 0x6c, 0xf8, 0xd6, 0xd2, 0x16, 0x4f, 0xd0, 0x93, 0x49, 0xd8, 0x3c, 0xb9, 0x6b, 0x6b, 0x2b, 0x9a, 0x9c, 0x4e, 0xb7, 0x46, 0x11, 0x72, 0xa9, 0x29, 0x09};
    static const uint8_t returned_365[] = { 0xff, 0xf1, 0x48, 0xe0, 0xf5, 0x77, 0xf9, 0x73, 0xe8, 0xed, 0x6e, 0x77, 0xbe, 0xd7, 0xa9, 0xa5, 0xbc, 0x6a, 0xd2, 0xda, 0x48, 0x91, 0x45, 0x13, 0xa2, 0xb4, 0xfc, 0x57, 0x3b, 0x99, 0x09, 0xf4, 0x58, 0x08, 0x68, 0x32, 0x87, 0x71, 0x75, 0x18, 0x15, 0xce, 0x7d, 0x5a, 0x20, 0x72, 0x60, 0x49, 0x9c, 0x76, 0x90, 0xbf, 0x44, 0x97, 0x96, 0xb1, 0x67, 0xc9, 0xdf, 0xae, 0x4d, 0xf2, 0x4f, 0x86};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_366[] = { 0x5b, 0xa3, 0x98, 0x63, 0x58, 0xb7, 0x30, 0x8d, 0x24, 0xac, 0x9f, 0x50, 0x2e, 0xe1, 0x00, 0x5b, 0x6a, 0x2a, 0x02, 0xca, 0xfc, 0x30, 0x2b, 0x1a, 0xf6, 0x96, 0x1d, 0x10, 0xb7, 0xd3, 0xf5, 0x2b, 0xa5, 0x03, 0x37, 0x9c, 0xe0, 0xb6, 0x72, 0xc1};
    rng.instantiate(entropy_364, personalization_366, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_365, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12662 */
  {
    static const uint8_t entropy_367[] = { 0xd6, 0xf4, 0x9e, 0x52, 0x6e, 0x35, 0xff, 0x25, 0x61, 0x62, 0xf1, 0x7c, 0xc9, 0xfa, 0xa9, 0x12, 0x63, 0x4f, 0x5e, 0xd9, 0x23, 0x1a, 0x7a, 0x0a, 0xf4, 0x7d, 0x59, 0x76, 0x6c, 0xd2, 0xbc, 0x83, 0xe8, 0xd4, 0x38, 0xe7, 0x02, 0x91, 0xb6, 0xb8};
    static const uint8_t returned_368[] = { 0x1f, 0x34, 0xb7, 0x1b, 0x51, 0x5b, 0x3e, 0x6a, 0xa6, 0x7e, 0x45, 0xca, 0xc0, 0x0d, 0x1d, 0x70, 0xe1, 0x9c, 0x03, 0xb7, 0x28, 0xd0, 0x00, 0x13, 0x10, 0x9b, 0x5d, 0x98, 0x11, 0xee, 0x90, 0xeb, 0x7c, 0xf5, 0x01, 0xc9, 0x32, 0x65, 0xce, 0x7f, 0x80, 0xa8, 0x16, 0xc4, 0xd1, 0x0a, 0x57, 0x25, 0x0c, 0x08, 0x2f, 0xc4, 0x98, 0x50, 0xa2, 0x69, 0x15, 0x20, 0x59, 0x80, 0x84, 0xe3, 0x4f, 0x07};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_369[] = { 0x02, 0xd1, 0xf3, 0xa6, 0xc2, 0x0f, 0xb7, 0xc9, 0x07, 0xce, 0x6d, 0x82, 0x2d, 0xc3, 0x6b, 0x7c, 0xe1, 0x7e, 0x1c, 0x71, 0xa3, 0x07, 0xd1, 0xec, 0x24, 0x06, 0xdf, 0xeb, 0x45, 0x8f, 0xa0, 0xe8, 0xf2, 0x7c, 0x1c, 0x39, 0xae, 0x6d, 0xbc, 0x65};
    rng.instantiate(entropy_367, personalization_369, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_368, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12670 */
  {
    static const uint8_t entropy_370[] = { 0x53, 0x94, 0x5c, 0x28, 0x4c, 0x47, 0x14, 0x0b, 0xc5, 0x3f, 0x90, 0x88, 0xa5, 0xf0, 0xfd, 0x25, 0x2e, 0x83, 0xca, 0x50, 0xb7, 0x8f, 0xd7, 0x39, 0xe0, 0x54, 0x52, 0xc5, 0x0d, 0xcc, 0x39, 0xf2, 0x15, 0x25, 0x6d, 0x2d, 0xe0, 0xda, 0xd0, 0xd9};
    static const uint8_t returned_371[] = { 0x42, 0xb0, 0x0b, 0x0b, 0xb3, 0xee, 0x68, 0x44, 0x6b, 0x10, 0x28, 0xc5, 0x9a, 0x00, 0x90, 0x9b, 0xd1, 0xdc, 0xf3, 0xed, 0x67, 0x54, 0x56, 0x52, 0xe4, 0x26, 0x6e, 0x8e, 0xbb, 0x06, 0x40, 0x8e, 0x40, 0xd2, 0x0e, 0x2d, 0xa9, 0x4c, 0x34, 0x92, 0xd6, 0x3e, 0x33, 0x27, 0x19, 0x3d, 0x54, 0x81, 0x33, 0xad, 0xe2, 0xb5, 0x22, 0xde, 0x9f, 0xb0, 0xe2, 0x3f, 0x41, 0xd5, 0xee, 0x74, 0x91, 0x24};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_372[] = { 0x37, 0x61, 0x40, 0x61, 0x05, 0xbf, 0x94, 0x1f, 0xe1, 0xd9, 0x80, 0x03, 0xdb, 0x68, 0xd4, 0x13, 0x26, 0x04, 0xab, 0x59, 0x83, 0x6b, 0x81, 0xae, 0x15, 0x60, 0xab, 0xe0, 0xbf, 0x8f, 0x4d, 0xde, 0x22, 0xb6, 0xf4, 0xe9, 0x8e, 0x52, 0x31, 0xf2};
    rng.instantiate(entropy_370, personalization_372, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_371, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12678 */
  {
    static const uint8_t entropy_373[] = { 0x0a, 0xc6, 0x27, 0x69, 0x2b, 0x28, 0xd3, 0x1e, 0x34, 0x71, 0x79, 0xc8, 0xee, 0x9e, 0x50, 0x8e, 0x2b, 0x3f, 0xfb, 0xed, 0xae, 0x40, 0x09, 0x41, 0x4b, 0x3b, 0x72, 0xe7, 0x6a, 0x37, 0x39, 0xf0, 0x29, 0x27, 0x8a, 0xd1, 0x5d, 0xc1, 0xc9, 0x45};
    static const uint8_t returned_374[] = { 0x00, 0x00, 0x7f, 0x40, 0x7f, 0x75, 0x33, 0x5a, 0x35, 0x1d, 0x31, 0xd2, 0x75, 0x43, 0x66, 0xf8, 0xf2, 0x20, 0xef, 0x2f, 0x96, 0x88, 0xa8, 0x7e, 0x9d, 0x6a, 0xac, 0x59, 0xfa, 0x9f, 0x36, 0xbe, 0x82, 0x4b, 0x9b, 0xc7, 0x40, 0x9e, 0xa9, 0x91, 0xd3, 0xe0, 0xa7, 0xc4, 0x11, 0x85, 0x4b, 0x37, 0x01, 0xc8, 0x4a, 0xbd, 0xd7, 0xa6, 0x96, 0x40, 0x6d, 0xd1, 0x33, 0x31, 0xe2, 0x78, 0x54, 0x55};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_375[] = { 0x94, 0x6f, 0xb7, 0xe5, 0xc3, 0xcb, 0xf3, 0xd1, 0x98, 0xf1, 0x91, 0x35, 0xb1, 0xa7, 0x1a, 0x24, 0x1e, 0xe8, 0x92, 0xac, 0x5a, 0x03, 0x16, 0xf5, 0x7e, 0xae, 0x70, 0x76, 0xa4, 0xd9, 0x9b, 0xf0, 0xe7, 0x7f, 0xe2, 0x3e, 0x81, 0x25, 0x8c, 0xca};
    rng.instantiate(entropy_373, personalization_375, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_374, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12822 */
  {
    static const uint8_t entropy_376[] = { 0x0a, 0x3e, 0x45, 0xd9, 0x2c, 0xa0, 0x0e, 0x1f, 0x65, 0x3e, 0x0f, 0x6b, 0x24, 0x6c, 0xa6, 0xfc, 0xda, 0x82, 0x6f, 0x3d, 0x7a, 0x8b, 0xc6, 0x93, 0x73, 0xd1, 0xf4, 0x58, 0x40, 0x8b, 0xf2, 0x98, 0x99, 0x85, 0xc8, 0x9c, 0x2d, 0x03, 0x9b, 0x4d};
    static const uint8_t returned_377[] = { 0x00, 0xee, 0xd8, 0x60, 0x01, 0x9b, 0x5a, 0x23, 0xb5, 0xd2, 0xf5, 0xa1, 0xe1, 0x9c, 0xcc, 0xf4, 0x71, 0xf1, 0xee, 0x35, 0x84, 0x45, 0x01, 0xca, 0xf0, 0xb2, 0xef, 0xdd, 0xdd, 0x69, 0xee, 0xd7, 0x14, 0x7a, 0x03, 0x48, 0xb2, 0x22, 0xb3, 0x6e, 0x0e, 0xe3, 0x87, 0x90, 0xaf, 0xe3, 0xb9, 0x25, 0x4b, 0x65, 0xfe, 0x9c, 0x09, 0xb9, 0x0e, 0xec, 0x33, 0x69, 0xff, 0x5c, 0x66, 0x63, 0x4e, 0x0c};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_376, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_377, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12830 */
  {
    static const uint8_t entropy_378[] = { 0x2c, 0x75, 0xf9, 0x24, 0x3a, 0x85, 0x92, 0x1c, 0x5d, 0xb7, 0xff, 0xdb, 0x7a, 0x27, 0xe5, 0xf6, 0x8b, 0x71, 0xc1, 0x76, 0x97, 0x3b, 0x78, 0x1b, 0xa1, 0x6d, 0xa1, 0x46, 0x95, 0xbc, 0x4e, 0x81, 0x4e, 0xa0, 0x7b, 0xd2, 0xc7, 0xf4, 0x24, 0x31};
    static const uint8_t returned_379[] = { 0x9d, 0xdf, 0x7e, 0x53, 0x2f, 0x2e, 0x9f, 0x4b, 0xce, 0xb9, 0x81, 0x73, 0x93, 0x1d, 0xef, 0x69, 0xa3, 0x5f, 0x44, 0x6e, 0xad, 0x44, 0xbd, 0xe3, 0x17, 0x6d, 0x8f, 0xb8, 0x17, 0x0d, 0xf6, 0xfe, 0x49, 0x6b, 0x12, 0xe6, 0x40, 0xb6, 0x41, 0x81, 0x0d, 0xcb, 0xea, 0x1a, 0x84, 0x42, 0xc5, 0x03, 0xce, 0x23, 0x89, 0x39, 0xa0, 0xd1, 0x99, 0x69, 0x1d, 0xc9, 0xba, 0xaf, 0xca, 0x4c, 0xd4, 0x46};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_378, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_379, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12838 */
  {
    static const uint8_t entropy_380[] = { 0xe3, 0x28, 0xe0, 0x30, 0xbb, 0xb4, 0xb9, 0xef, 0x5a, 0x7e, 0x91, 0xec, 0x66, 0x3e, 0x61, 0xa8, 0x8f, 0xef, 0x4d, 0xf9, 0x37, 0x5a, 0x07, 0x78, 0x89, 0xda, 0xfa, 0x7f, 0x19, 0xc8, 0x78, 0x02, 0x8e, 0x9d, 0xc4, 0x29, 0x02, 0x0c, 0x9a, 0xd9};
    static const uint8_t returned_381[] = { 0x1e, 0x5d, 0x47, 0x99, 0x14, 0xf9, 0x4b, 0xdf, 0x19, 0x94, 0x78, 0x6b, 0x55, 0xad, 0x05, 0x58, 0x31, 0x8f, 0xeb, 0xd0, 0xca, 0xf2, 0x54, 0xdc, 0x3b, 0x44, 0x70, 0xf2, 0xaf, 0x01, 0xa6, 0xb1, 0x8d, 0x01, 0xe0, 0x93, 0xbf, 0xbe, 0x84, 0x80, 0x7b, 0x7f, 0x28, 0x91, 0x8a, 0xec, 0xdb, 0x8f, 0x0f, 0x58, 0x24, 0xdd, 0x98, 0x27, 0xbb, 0x76, 0x05, 0xbd, 0xbd, 0x81, 0xee, 0x47, 0xe4, 0x8f};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_380, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_381, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12846 */
  {
    static const uint8_t entropy_382[] = { 0xf6, 0x0d, 0x85, 0xc8, 0x8e, 0x8d, 0x61, 0xd6, 0x7f, 0x8a, 0xb1, 0x4d, 0xfd, 0x10, 0xe1, 0xda, 0x11, 0xf5, 0x9c, 0x90, 0xfd, 0x87, 0x68, 0xad, 0xeb, 0xb9, 0xa3, 0x5b, 0xbe, 0x6e, 0xbe, 0xa1, 0x44, 0xb7, 0x1f, 0x99, 0x0a, 0x7f, 0x01, 0x1f};
    static const uint8_t returned_383[] = { 0x4b, 0x66, 0x69, 0x12, 0x88, 0x35, 0x06, 0x33, 0x12, 0x85, 0x97, 0xb2, 0x45, 0xb2, 0xe9, 0xcc, 0x7e, 0xfc, 0xcd, 0x84, 0x72, 0xfd, 0xd0, 0xaa, 0xb0, 0x8e, 0xdb, 0x01, 0x25, 0xb2, 0x2b, 0x4e, 0xd8, 0xb3, 0x3a, 0x50, 0x2a, 0xca, 0x88, 0xc3, 0x53, 0xb9, 0x00, 0xe1, 0xc4, 0x30, 0x87, 0x59, 0x93, 0xae, 0xc1, 0x49, 0x98, 0xa7, 0x88, 0x47, 0xaa, 0x27, 0x7d, 0xbb, 0x51, 0x5e, 0xd6, 0x0b};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_382, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_383, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12854 */
  {
    static const uint8_t entropy_384[] = { 0x34, 0xdd, 0xfd, 0x1a, 0xcb, 0xf3, 0x48, 0xe1, 0x7e, 0x7b, 0x5e, 0x13, 0x39, 0x13, 0xa6, 0x89, 0xcd, 0xc2, 0x4e, 0x6d, 0x46, 0x80, 0x1d, 0x70, 0xcc, 0xac, 0x49, 0xec, 0x30, 0xd8, 0xc5, 0x8f, 0xcc, 0x3a, 0xeb, 0x9f, 0x45, 0x70, 0x0e, 0x05};
    static const uint8_t returned_385[] = { 0xcb, 0x4e, 0x1f, 0x9c, 0x60, 0x13, 0x70, 0xa2, 0x3c, 0x78, 0xe7, 0xfc, 0x33, 0xdd, 0x61, 0x9c, 0xb6, 0x17, 0x42, 0x78, 0x2b, 0x75, 0x6c, 0x8c, 0xf9, 0x79, 0xae, 0x46, 0xa7, 0xd7, 0x51, 0x58, 0xaf, 0x70, 0x6a, 0x03, 0x63, 0x1d, 0xbf, 0x7b, 0x17, 0x11, 0xcc, 0xd6, 0xaa, 0xe6, 0x0e, 0x78, 0x5f, 0xff, 0x42, 0x12, 0x1c, 0xa7, 0x56, 0xe8, 0x26, 0x00, 0x75, 0xfc, 0x27, 0xc3, 0x90, 0x43};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_384, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_385, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12862 */
  {
    static const uint8_t entropy_386[] = { 0x00, 0xd9, 0x70, 0xb9, 0x3b, 0xee, 0xcf, 0x7f, 0x9c, 0x64, 0xda, 0xcd, 0x11, 0xd4, 0xce, 0xba, 0xde, 0x39, 0x56, 0x24, 0x22, 0xf0, 0x47, 0x14, 0x67, 0xfc, 0x22, 0x4c, 0xa3, 0x70, 0xf4, 0x65, 0xb7, 0x69, 0xbb, 0x25, 0x02, 0x49, 0xf2, 0x1e};
    static const uint8_t returned_387[] = { 0xc4, 0xd3, 0xb5, 0xd4, 0x5a, 0x9b, 0x65, 0xe8, 0x52, 0x88, 0xb7, 0x7b, 0x78, 0x0a, 0x66, 0x58, 0xdf, 0x86, 0x22, 0x7b, 0x8d, 0x38, 0x11, 0xbf, 0x71, 0x02, 0x18, 0xb6, 0x7a, 0x58, 0x8b, 0x2b, 0x72, 0xe9, 0x54, 0x5f, 0xc7, 0x0a, 0xcd, 0x76, 0x25, 0xd2, 0xc4, 0xb3, 0x62, 0x72, 0x5d, 0xe4, 0x5e, 0x83, 0x3e, 0xf4, 0xb1, 0xe1, 0x13, 0xf5, 0xee, 0x59, 0x75, 0x3d, 0xb5, 0xad, 0x74, 0xa0};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_386, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_387, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12870 */
  {
    static const uint8_t entropy_388[] = { 0x24, 0x11, 0x49, 0x53, 0x02, 0xfb, 0x00, 0xcb, 0xab, 0x99, 0xd1, 0xfb, 0x14, 0xdf, 0x40, 0x2c, 0x8e, 0x66, 0xd7, 0x87, 0xdd, 0x52, 0x7c, 0x46, 0x40, 0xa6, 0x74, 0xcb, 0xf7, 0xff, 0xd1, 0x96, 0x7d, 0x7f, 0x69, 0xd2, 0x78, 0x5d, 0xda, 0x01};
    static const uint8_t returned_389[] = { 0x67, 0x9c, 0x87, 0x96, 0x91, 0x9e, 0x10, 0xce, 0x44, 0x66, 0xe7, 0xe4, 0x49, 0xf7, 0x65, 0xdf, 0x82, 0x1b, 0x06, 0xa9, 0x7a, 0xc5, 0xb3, 0xc8, 0xf5, 0xa1, 0x6f, 0xdc, 0x66, 0x6f, 0x4b, 0x19, 0xdd, 0xda, 0x66, 0x0b, 0xfc, 0xf7, 0x8f, 0x5f, 0x5e, 0x39, 0xa6, 0xb6, 0xf2, 0x6a, 0x22, 0x38, 0xc9, 0xaf, 0xf6, 0x98, 0x50, 0xcf, 0xaf, 0x6d, 0x87, 0x82, 0x85, 0x1f, 0x62, 0xf1, 0x86, 0x84};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_388, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_389, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12878 */
  {
    static const uint8_t entropy_390[] = { 0xf4, 0xe8, 0x5a, 0xc5, 0x45, 0x3f, 0x16, 0xee, 0x6e, 0x26, 0x87, 0x89, 0xe6, 0xf8, 0x1e, 0xe6, 0x71, 0x91, 0xf1, 0xfc, 0xc9, 0xc7, 0x6e, 0xc3, 0x54, 0x36, 0x30, 0xac, 0x17, 0x71, 0x3f, 0x70, 0xe0, 0x0b, 0x6c, 0x54, 0xf6, 0x3f, 0x9f, 0xe5};
    static const uint8_t returned_391[] = { 0xc3, 0x59, 0xfc, 0x26, 0xe8, 0x8d, 0xc6, 0x34, 0x11, 0xab, 0xa0, 0x0a, 0xed, 0xcf, 0xbc, 0x92, 0x8f, 0x70, 0x2a, 0xb2, 0x38, 0xa9, 0x9b, 0xaf, 0xe8, 0xdd, 0x30, 0xf3, 0x80, 0x30, 0xe6, 0xd9, 0xa3, 0x61, 0xb5, 0x6c, 0xe3, 0x4c, 0xe4, 0x23, 0x0e, 0xa5, 0x75, 0x17, 0x82, 0xf2, 0x93, 0x82, 0xcc, 0x67, 0x3b, 0xad, 0xb1, 0xf6, 0xe7, 0x18, 0x3b, 0x08, 0x18, 0x04, 0x32, 0x45, 0x40, 0xc0};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_390, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_391, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12886 */
  {
    static const uint8_t entropy_392[] = { 0x97, 0xf8, 0x6f, 0x72, 0x79, 0xa4, 0x17, 0xba, 0x7e, 0x65, 0x5b, 0x8c, 0x89, 0x57, 0x62, 0x6f, 0x25, 0x5c, 0x88, 0x40, 0xed, 0x0e, 0x7e, 0xac, 0xbf, 0xef, 0xcb, 0x3a, 0x6e, 0xe2, 0x41, 0xe4, 0x42, 0x46, 0x15, 0x42, 0x07, 0x5b, 0xe9, 0x72};
    static const uint8_t returned_393[] = { 0xa5, 0x8a, 0xb9, 0xad, 0xf4, 0x3a, 0x2e, 0xfa, 0x9b, 0xa0, 0x92, 0x54, 0x23, 0x60, 0xb5, 0x47, 0xfd, 0x77, 0x55, 0xa9, 0xf5, 0x8c, 0xcf, 0x95, 0x3a, 0x5e, 0x92, 0xc8, 0xd1, 0x4a, 0x81, 0x64, 0x2e, 0x3d, 0x9f, 0x61, 0xa2, 0x14, 0x3f, 0x3c, 0x95, 0x0a, 0x89, 0x45, 0x3b, 0xa5, 0x8c, 0x39, 0x96, 0x07, 0xcc, 0x3a, 0x45, 0x2b, 0xaa, 0x4d, 0x9a, 0x5f, 0x56, 0x01, 0x39, 0x90, 0x1c, 0xca};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_392, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_393, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12894 */
  {
    static const uint8_t entropy_394[] = { 0x4a, 0x7e, 0x87, 0x52, 0xf8, 0x66, 0xf6, 0x12, 0x15, 0x38, 0xe4, 0x8f, 0x84, 0x5d, 0xe5, 0xd4, 0xd9, 0x88, 0x6b, 0xe3, 0x7c, 0x05, 0x83, 0xfc, 0xfc, 0x20, 0x0a, 0xde, 0xe0, 0x67, 0x91, 0xa4, 0x93, 0xc0, 0x57, 0x1f, 0xb6, 0x18, 0x46, 0xf6};
    static const uint8_t returned_395[] = { 0xe7, 0x06, 0xe2, 0xf5, 0x9c, 0xcb, 0xb6, 0x8a, 0xbe, 0xd1, 0x62, 0x90, 0x33, 0x33, 0xc7, 0xab, 0xc4, 0x14, 0x4b, 0xc3, 0xf6, 0x5a, 0x3c, 0x75, 0x6a, 0xd6, 0xd0, 0xe4, 0x07, 0x8d, 0x95, 0x9d, 0x80, 0x84, 0x0e, 0x12, 0x50, 0xfc, 0x69, 0x10, 0x74, 0xad, 0xcb, 0x52, 0x03, 0x75, 0x75, 0x5c, 0x26, 0xd5, 0x44, 0xa4, 0xaf, 0xae, 0x3a, 0xed, 0x35, 0x7b, 0xe9, 0xeb, 0x24, 0x4f, 0xae, 0xb1};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_394, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_395, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12902 */
  {
    static const uint8_t entropy_396[] = { 0xb2, 0xa0, 0x2a, 0x26, 0xde, 0xc8, 0x81, 0x67, 0x28, 0x53, 0xec, 0xa2, 0x67, 0x1c, 0xfb, 0xa6, 0x11, 0x5c, 0x4d, 0x5a, 0x6d, 0x39, 0xad, 0x55, 0x73, 0xa2, 0x90, 0x53, 0xe8, 0x7f, 0xb5, 0x72, 0x15, 0xe8, 0x19, 0x57, 0xd9, 0xe5, 0xe3, 0x0f};
    static const uint8_t returned_397[] = { 0x87, 0x20, 0xf7, 0x34, 0x92, 0xc6, 0xd6, 0x3f, 0x8e, 0x94, 0xa2, 0x4c, 0x81, 0x75, 0x74, 0x58, 0x3d, 0x3b, 0xfe, 0x78, 0x3b, 0x27, 0xdf, 0x8e, 0xb6, 0xd7, 0xd3, 0x0f, 0x2c, 0x65, 0xd6, 0xa0, 0xfb, 0x53, 0x17, 0x3a, 0x47, 0x37, 0xf2, 0xce, 0x30, 0x55, 0x02, 0x85, 0x0d, 0xa8, 0xc3, 0x01, 0x78, 0x50, 0xf7, 0x04, 0x58, 0x5d, 0x87, 0x86, 0x0d, 0xa1, 0xcf, 0xd5, 0x0a, 0xf2, 0x72, 0x5d};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_396, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_397, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12910 */
  {
    static const uint8_t entropy_398[] = { 0x97, 0x25, 0x59, 0x9c, 0x6b, 0x24, 0x6e, 0x22, 0xfb, 0x81, 0xcf, 0x9e, 0x46, 0x80, 0xe1, 0x0f, 0x0b, 0x5f, 0x08, 0x40, 0xd8, 0x41, 0xf9, 0x9a, 0x6f, 0xae, 0xfe, 0xd9, 0x87, 0x06, 0x3b, 0x24, 0x9d, 0xab, 0x1c, 0xda, 0x59, 0x64, 0x2a, 0xeb};
    static const uint8_t returned_399[] = { 0x19, 0x51, 0x5e, 0xac, 0x64, 0x4a, 0x70, 0x61, 0x9a, 0x17, 0x24, 0x9d, 0x61, 0x8d, 0xad, 0x87, 0x5a, 0x29, 0x4c, 0xb3, 0xe5, 0x9a, 0xc8, 0xdc, 0x73, 0x6a, 0xa7, 0x22, 0xbd, 0xf7, 0x1c, 0x6e, 0x6a, 0xad, 0x53, 0x8e, 0x85, 0xcd, 0xb0, 0x77, 0x18, 0x5f, 0x40, 0x32, 0xe1, 0x8d, 0xbf, 0xf4, 0x3b, 0x91, 0x49, 0x93, 0x5b, 0x08, 0x38, 0xbf, 0x9e, 0x2c, 0x08, 0x42, 0x73, 0x03, 0x87, 0xaa};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_398, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_399, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12918 */
  {
    static const uint8_t entropy_400[] = { 0xd5, 0x35, 0x67, 0xfd, 0x91, 0xff, 0x24, 0xe8, 0x56, 0x5a, 0x79, 0xfd, 0xf7, 0xf8, 0x15, 0x16, 0x26, 0x1f, 0x03, 0xbd, 0x7e, 0x5a, 0x45, 0xaf, 0xd5, 0x0c, 0x7a, 0xbd, 0xc8, 0x63, 0x0b, 0x45, 0x2e, 0xac, 0xe6, 0x49, 0xe4, 0x18, 0xa6, 0x87};
    static const uint8_t returned_401[] = { 0x06, 0x4f, 0xa6, 0xa5, 0x2c, 0x4a, 0x5e, 0x89, 0xf4, 0xb4, 0xd0, 0x43, 0x66, 0x24, 0xfd, 0x40, 0x3e, 0x84, 0x9c, 0x10, 0xf2, 0xc0, 0x77, 0x8f, 0x5d, 0x81, 0xc7, 0x9a, 0x71, 0x9d, 0x1b, 0x4b, 0x68, 0x00, 0xd9, 0xcf, 0x1d, 0x60, 0x19, 0xb5, 0x7e, 0xf2, 0xa9, 0xe3, 0x60, 0x47, 0xef, 0x47, 0x37, 0x95, 0x53, 0xff, 0xf5, 0x4d, 0xb4, 0xfb, 0xa0, 0x46, 0xb1, 0x9d, 0xf7, 0x89, 0x0c, 0x26};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_400, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_401, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12926 */
  {
    static const uint8_t entropy_402[] = { 0x3f, 0x88, 0x05, 0xf4, 0x5c, 0x57, 0x45, 0x5f, 0xcd, 0xda, 0xad, 0x83, 0x88, 0x54, 0x3c, 0xe3, 0x69, 0xf0, 0xe3, 0x57, 0xa6, 0x2b, 0xbe, 0x40, 0xb0, 0x4a, 0x19, 0x90, 0x61, 0x51, 0x46, 0x38, 0xdc, 0x51, 0x40, 0x9b, 0x9e, 0x4a, 0xca, 0x6d};
    static const uint8_t returned_403[] = { 0xba, 0x66, 0x49, 0xf5, 0x27, 0xef, 0x2d, 0x09, 0xca, 0xcf, 0x92, 0x6d, 0x81, 0xab, 0xd4, 0x56, 0xd4, 0xb4, 0x38, 0x00, 0xdb, 0xf7, 0x7d, 0xe6, 0x9b, 0xb9, 0xe2, 0x22, 0x9c, 0xb6, 0xe3, 0xac, 0x29, 0xc7, 0xc3, 0xd6, 0xb5, 0xf7, 0x22, 0xd6, 0xd6, 0x69, 0x3b, 0xdc, 0x99, 0xd0, 0xf9, 0xaf, 0xfa, 0x78, 0x85, 0x04, 0x18, 0x19, 0xcd, 0x43, 0xe3, 0x07, 0xf8, 0xaa, 0x41, 0x8f, 0xc3, 0x1c};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_402, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_403, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:12934 */
  {
    static const uint8_t entropy_404[] = { 0x62, 0xef, 0xa3, 0x59, 0xeb, 0xd3, 0x1d, 0x3c, 0x49, 0x93, 0x53, 0xa5, 0xab, 0x5f, 0x3b, 0x70, 0xa3, 0x4c, 0x5f, 0x39, 0xc5, 0x08, 0x23, 0x1e, 0xae, 0x5f, 0x3e, 0xe2, 0x0e, 0x17, 0x83, 0x4b, 0x88, 0xfb, 0x80, 0x4a, 0x32, 0xa2, 0x68, 0xa1};
    static const uint8_t returned_405[] = { 0x20, 0xdb, 0xd7, 0x57, 0x31, 0x72, 0x20, 0xa9, 0xa5, 0xb2, 0x39, 0x4b, 0x49, 0x5e, 0xfe, 0x5e, 0x12, 0xcc, 0x7b, 0x75, 0x9c, 0x87, 0x7b, 0xfe, 0xed, 0x64, 0x25, 0xcd, 0x64, 0x14, 0x6e, 0xe9, 0x0c, 0x45, 0x5c, 0x50, 0xb2, 0x24, 0x39, 0x72, 0xb4, 0x30, 0x15, 0xf6, 0x9a, 0x01, 0x5f, 0x1a, 0x49, 0x53, 0xe8, 0x4a, 0x08, 0x9d, 0x38, 0x17, 0x1f, 0x9a, 0x6f, 0xd4, 0x7b, 0x8d, 0x48, 0x70};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_404, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_405, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13078 */
  {
    static const uint8_t entropy_406[] = { 0xbe, 0x69, 0x0e, 0x78, 0x91, 0xa5, 0x04, 0xbc, 0xe0, 0x31, 0x6d, 0x6f, 0x82, 0x12, 0x5f, 0xc9, 0x24, 0x2e, 0x71, 0xf7, 0xdb, 0xb7, 0x77, 0x4f, 0x46, 0x5b, 0x03, 0x81, 0xa3, 0x19, 0xb6, 0xdc, 0x96, 0x5c, 0xdd, 0xb8, 0xb9, 0x29, 0xf7, 0x3e};
    static const uint8_t returned_407[] = { 0x4c, 0xce, 0x78, 0xb1, 0x37, 0xeb, 0xad, 0xde, 0x86, 0x42, 0xed, 0x27, 0x12, 0xfb, 0x6a, 0x80, 0xb6, 0x34, 0x48, 0x5a, 0x6c, 0x1d, 0xc4, 0xc9, 0x3e, 0xf3, 0x0d, 0x1a, 0x06, 0xf4, 0x01, 0xa0, 0xf8, 0x39, 0x61, 0x5d, 0xd7, 0x55, 0xef, 0xce, 0x00, 0xba, 0x33, 0x3b, 0xe0, 0xf8, 0x02, 0xe6, 0x26, 0xbc, 0x8f, 0x1f, 0xc9, 0x64, 0x9c, 0xbc, 0x16, 0x8f, 0xe8, 0x66, 0xd4, 0xd1, 0x42, 0x29};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_408[] = { 0x3d, 0xd8, 0x50, 0xef, 0xe8, 0x90, 0xdf, 0x5a, 0x26, 0xec, 0x51, 0x05, 0x38, 0xf6, 0x37, 0x65, 0x21, 0x27, 0x4b, 0x05, 0xe7, 0xbc, 0x31, 0xa3, 0xad, 0x23, 0xcd, 0x00, 0x0d, 0x3f, 0x76, 0x0b, 0x16, 0x42, 0x4c, 0xd2, 0x57, 0xb9, 0x6a, 0x91};
    rng.instantiate(entropy_406, personalization_408, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_407, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13086 */
  {
    static const uint8_t entropy_409[] = { 0x3b, 0x95, 0x9b, 0xaa, 0xc2, 0x0b, 0x21, 0x73, 0x92, 0xbc, 0xcc, 0xb2, 0x7d, 0xc5, 0xcd, 0xa5, 0xc7, 0x59, 0x26, 0xb5, 0x7d, 0xd0, 0xda, 0x25, 0xc2, 0x07, 0xa0, 0xcf, 0x30, 0x8c, 0x38, 0x51, 0x62, 0xba, 0x7b, 0x5e, 0x87, 0xbd, 0xba, 0xf2};
    static const uint8_t returned_410[] = { 0x86, 0xc5, 0x17, 0xd9, 0xe9, 0x2e, 0x64, 0x5a, 0xa2, 0x18, 0x7f, 0xbb, 0x34, 0xc6, 0x74, 0xdc, 0xb7, 0x9a, 0x43, 0xad, 0x25, 0x70, 0xf9, 0xe9, 0x45, 0xd9, 0x6e, 0xe7, 0x6d, 0x83, 0xfd, 0x36, 0xb3, 0x5c, 0x46, 0x0f, 0x54, 0x4a, 0x8e, 0x3f, 0x00, 0x15, 0x0d, 0x12, 0x9c, 0xd5, 0x02, 0xe4, 0xd3, 0xee, 0x3a, 0x77, 0x2a, 0x1a, 0x3a, 0x7b, 0xc5, 0x9d, 0x0a, 0x52, 0x1b, 0xf8, 0xa0, 0xb7};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_411[] = { 0x8a, 0x9a, 0x56, 0x49, 0xf9, 0x2c, 0x0f, 0xe1, 0x92, 0xd4, 0xb6, 0x44, 0x8d, 0x06, 0x6a, 0x00, 0x63, 0x72, 0xe2, 0x4c, 0xdf, 0x1d, 0xe8, 0x42, 0x77, 0xd7, 0xb3, 0xf1, 0x69, 0x3c, 0x3f, 0x8f, 0x70, 0xd1, 0x08, 0x8d, 0x17, 0x22, 0x6f, 0x44};
    rng.instantiate(entropy_409, personalization_411, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_410, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13094 */
  {
    static const uint8_t entropy_412[] = { 0xa0, 0xca, 0xa2, 0xfe, 0xf5, 0x56, 0x79, 0x91, 0x7e, 0x5a, 0x27, 0x24, 0x5e, 0xeb, 0x54, 0x5a, 0x7a, 0xe9, 0x8f, 0x3d, 0x2b, 0x45, 0x4d, 0xae, 0xb7, 0x00, 0xf9, 0xf3, 0x05, 0x6c, 0x8b, 0x2f, 0x4a, 0x5b, 0xce, 0x17, 0x4e, 0x60, 0xe4, 0x1e};
    static const uint8_t returned_413[] = { 0x34, 0x6e, 0xe8, 0x6c, 0xc8, 0xea, 0x99, 0x04, 0xca, 0x2c, 0x1c, 0x2c, 0x61, 0xf1, 0xcd, 0xf7, 0x34, 0xd6, 0x9c, 0xff, 0xb1, 0x46, 0x07, 0x3a, 0xb8, 0xb5, 0xe6, 0x68, 0xad, 0x58, 0x9d, 0x63, 0xb3, 0x22, 0xb8, 0x10, 0xad, 0x4c, 0x87, 0xef, 0x66, 0xb9, 0x17, 0x75, 0x33, 0xd8, 0x14, 0xa9, 0xd4, 0xf6, 0x5e, 0x1f, 0x1d, 0x5b, 0x14, 0x30, 0x77, 0x31, 0xcd, 0xa2, 0xc5, 0x1d, 0x90, 0x14};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_414[] = { 0x26, 0x03, 0x31, 0x3a, 0xce, 0x04, 0xdc, 0x1c, 0x8e, 0x7d, 0x90, 0xe9, 0x91, 0x1d, 0xb1, 0x32, 0x65, 0x60, 0xb3, 0x55, 0x6a, 0xe8, 0x1f, 0x6b, 0xf7, 0x9a, 0x5a, 0x76, 0x1b, 0x2a, 0xf2, 0x70, 0x35, 0x87, 0x5f, 0xbc, 0x9a, 0xe6, 0x02, 0xb4};
    rng.instantiate(entropy_412, personalization_414, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_413, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13102 */
  {
    static const uint8_t entropy_415[] = { 0xeb, 0xd5, 0x35, 0x90, 0x4c, 0x3d, 0xc5, 0x0d, 0x29, 0x4a, 0x7d, 0x46, 0x22, 0xd5, 0xfc, 0x8d, 0x11, 0x45, 0x3e, 0xaa, 0x47, 0x64, 0x09, 0x0f, 0xc5, 0xb5, 0x32, 0xe7, 0x65, 0xdf, 0x70, 0x2f, 0xe9, 0x40, 0xc7, 0xaf, 0xc6, 0x11, 0x11, 0x59};
    static const uint8_t returned_416[] = { 0x2e, 0x52, 0xdf, 0xdf, 0x1e, 0xd5, 0x53, 0x2a, 0x69, 0x8a, 0xc1, 0x0a, 0x73, 0x4a, 0x65, 0x2c, 0x8c, 0x73, 0x5c, 0x70, 0x00, 0x27, 0x63, 0x90, 0x70, 0xb0, 0x0a, 0xfd, 0x0b, 0x1c, 0x1c, 0xa6, 0x59, 0x50, 0x57, 0x39, 0x97, 0x38, 0x72, 0x2f, 0x15, 0xf4, 0x23, 0x4a, 0x79, 0x42, 0xb8, 0x57, 0x11, 0x88, 0x91, 0xe9, 0xc5, 0x00, 0x0e, 0xcc, 0xda, 0xed, 0x68, 0x98, 0x5e, 0x5a, 0x6b, 0x5a};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_417[] = { 0x19, 0x8b, 0x39, 0x55, 0x63, 0x31, 0x38, 0x76, 0x65, 0x9e, 0xe6, 0xf2, 0x84, 0x3f, 0x75, 0x0c, 0x4a, 0x46, 0x25, 0xe7, 0x70, 0x48, 0x14, 0x78, 0xa3, 0x00, 0xb7, 0x0c, 0xe7, 0x72, 0x48, 0x7a, 0x4f, 0xd3, 0xf1, 0x71, 0xd0, 0xc6, 0xc5, 0x3e};
    rng.instantiate(entropy_415, personalization_417, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_416, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13110 */
  {
    static const uint8_t entropy_418[] = { 0x6a, 0xc0, 0xc9, 0x94, 0xb6, 0x3c, 0x26, 0xec, 0xc2, 0x03, 0x5a, 0xb5, 0xdc, 0x6a, 0xb5, 0x6b, 0xc3, 0xbb, 0xd8, 0x11, 0xb2, 0xb9, 0x5c, 0x49, 0x44, 0x8f, 0x11, 0xfe, 0x5b, 0xb4, 0x57, 0x88, 0x28, 0x40, 0x16, 0x46, 0x01, 0xe0, 0x89, 0xc6};
    static const uint8_t returned_419[] = { 0x42, 0xa9, 0x79, 0x19, 0x50, 0xf9, 0xce, 0xb7, 0xa5, 0x51, 0xed, 0xf3, 0x23, 0x36, 0x46, 0x7f, 0x12, 0x2b, 0x09, 0xab, 0x53, 0xaf, 0xfb, 0x1f, 0xc2, 0x4c, 0xc1, 0x4c, 0x8c, 0x22, 0xf4, 0x75, 0xab, 0xbd, 0xf2, 0xab, 0x68, 0xcf, 0x06, 0xa4, 0xed, 0xd2, 0xb8, 0xd9, 0xac, 0x7c, 0x74, 0x44, 0x60, 0xeb, 0x54, 0x80, 0xc1, 0x1f, 0x22, 0x01, 0x9c, 0x3f, 0xaf, 0x36, 0x8a, 0xba, 0x20, 0xe9};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_420[] = { 0xe9, 0xaa, 0x6c, 0x05, 0x64, 0xf4, 0xf8, 0x70, 0x42, 0x16, 0xd9, 0x4e, 0x34, 0x2c, 0xb7, 0xe1, 0xf7, 0xbd, 0xd2, 0x2f, 0x5d, 0xa3, 0x80, 0x54, 0x4b, 0xee, 0xe7, 0x79, 0x24, 0xc7, 0xef, 0xc1, 0xea, 0xbf, 0x62, 0x89, 0xc4, 0x05, 0xba, 0x42};
    rng.instantiate(entropy_418, personalization_420, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_419, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13118 */
  {
    static const uint8_t entropy_421[] = { 0xf0, 0x2e, 0xe9, 0x85, 0xb4, 0x33, 0x09, 0x86, 0x62, 0xf2, 0x52, 0xb7, 0x99, 0x2d, 0x6f, 0xc9, 0x80, 0xdb, 0x58, 0x4d, 0xad, 0xc3, 0x85, 0xeb, 0x05, 0xe7, 0x59, 0x42, 0xa4, 0xce, 0x2e, 0x2a, 0x28, 0x33, 0xb9, 0xe7, 0xa3, 0xa4, 0x46, 0x76};
    static const uint8_t returned_422[] = { 0x0c, 0xe7, 0x63, 0x98, 0xb3, 0x72, 0x37, 0x18, 0x84, 0x54, 0x10, 0x9a, 0x2f, 0xad, 0xe5, 0xd4, 0x72, 0x8b, 0x19, 0x35, 0x72, 0x0e, 0xf3, 0x4f, 0x92, 0xbd, 0xab, 0x4a, 0x7d, 0xc7, 0x69, 0xca, 0xd7, 0x49, 0x34, 0x47, 0xc7, 0x0c, 0x9b, 0x17, 0xac, 0x68, 0x18, 0x84, 0x38, 0x09, 0x3a, 0x8a, 0x61, 0x76, 0xfc, 0x4a, 0x49, 0xe7, 0x3d, 0x6d, 0x13, 0x17, 0x15, 0x7f, 0x14, 0x8d, 0x5b, 0xd5};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_423[] = { 0x36, 0x73, 0x69, 0x02, 0xb0, 0x7a, 0xb9, 0x3f, 0xbf, 0x5d, 0x66, 0x3b, 0xa2, 0xdc, 0x86, 0xa9, 0x22, 0x9e, 0xc8, 0x85, 0x08, 0x61, 0x69, 0x7c, 0xdf, 0x6e, 0xa9, 0xbf, 0xd8, 0x1c, 0x4d, 0x00, 0x87, 0x94, 0xd3, 0xf2, 0x15, 0x7f, 0xc1, 0x9d};
    rng.instantiate(entropy_421, personalization_423, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_422, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13126 */
  {
    static const uint8_t entropy_424[] = { 0xe6, 0x8a, 0x85, 0xbf, 0xbd, 0x44, 0x3b, 0x0f, 0x89, 0x51, 0x38, 0x59, 0xe4, 0x4e, 0xc8, 0xd6, 0x15, 0x0e, 0xc7, 0x60, 0xa7, 0x78, 0xf3, 0x2b, 0xd6, 0x0f, 0xeb, 0xa2, 0xa1, 0xd2, 0x5c, 0x8e, 0x62, 0x01, 0xcf, 0x62, 0xdb, 0xf4, 0xfa, 0xe8};
    static const uint8_t returned_425[] = { 0xbc, 0x4d, 0xe4, 0xe5, 0x44, 0x2a, 0xc6, 0xa3, 0x9b, 0x5a, 0x4f, 0x14, 0x1c, 0x5c, 0xb2, 0xe5, 0xa6, 0xe5, 0xd8, 0x6c, 0xa6, 0x64, 0x00, 0xcb, 0x81, 0x44, 0x2c, 0xc1, 0x2b, 0xcc, 0x58, 0x60, 0x18, 0xde, 0x89, 0xd9, 0x5b, 0x40, 0x4d, 0xba, 0xea, 0x1d, 0x82, 0x8c, 0xf9, 0xa1, 0xa2, 0x8e, 0xb4, 0xf4, 0x3e, 0xfc, 0x8e, 0x93, 0x80, 0x33, 0xac, 0xa4, 0x46, 0x78, 0xff, 0x17, 0xdc, 0xe6};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_426[] = { 0x9f, 0xa1, 0xb2, 0xf6, 0xbc, 0x59, 0xf8, 0x07, 0x63, 0xa3, 0x2d, 0x69, 0x92, 0xa1, 0xb4, 0xf6, 0xa2, 0x38, 0xb3, 0x91, 0xdb, 0x93, 0x45, 0x02, 0xac, 0x83, 0x77, 0x69, 0x59, 0xac, 0x95, 0x2c, 0x51, 0xd1, 0xb3, 0x86, 0x90, 0x28, 0x30, 0x54};
    rng.instantiate(entropy_424, personalization_426, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_425, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13134 */
  {
    static const uint8_t entropy_427[] = { 0x69, 0xf9, 0x80, 0x36, 0x76, 0xd4, 0x47, 0xeb, 0xc6, 0xcb, 0xaa, 0x52, 0x4f, 0x1a, 0xc1, 0x37, 0x55, 0x38, 0xa1, 0xe7, 0x7b, 0x4c, 0xc2, 0x4f, 0xae, 0x2e, 0x51, 0x5f, 0x73, 0xc2, 0xde, 0x76, 0x70, 0x28, 0x86, 0xea, 0xcd, 0xba, 0xde, 0xce};
    static const uint8_t returned_428[] = { 0xc6, 0x41, 0x6b, 0x85, 0xaa, 0xd6, 0xa1, 0x12, 0x7c, 0x94, 0xce, 0x45, 0x8f, 0x35, 0x00, 0xa4, 0x6f, 0x3b, 0x8f, 0xd1, 0xe6, 0x07, 0xc7, 0xf4, 0xdc, 0xc9, 0x66, 0x29, 0xb6, 0x58, 0x2f, 0x2d, 0x78, 0xa1, 0xd1, 0x0e, 0xc7, 0x3f, 0xbe, 0x23, 0xb8, 0x0b, 0x3f, 0xd8, 0x2f, 0x60, 0x4c, 0xf6, 0x92, 0xff, 0x42, 0x30, 0xbf, 0x43, 0xcd, 0x7c, 0x22, 0x14, 0xfb, 0x56, 0x21, 0x4a, 0x63, 0xdd};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_429[] = { 0x64, 0xa9, 0xfb, 0x09, 0x22, 0xef, 0x02, 0xd4, 0xa1, 0x1e, 0xb3, 0x23, 0x8a, 0xbd, 0x58, 0x5d, 0x88, 0xcf, 0xe4, 0xdd, 0xc5, 0x10, 0xc4, 0x0f, 0xd3, 0x1b, 0xe4, 0xe7, 0xd4, 0xa2, 0x82, 0x4c, 0x79, 0x5b, 0x91, 0x8d, 0x9a, 0x3e, 0xb6, 0x62};
    rng.instantiate(entropy_427, personalization_429, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_428, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13142 */
  {
    static const uint8_t entropy_430[] = { 0xa8, 0x06, 0x6e, 0xc1, 0xa8, 0x96, 0xd3, 0xc2, 0x60, 0x7e, 0x93, 0x6a, 0x3a, 0x0d, 0x0f, 0x8a, 0x56, 0xc5, 0x26, 0xaf, 0x33, 0x29, 0x0f, 0x52, 0xf8, 0x07, 0x9a, 0x7e, 0xa2, 0x40, 0x8e, 0x89, 0xaf, 0x6d, 0xdc, 0x7d, 0x34, 0xc0, 0x27, 0x54};
    static const uint8_t returned_431[] = { 0x56, 0x23, 0xec, 0x4e, 0xfd, 0x2a, 0xe7, 0x65, 0xf5, 0x4c, 0x80, 0x0c, 0x1e, 0xfb, 0xe0, 0xc8, 0x66, 0xe2, 0x04, 0x78, 0xec, 0x37, 0x8e, 0x5f, 0xe9, 0x61, 0xaf, 0x6b, 0x1b, 0x6f, 0x91, 0xdd, 0x15, 0xd2, 0xf9, 0x4d, 0xb8, 0x7e, 0x92, 0xbd, 0xb5, 0x78, 0x18, 0x8e, 0x0f, 0x77, 0x1d, 0xad, 0x9e, 0xae, 0x47, 0xa2, 0xa1, 0xe7, 0xeb, 0xe1, 0xf4, 0xb8, 0xa5, 0x15, 0x3d, 0x0d, 0x83, 0x52};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_432[] = { 0x31, 0x51, 0x74, 0xa8, 0x6b, 0xb5, 0x03, 0x86, 0x80, 0xaf, 0xa6, 0xa1, 0x20, 0x2b, 0xa3, 0x74, 0x7d, 0x33, 0x63, 0xf7, 0xd0, 0x0d, 0xfb, 0xc6, 0xd1, 0xe8, 0x6b, 0x6d, 0xfc, 0xd4, 0xd5, 0xc3, 0xa6, 0x7e, 0xbd, 0xeb, 0x52, 0x66, 0xa2, 0x33};
    rng.instantiate(entropy_430, personalization_432, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_431, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13150 */
  {
    static const uint8_t entropy_433[] = { 0x26, 0x69, 0x61, 0xe3, 0x4f, 0x05, 0x5a, 0xff, 0x69, 0xfe, 0xfb, 0x99, 0x35, 0x67, 0x35, 0x73, 0x8f, 0x8d, 0xd9, 0xd0, 0x92, 0xba, 0x55, 0x89, 0x13, 0xa6, 0x4a, 0xea, 0x72, 0x57, 0xa5, 0x0a, 0xa1, 0x51, 0x8c, 0xa5, 0x07, 0xe6, 0xdc, 0xf0};
    static const uint8_t returned_434[] = { 0xf8, 0x04, 0xf0, 0xc1, 0xaa, 0x78, 0x69, 0xc6, 0x1f, 0x69, 0x20, 0x8b, 0xfc, 0x04, 0x9c, 0x03, 0xbc, 0xe7, 0xc1, 0x49, 0xc2, 0x86, 0x7f, 0xb9, 0x66, 0x27, 0x86, 0x0b, 0x70, 0x1c, 0xf1, 0x13, 0xf3, 0xcb, 0x80, 0x19, 0xf3, 0x63, 0x6e, 0x78, 0xf6, 0x04, 0x56, 0x82, 0x7b, 0xab, 0x49, 0x33, 0x2b, 0x89, 0x4d, 0xd1, 0x2b, 0x62, 0x53, 0xed, 0x74, 0x16, 0x3d, 0xb5, 0xb2, 0xbd, 0x55, 0x20};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_435[] = { 0x55, 0x1b, 0x32, 0x9c, 0xc5, 0x72, 0xec, 0x75, 0x6e, 0x0c, 0xb4, 0xa7, 0x44, 0x48, 0x8c, 0x3d, 0xcb, 0x81, 0x33, 0x84, 0x7c, 0x6a, 0xa5, 0x74, 0xd2, 0x38, 0xf2, 0x5f, 0xf9, 0x5d, 0xe8, 0x37, 0x96, 0xa8, 0x00, 0x5c, 0xb7, 0x8e, 0xe2, 0xc2};
    rng.instantiate(entropy_433, personalization_435, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_434, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13158 */
  {
    static const uint8_t entropy_436[] = { 0xdb, 0xbd, 0x85, 0x58, 0x5b, 0x2a, 0x39, 0xe9, 0xc9, 0xe9, 0xaf, 0x9c, 0x5f, 0xeb, 0x6c, 0x96, 0x48, 0x33, 0xed, 0x2b, 0x93, 0x97, 0x30, 0xa9, 0xcd, 0x5b, 0x04, 0x35, 0xe5, 0xb2, 0x28, 0xfc, 0x65, 0x50, 0xef, 0x4c, 0x6e, 0xf1, 0x29, 0x50};
    static const uint8_t returned_437[] = { 0x9d, 0x38, 0x1a, 0x77, 0xc7, 0x69, 0x1b, 0xad, 0x70, 0xf2, 0x36, 0x93, 0xc7, 0x1e, 0x68, 0xf7, 0x55, 0x89, 0x02, 0x96, 0xf6, 0xca, 0x78, 0x5b, 0x0a, 0xd4, 0xdb, 0x3f, 0x14, 0x86, 0x30, 0x9a, 0xe2, 0x1d, 0xb8, 0xfc, 0x19, 0xab, 0x95, 0x03, 0x66, 0x7d, 0x95, 0x88, 0x86, 0x26, 0x2f, 0x0b, 0xf2, 0xb2, 0xfe, 0xb7, 0x62, 0x7e, 0xde, 0xf0, 0x3a, 0x6c, 0x20, 0xdc, 0x83, 0x70, 0x5e, 0x62};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_438[] = { 0x0a, 0x5e, 0x98, 0x76, 0x46, 0xac, 0x86, 0x7a, 0xa1, 0x20, 0x0d, 0x49, 0x2c, 0x32, 0x5c, 0x1d, 0xdd, 0x53, 0xb2, 0x0c, 0x4d, 0x05, 0x94, 0x49, 0x39, 0x79, 0xf8, 0xd4, 0x87, 0xac, 0x2d, 0x7a, 0x1a, 0x8a, 0x1d, 0x7a, 0x90, 0xc2, 0x95, 0xcc};
    rng.instantiate(entropy_436, personalization_438, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_437, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13166 */
  {
    static const uint8_t entropy_439[] = { 0x0d, 0x0d, 0x4a, 0xd1, 0xe1, 0xf7, 0xab, 0x02, 0x7a, 0x81, 0x06, 0xeb, 0xa4, 0xde, 0x0e, 0x77, 0xa5, 0xbc, 0xe1, 0xb4, 0x3e, 0xe8, 0x65, 0x66, 0x3e, 0xc2, 0x4a, 0x5b, 0x94, 0xae, 0xf5, 0x8e, 0x85, 0x56, 0xe1, 0x84, 0x11, 0x0a, 0x76, 0xdd};
    static const uint8_t returned_440[] = { 0xa1, 0xd5, 0x17, 0x3b, 0x76, 0x81, 0xb1, 0x01, 0x05, 0x85, 0x3f, 0xc5, 0xc9, 0xab, 0x0b, 0x8e, 0x44, 0x8e, 0x9c, 0x1c, 0xd8, 0xed, 0x0d, 0x4b, 0xfb, 0x13, 0x05, 0x73, 0x14, 0x96, 0xde, 0x3c, 0x86, 0x6e, 0x94, 0x69, 0x25, 0xef, 0x6b, 0x75, 0xaf, 0x12, 0xa0, 0xda, 0xb9, 0xd0, 0x1a, 0x38, 0x20, 0xe1, 0x40, 0x46, 0xe4, 0x94, 0xbf, 0x07, 0x59, 0x95, 0xd7, 0x49, 0x02, 0xe2, 0x7b, 0x0d};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_441[] = { 0x67, 0xda, 0x8f, 0xca, 0x5f, 0x5d, 0x29, 0x08, 0xe8, 0xee, 0x15, 0x64, 0x7a, 0x86, 0x10, 0x20, 0xdf, 0xfa, 0xd6, 0xfe, 0xe2, 0x15, 0xd3, 0xd5, 0x28, 0x22, 0xa3, 0xd0, 0xac, 0x3c, 0x59, 0x25, 0x96, 0xa2, 0xad, 0x5d, 0x7a, 0xf7, 0xd7, 0x58};
    rng.instantiate(entropy_439, personalization_441, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_440, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13174 */
  {
    static const uint8_t entropy_442[] = { 0xf7, 0x60, 0xc2, 0xe6, 0xa6, 0x23, 0xe1, 0xaa, 0x65, 0xb2, 0xcb, 0xe0, 0x0c, 0x94, 0xee, 0xd6, 0x13, 0xa9, 0xa4, 0x00, 0x68, 0x40, 0x16, 0x6e, 0xcb, 0x62, 0xce, 0x75, 0xa0, 0x25, 0x1f, 0x1f, 0x08, 0x78, 0x3c, 0xcf, 0x63, 0x36, 0x3c, 0xc4};
    static const uint8_t returned_443[] = { 0xf1, 0x8d, 0x00, 0x2b, 0x00, 0xf8, 0x0a, 0xe1, 0x9c, 0xb9, 0x51, 0xab, 0x42, 0x79, 0xf4, 0x4c, 0x3e, 0xdb, 0xdc, 0xbb, 0xfb, 0xc6, 0x80, 0xa2, 0x2f, 0x44, 0x19, 0xa8, 0x3c, 0x9c, 0x79, 0xa8, 0x99, 0x7b, 0x6d, 0xe6, 0x24, 0x62, 0x3e, 0xd6, 0xc8, 0xae, 0x69, 0x24, 0xae, 0x6b, 0xb0, 0xc5, 0xcd, 0x6e, 0xc5, 0x58, 0xfc, 0xf6, 0x2f, 0x86, 0x99, 0x78, 0x37, 0xde, 0x52, 0x87, 0x90, 0x0e};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_444[] = { 0xb8, 0xe2, 0xf7, 0x17, 0x95, 0x93, 0xe1, 0xf8, 0x3c, 0x43, 0xac, 0x3d, 0x13, 0x25, 0x21, 0x5a, 0x2c, 0x89, 0x8e, 0x11, 0x93, 0xd9, 0x73, 0x2b, 0xf4, 0x43, 0xae, 0x4f, 0x10, 0x54, 0x0d, 0x67, 0x60, 0xdf, 0x97, 0x2f, 0x0d, 0x27, 0x76, 0xde};
    rng.instantiate(entropy_442, personalization_444, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_443, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13182 */
  {
    static const uint8_t entropy_445[] = { 0x2c, 0xcd, 0x0d, 0xb7, 0x7c, 0xae, 0xd9, 0x60, 0x7b, 0xab, 0x8d, 0xe9, 0x01, 0xa1, 0xe8, 0x16, 0x83, 0xd3, 0x6d, 0x00, 0xe1, 0xf8, 0x7d, 0x62, 0x74, 0xd2, 0x0d, 0x5c, 0x54, 0xde, 0x3f, 0x84, 0x14, 0xa9, 0x96, 0x5c, 0xde, 0xe9, 0x58, 0x4d};
    static const uint8_t returned_446[] = { 0x02, 0x75, 0x4b, 0x47, 0x0a, 0x5a, 0xfd, 0x2a, 0x86, 0x00, 0xf8, 0x3c, 0xd7, 0x1f, 0xd0, 0x88, 0x7b, 0xee, 0xe4, 0x99, 0x67, 0xe5, 0x26, 0x8a, 0x73, 0xb6, 0x01, 0xb8, 0x89, 0x7f, 0x8e, 0x4f, 0xd8, 0xa6, 0xa0, 0xdb, 0x3d, 0x5d, 0xdb, 0x62, 0x04, 0xfd, 0xeb, 0x96, 0xcd, 0x18, 0x38, 0x50, 0x13, 0xc6, 0xe5, 0x0c, 0xd8, 0xbe, 0x40, 0x09, 0xb0, 0x06, 0x29, 0xe2, 0x08, 0x69, 0xcb, 0xcc};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_447[] = { 0x6b, 0x5e, 0x48, 0x0c, 0x5b, 0xf7, 0x82, 0xe1, 0x6b, 0x64, 0xbb, 0xa7, 0x63, 0x83, 0xa2, 0xde, 0x7a, 0xb5, 0x16, 0xba, 0x43, 0xe2, 0x23, 0x58, 0xa2, 0xeb, 0xba, 0x96, 0x09, 0x72, 0xbb, 0x74, 0xf0, 0x9c, 0x94, 0xc7, 0xfc, 0x89, 0x3a, 0xa5};
    rng.instantiate(entropy_445, personalization_447, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_446, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13190 */
  {
    static const uint8_t entropy_448[] = { 0xa5, 0x9c, 0x31, 0xd7, 0x35, 0x4e, 0xec, 0x79, 0x9e, 0xca, 0xba, 0x81, 0x93, 0x46, 0x6a, 0xaa, 0x92, 0x80, 0x25, 0xb1, 0x62, 0xff, 0x44, 0x2a, 0xd2, 0xa4, 0xe0, 0xf9, 0xb6, 0x54, 0x09, 0xf1, 0x05, 0xd7, 0x28, 0xaf, 0x3a, 0xb4, 0xd5, 0xd2};
    static const uint8_t returned_449[] = { 0xaa, 0xcf, 0xaf, 0x03, 0x60, 0xc4, 0x15, 0xde, 0x87, 0xb9, 0x2d, 0x74, 0x38, 0x1b, 0xe9, 0x91, 0xf4, 0xa4, 0x1b, 0xdd, 0x61, 0x17, 0x5b, 0xcc, 0xdd, 0x7c, 0x8d, 0xd1, 0x9c, 0xd3, 0xf7, 0x07, 0x6b, 0x48, 0x5e, 0x95, 0xb1, 0xe9, 0xae, 0x60, 0xff, 0xb9, 0xb7, 0x78, 0xf6, 0x47, 0x0e, 0x5f, 0xe3, 0xa5, 0x40, 0x92, 0xc6, 0xdb, 0x3b, 0x90, 0x9a, 0x4d, 0x9e, 0x5a, 0x8c, 0xb9, 0x6e, 0xf5};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_450[] = { 0x7b, 0x56, 0xfc, 0x01, 0x6f, 0x55, 0xfe, 0x0b, 0xa2, 0x1f, 0x9c, 0xc5, 0x3b, 0x96, 0x2e, 0x21, 0x5e, 0x4e, 0xcd, 0x3d, 0xff, 0x48, 0x7a, 0xf6, 0x7b, 0x27, 0x5a, 0x19, 0xcd, 0xe4, 0xaf, 0xa7, 0x47, 0x24, 0xa7, 0x47, 0x35, 0x8f, 0xd1, 0xfb};
    rng.instantiate(entropy_448, personalization_450, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_449, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13334 */
  {
    static const uint8_t entropy_451[] = { 0x40, 0x97, 0x88, 0x36, 0xf2, 0x3c, 0xdb, 0x54, 0x5a, 0x48, 0x89, 0x39, 0x26, 0xa0, 0xdd, 0x81, 0x0f, 0x79, 0x19, 0xf1, 0x22, 0x14, 0x56, 0x7b, 0xd8, 0x9f, 0x21, 0x87, 0x61, 0x9b, 0xae, 0x46, 0x98, 0xb4, 0x07, 0x00, 0x27, 0xa3, 0xfd, 0xa7};
    static const uint8_t returned_452[] = { 0xe5, 0x8a, 0xa7, 0xfa, 0x7f, 0x63, 0x9a, 0x9d, 0x14, 0xc6, 0x7a, 0xbe, 0xb2, 0xca, 0x52, 0xdc, 0x04, 0xa0, 0x6e, 0x4c, 0xe8, 0xce, 0x18, 0xfc, 0x71, 0x37, 0x5a, 0x1a, 0xa2, 0x17, 0xdb, 0x17, 0x26, 0x6f, 0xe0, 0xeb, 0xe1, 0x5d, 0xc1, 0x3d, 0x35, 0x2a, 0xf0, 0x4d, 0x56, 0x8e, 0x80, 0xf3, 0xba, 0x76, 0xde, 0x25, 0x7e, 0xc7, 0xba, 0xd0, 0xb1, 0x25, 0xa9, 0x1f, 0xe1, 0x7e, 0x87, 0xd0};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_451, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_452, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13342 */
  {
    static const uint8_t entropy_453[] = { 0x85, 0x2e, 0x1a, 0xd0, 0x7a, 0xa5, 0xd9, 0x77, 0xd7, 0x1e, 0xf3, 0x7a, 0xc9, 0x35, 0x0e, 0xd7, 0x43, 0x53, 0x2a, 0x2d, 0xfe, 0xf5, 0xc4, 0xc6, 0x96, 0xe6, 0x36, 0x31, 0x22, 0xf8, 0x4e, 0x13, 0xed, 0x1d, 0x7e, 0xa1, 0xa1, 0xa0, 0x4c, 0xea};
    static const uint8_t returned_454[] = { 0x7e, 0x9a, 0x5c, 0xf9, 0x9a, 0xb4, 0xd4, 0x36, 0x04, 0x86, 0x39, 0xf5, 0x4d, 0xb7, 0xde, 0x46, 0x7f, 0x04, 0x10, 0x7a, 0xaf, 0x2f, 0xd5, 0x82, 0x43, 0xac, 0x57, 0x38, 0x21, 0x23, 0x6a, 0x81, 0xa0, 0x6e, 0x03, 0x07, 0xd3, 0x45, 0x5e, 0xac, 0x6e, 0x69, 0x1b, 0xe8, 0x24, 0x3d, 0xbc, 0x83, 0xbb, 0xf5, 0xd5, 0xbb, 0x13, 0x1e, 0x4c, 0x67, 0x31, 0x93, 0xba, 0xf0, 0x93, 0x81, 0xf6, 0x3b};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_453, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_454, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13350 */
  {
    static const uint8_t entropy_455[] = { 0x53, 0x13, 0x9b, 0x71, 0x1c, 0xd6, 0x29, 0x70, 0xb6, 0x12, 0x3d, 0xc4, 0x09, 0x70, 0xf3, 0x0c, 0xd0, 0x3d, 0x98, 0x63, 0xe7, 0x8a, 0x3d, 0x05, 0xeb, 0xc4, 0xd9, 0x3a, 0xfc, 0x92, 0xd6, 0x6c, 0x4e, 0x67, 0xb6, 0x15, 0x12, 0x64, 0xf2, 0x2e};
    static const uint8_t returned_456[] = { 0xc1, 0x6d, 0x33, 0x7f, 0x97, 0xed, 0x4c, 0x44, 0x58, 0x68, 0xea, 0x0d, 0x63, 0xae, 0xe5, 0xa7, 0xec, 0x74, 0x8a, 0x22, 0xf1, 0x6b, 0xa6, 0x11, 0xe2, 0x2b, 0x9c, 0x03, 0x50, 0x67, 0x17, 0xa2, 0x9e, 0x00, 0xbb, 0x56, 0xac, 0x86, 0x5e, 0xb1, 0x96, 0xe2, 0x87, 0x4b, 0xbc, 0xe6, 0x8e, 0x88, 0x4e, 0xd9, 0x70, 0x23, 0xa0, 0xbd, 0x97, 0xcc, 0x3f, 0xb1, 0x17, 0xc9, 0x1b, 0x55, 0xaa, 0xd6};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_455, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_456, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13358 */
  {
    static const uint8_t entropy_457[] = { 0xc4, 0x27, 0xba, 0x92, 0xc6, 0xec, 0xbf, 0x09, 0xea, 0x50, 0x2b, 0x8b, 0xdf, 0x5f, 0xcd, 0xe3, 0xdf, 0x79, 0xef, 0xcf, 0x80, 0xd0, 0x0d, 0x31, 0x19, 0x7a, 0x48, 0xe3, 0x8d, 0xd1, 0xdb, 0x04, 0x3d, 0x44, 0xfe, 0x5b, 0x1b, 0x53, 0x5e, 0x82};
    static const uint8_t returned_458[] = { 0xce, 0xca, 0x2b, 0x90, 0xc9, 0x42, 0x1b, 0x71, 0x6f, 0xe6, 0xab, 0xfd, 0x08, 0x65, 0x79, 0x5c, 0xec, 0xc2, 0x07, 0xb7, 0xe4, 0x2e, 0xae, 0xf2, 0xd9, 0xcd, 0x61, 0xec, 0x83, 0x3b, 0x94, 0x61, 0x51, 0x3a, 0x62, 0x0b, 0x58, 0x08, 0x21, 0x6f, 0x78, 0x3b, 0x56, 0x45, 0x03, 0x2c, 0x00, 0xac, 0x62, 0x75, 0xbc, 0xbe, 0x60, 0x9c, 0xaa, 0x31, 0x86, 0xb1, 0xd4, 0xa3, 0x9d, 0x5a, 0x99, 0x02};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_457, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_458, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13366 */
  {
    static const uint8_t entropy_459[] = { 0x08, 0x38, 0xfa, 0x42, 0x28, 0xcb, 0x87, 0xa5, 0xd2, 0x55, 0x6b, 0xe9, 0x4c, 0x25, 0x7f, 0xfd, 0xb9, 0xbf, 0xa6, 0x52, 0x90, 0xdf, 0xf3, 0x3d, 0x3b, 0x7f, 0xab, 0x98, 0x21, 0x68, 0x4a, 0xf1, 0x5a, 0x06, 0xc2, 0x83, 0xf0, 0xdc, 0x3e, 0xc9};
    static const uint8_t returned_460[] = { 0xa1, 0x70, 0x04, 0xa3, 0xe6, 0x09, 0x21, 0x90, 0x72, 0x9d, 0x86, 0xd8, 0xcd, 0xcb, 0xb9, 0xa9, 0xe8, 0xd5, 0x24, 0x5f, 0x23, 0x8f, 0xf6, 0x93, 0xf6, 0x63, 0x37, 0xe4, 0xa7, 0xb1, 0x7a, 0xb8, 0xb1, 0x3c, 0xa1, 0x3c, 0x69, 0x6f, 0xe4, 0x64, 0x55, 0x73, 0x81, 0x7e, 0x05, 0x40, 0xc5, 0xf4, 0xe7, 0x4a, 0x4a, 0xde, 0x17, 0xe8, 0x1e, 0xd8, 0x12, 0xa5, 0x88, 0x21, 0xcf, 0xdf, 0xb9, 0x00};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_459, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_460, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13374 */
  {
    static const uint8_t entropy_461[] = { 0xd5, 0xf5, 0x0d, 0xc6, 0x70, 0x8b, 0xd3, 0x89, 0x97, 0x39, 0xcf, 0xdd, 0xe9, 0x5d, 0x9f, 0x41, 0x44, 0xf9, 0x18, 0xe4, 0x93, 0x9a, 0x5d, 0x7a, 0x28, 0x8f, 0x1b, 0x35, 0x73, 0x3d, 0x5a, 0x96, 0x88, 0x23, 0x96, 0x9f, 0x3f, 0x42, 0x0f, 0xf0};
    static const uint8_t returned_462[] = { 0x6c, 0xea, 0x50, 0x6c, 0x3a, 0xe4, 0xf8, 0xfa, 0xd3, 0x6e, 0xdb, 0x01, 0x8c, 0x26, 0x8e, 0x2d, 0x25, 0x4d, 0xe7, 0xfb, 0xbe, 0x32, 0xa5, 0x00, 0xd4, 0x31, 0x35, 0x29, 0xdf, 0x16, 0x8f, 0x3d, 0x15, 0xc7, 0xcb, 0xd2, 0xd9, 0x80, 0xee, 0x04, 0xd2, 0x95, 0x24, 0x22, 0x49, 0xc7, 0x19, 0xe8, 0x0d, 0x4e, 0x55, 0xb4, 0x7f, 0x54, 0xe3, 0x14, 0x0b, 0x23, 0xe6, 0x1e, 0xaa, 0xcc, 0x67, 0xb0};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_461, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_462, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13382 */
  {
    static const uint8_t entropy_463[] = { 0x37, 0x18, 0x1f, 0xd5, 0x41, 0xda, 0x6c, 0x06, 0x78, 0xd0, 0x58, 0xf4, 0x86, 0xdf, 0x84, 0x2b, 0x36, 0xb5, 0x68, 0x73, 0xa7, 0x08, 0x80, 0xae, 0x4a, 0xf1, 0xcb, 0x58, 0x60, 0x23, 0xe2, 0x31, 0x04, 0x1d, 0xe0, 0x2e, 0xf2, 0xa2, 0x92, 0x4b};
    static const uint8_t returned_464[] = { 0x72, 0x3b, 0x05, 0x21, 0xbb, 0x53, 0x48, 0xbf, 0x6e, 0xcc, 0xbd, 0xf0, 0xa4, 0xd1, 0x6d, 0xec, 0xe4, 0x72, 0xa2, 0xbf, 0xfb, 0xf9, 0x05, 0x03, 0x5e, 0x0e, 0x62, 0xad, 0x30, 0x4b, 0xbb, 0x07, 0xc5, 0x3a, 0xd4, 0x49, 0x88, 0xc5, 0xc6, 0x53, 0x60, 0x30, 0x52, 0xf4, 0xd8, 0xd4, 0x41, 0xfa, 0x88, 0x1d, 0x2d, 0xbf, 0xa6, 0x7b, 0x96, 0x8e, 0x77, 0xa4, 0x68, 0xf9, 0xfb, 0x66, 0xf7, 0x8d};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_463, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_464, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13390 */
  {
    static const uint8_t entropy_465[] = { 0x11, 0x8f, 0x6e, 0xa3, 0x24, 0x83, 0x13, 0x2a, 0x52, 0x59, 0xb8, 0x28, 0xc0, 0xf2, 0x99, 0x9d, 0xcf, 0x3c, 0x24, 0xe5, 0x00, 0x12, 0xe9, 0xd6, 0xa5, 0xca, 0x86, 0x6d, 0x15, 0x43, 0x1e, 0xc7, 0xd0, 0x9c, 0x35, 0xe2, 0xcf, 0xe2, 0xbb, 0xd6};
    static const uint8_t returned_466[] = { 0xe9, 0x94, 0x06, 0x3d, 0x1a, 0x66, 0x83, 0xa2, 0x6e, 0x21, 0x3c, 0x6c, 0x29, 0x08, 0xae, 0x89, 0x64, 0xa1, 0xe4, 0x94, 0x77, 0x9e, 0x30, 0xc9, 0x77, 0xc9, 0xee, 0x7b, 0xed, 0x60, 0x44, 0x9f, 0xa3, 0xc2, 0x8c, 0xb3, 0x0a, 0x92, 0xe7, 0xf2, 0x87, 0x71, 0xc6, 0xa6, 0x72, 0x78, 0x9c, 0xaa, 0x73, 0x9f, 0x05, 0xb5, 0x81, 0xd7, 0x18, 0xd8, 0x64, 0xbd, 0x22, 0x02, 0x8e, 0x41, 0x9e, 0xef};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_465, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_466, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13398 */
  {
    static const uint8_t entropy_467[] = { 0xf1, 0x87, 0x49, 0x0e, 0xba, 0xec, 0x72, 0xe6, 0x85, 0x0a, 0xe2, 0xe8, 0xe9, 0x40, 0xc0, 0x69, 0x04, 0x0f, 0x89, 0xe1, 0x9b, 0x4d, 0x91, 0x93, 0xc2, 0x27, 0xa8, 0x1b, 0x98, 0xa4, 0xce, 0x4e, 0xd0, 0x0b, 0x2a, 0x3a, 0x9e, 0xfd, 0x00, 0xb7};
    static const uint8_t returned_468[] = { 0xd6, 0x4c, 0x92, 0xc8, 0x64, 0xdc, 0x6f, 0x7c, 0xfe, 0xab, 0x50, 0x9b, 0xd5, 0x1c, 0x73, 0x66, 0xab, 0x54, 0x68, 0x26, 0xa5, 0x31, 0xba, 0x31, 0x51, 0x43, 0x91, 0xf1, 0x1d, 0x97, 0x60, 0xd4, 0x77, 0xc7, 0xec, 0x39, 0x01, 0xc4, 0xd1, 0x54, 0x1a, 0x70, 0x3a, 0xdc, 0xc2, 0x52, 0x63, 0x25, 0x7f, 0x3e, 0x5b, 0xbe, 0xca, 0xa5, 0x9b, 0x61, 0x8c, 0x1b, 0x4a, 0x1d, 0xf8, 0x82, 0x06, 0x6b};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_467, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_468, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13406 */
  {
    static const uint8_t entropy_469[] = { 0x9e, 0x26, 0x4d, 0x7e, 0xe3, 0x5b, 0x20, 0xfe, 0x27, 0x41, 0x16, 0x92, 0x01, 0x32, 0x16, 0x7f, 0xd3, 0xb9, 0x5d, 0xdf, 0x6a, 0x2b, 0xf8, 0x36, 0x89, 0x79, 0x99, 0xe8, 0x75, 0xa7, 0xdb, 0xb0, 0xac, 0x52, 0x02, 0xbf, 0x45, 0x30, 0xc9, 0x2e};
    static const uint8_t returned_470[] = { 0x0f, 0x79, 0x82, 0xf5, 0x4e, 0x43, 0xab, 0xc5, 0x75, 0x11, 0x11, 0x4f, 0x95, 0xd1, 0x03, 0xb7, 0xbd, 0xed, 0xf4, 0x11, 0x53, 0x64, 0x36, 0x0d, 0x1c, 0x95, 0xdf, 0x04, 0xc4, 0xb4, 0x00, 0x83, 0x76, 0x74, 0xca, 0xe0, 0x21, 0x2b, 0x77, 0x6c, 0x0b, 0xaa, 0x05, 0xd3, 0x42, 0x8d, 0x4f, 0xe3, 0xfb, 0xa2, 0x8a, 0xab, 0x4f, 0xd3, 0x5a, 0x1e, 0x32, 0xfc, 0xc2, 0xb9, 0x27, 0x8c, 0x11, 0xb0};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_469, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_470, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13414 */
  {
    static const uint8_t entropy_471[] = { 0x21, 0x37, 0xf2, 0x91, 0xe5, 0x0f, 0xb5, 0xaa, 0x45, 0x9a, 0x2f, 0x00, 0x17, 0xe1, 0x2f, 0x4d, 0x10, 0x7a, 0x03, 0x0a, 0x1f, 0x14, 0xff, 0x9a, 0xc3, 0x30, 0x35, 0xd0, 0xcb, 0xba, 0xe0, 0xce, 0x79, 0x10, 0xfa, 0x7e, 0x86, 0xd7, 0x0c, 0xff};
    static const uint8_t returned_472[] = { 0x6f, 0x78, 0x50, 0xa6, 0x76, 0x2e, 0xaf, 0x49, 0xbb, 0x93, 0xc1, 0x2f, 0xd1, 0xf2, 0xb6, 0x2f, 0x24, 0xfd, 0x21, 0x7e, 0x0c, 0xb2, 0x9e, 0x73, 0xac, 0x6e, 0x93, 0x20, 0xb5, 0x9c, 0x2c, 0xb5, 0xcd, 0x4b, 0x02, 0xa4, 0xac, 0x99, 0xcb, 0xe6, 0x5e, 0x3a, 0x12, 0x2d, 0x69, 0xef, 0xd5, 0xa8, 0x6f, 0x4d, 0xf4, 0x66, 0x68, 0xdb, 0xb8, 0x4b, 0x14, 0x50, 0x88, 0xec, 0x72, 0x67, 0x1f, 0x32};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_471, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_472, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13422 */
  {
    static const uint8_t entropy_473[] = { 0xc4, 0xe3, 0x4b, 0xeb, 0x50, 0x14, 0x3a, 0x19, 0x1d, 0x07, 0x5d, 0x2b, 0x51, 0x0d, 0xdf, 0xd9, 0xf8, 0x07, 0xf4, 0x98, 0xf1, 0x86, 0x3c, 0x96, 0xff, 0x08, 0xb4, 0x1b, 0x0c, 0xe2, 0x86, 0xc8, 0xf2, 0x18, 0x0a, 0xfe, 0x8b, 0xbf, 0x97, 0x3e};
    static const uint8_t returned_474[] = { 0xe1, 0x9f, 0xbe, 0xe2, 0xe7, 0xe5, 0xed, 0x55, 0x3c, 0x40, 0x9e, 0x60, 0x99, 0x8a, 0xa4, 0xcf, 0x6d, 0xe6, 0x55, 0x71, 0xa8, 0x78, 0x4c, 0x0c, 0xda, 0xdc, 0x80, 0xde, 0x2f, 0x8b, 0x90, 0xa3, 0xa0, 0xb5, 0x21, 0x2c, 0x8b, 0xaa, 0xaa, 0xb4, 0x1c, 0x95, 0x55, 0x4c, 0x4a, 0x61, 0x68, 0x85, 0x19, 0xd7, 0x59, 0x76, 0x9c, 0xbd, 0x64, 0xf6, 0x41, 0x17, 0x3f, 0x51, 0x34, 0x27, 0x15, 0xdf};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_473, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_474, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13430 */
  {
    static const uint8_t entropy_475[] = { 0x5c, 0x3b, 0xa5, 0x23, 0x0b, 0xc7, 0x13, 0xc4, 0x91, 0xb7, 0xe1, 0x84, 0x95, 0x50, 0xc3, 0x5c, 0x5e, 0x89, 0x25, 0xdd, 0xc0, 0x36, 0x40, 0x73, 0x59, 0x66, 0xb1, 0x95, 0x42, 0x3d, 0x17, 0xbc, 0x73, 0xf7, 0x55, 0xde, 0x48, 0x3e, 0xbf, 0x1f};
    static const uint8_t returned_476[] = { 0x15, 0x7d, 0xce, 0x31, 0x8c, 0x3e, 0x92, 0x81, 0x0d, 0x64, 0x34, 0xd0, 0x2c, 0x43, 0xad, 0xc9, 0x27, 0xea, 0xc5, 0xc0, 0x58, 0x0d, 0x74, 0x44, 0x36, 0x6a, 0x1a, 0x44, 0xdb, 0xe8, 0x65, 0xfb, 0x0a, 0xd0, 0x52, 0xfa, 0xcd, 0x0c, 0x6c, 0x6d, 0x47, 0x51, 0x53, 0x47, 0x16, 0x30, 0xb3, 0x49, 0x1b, 0x81, 0x8c, 0x34, 0x61, 0xde, 0x33, 0x62, 0x9a, 0x49, 0x15, 0xe6, 0x0f, 0xe7, 0xc5, 0x59};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_475, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_476, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13438 */
  {
    static const uint8_t entropy_477[] = { 0xe8, 0xc2, 0x4b, 0xa9, 0x2a, 0xb5, 0xd7, 0x39, 0xb9, 0xec, 0xad, 0xb9, 0x50, 0x5a, 0xc5, 0x6c, 0xf5, 0x99, 0x0f, 0x14, 0x50, 0xe5, 0x6f, 0x4f, 0xb3, 0x34, 0xf1, 0x15, 0xc1, 0x49, 0x48, 0xcb, 0x40, 0x4e, 0x54, 0x1a, 0x37, 0xbf, 0xa6, 0xdc};
    static const uint8_t returned_478[] = { 0x2c, 0xb6, 0x51, 0x52, 0x4a, 0x6b, 0x09, 0x4c, 0x93, 0xe8, 0xd1, 0xca, 0xf3, 0x3b, 0xef, 0x26, 0x9d, 0x26, 0x7e, 0xaa, 0xe0, 0x84, 0x9c, 0x35, 0x9b, 0x52, 0xd3, 0x46, 0x40, 0xf1, 0x4a, 0xd4, 0xa7, 0xfe, 0x1c, 0x02, 0x1f, 0xbc, 0xdc, 0xe6, 0x65, 0x0e, 0xb6, 0x16, 0xae, 0xc4, 0xa0, 0x57, 0x39, 0xce, 0x3d, 0xd1, 0xd6, 0x5e, 0x9f, 0x46, 0x66, 0x57, 0x5e, 0x01, 0x2c, 0x50, 0xf0, 0x85};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_477, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_478, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13446 */
  {
    static const uint8_t entropy_479[] = { 0x68, 0x9f, 0x2f, 0x61, 0x67, 0x03, 0x60, 0x47, 0x2b, 0x24, 0xf8, 0xad, 0x36, 0x0f, 0xe0, 0x8e, 0x24, 0x9b, 0x59, 0xec, 0x0c, 0xc4, 0x67, 0x5b, 0x08, 0xac, 0x07, 0x93, 0xda, 0xe6, 0x95, 0x6d, 0xb8, 0xf6, 0x31, 0x08, 0x57, 0x4e, 0xf0, 0xc2};
    static const uint8_t returned_480[] = { 0x08, 0x97, 0x85, 0x61, 0x29, 0xa4, 0x2d, 0x78, 0x5b, 0x60, 0xd7, 0x70, 0x83, 0x6a, 0x68, 0x19, 0x8b, 0xc7, 0x6e, 0x29, 0x84, 0x0a, 0xbb, 0x08, 0x02, 0xba, 0x9d, 0x47, 0x1a, 0xcf, 0x8b, 0x8b, 0xff, 0x3f, 0x02, 0xe1, 0xa1, 0xc3, 0x40, 0x15, 0xad, 0x51, 0xce, 0x85, 0x96, 0x9b, 0x12, 0xea, 0x65, 0x23, 0x6b, 0xc1, 0x2d, 0x34, 0x9c, 0x03, 0xf2, 0x03, 0x1f, 0xde, 0x19, 0xcb, 0x22, 0xc2};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_479, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_480, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13590 */
  {
    static const uint8_t entropy_481[] = { 0x73, 0xbc, 0x77, 0xfa, 0xae, 0x57, 0x5f, 0x53, 0x00, 0x91, 0x72, 0x66, 0x95, 0xa1, 0x0f, 0xa8, 0xf3, 0x76, 0xdf, 0x07, 0x22, 0xd5, 0x6a, 0xe5, 0xa2, 0xe9, 0xd7, 0xaf, 0x20, 0xbf, 0x52, 0xe8, 0x64, 0x97, 0x76, 0x1a, 0xa9, 0x47, 0xcc, 0x04};
    static const uint8_t returned_482[] = { 0x41, 0x2d, 0x61, 0x65, 0xd5, 0x34, 0x6b, 0xd5, 0xbf, 0xa0, 0x19, 0xcf, 0x25, 0x77, 0x39, 0x87, 0xd2, 0x7c, 0x9a, 0x6e, 0x6a, 0xd2, 0x67, 0x47, 0xaa, 0x73, 0x6c, 0xc0, 0xdb, 0xcb, 0xeb, 0xff, 0x6a, 0x16, 0xde, 0x02, 0x6b, 0xd4, 0x24, 0x9e, 0x69, 0xf0, 0x02, 0x8e, 0x2b, 0x7e, 0x0a, 0x7d, 0x0d, 0x0e, 0x43, 0x8b, 0x3d, 0x6d, 0xe2, 0x7f, 0xf6, 0x67, 0x53, 0x99, 0x8b, 0x5c, 0x33, 0x4b};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_483[] = { 0xc2, 0xd2, 0x78, 0xf6, 0xbb, 0x39, 0xd3, 0x44, 0x52, 0xaf, 0xe6, 0xa7, 0xbb, 0xf5, 0x9c, 0x8e, 0xff, 0xc7, 0xeb, 0xbb, 0x9b, 0x45, 0xc1, 0x29, 0x59, 0x0a, 0x23, 0x7a, 0x74, 0x37, 0x54, 0x2a, 0x4c, 0x72, 0xd6, 0xcf, 0xfb, 0x3f, 0x80, 0x40};
    rng.instantiate(entropy_481, personalization_483, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_482, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13598 */
  {
    static const uint8_t entropy_484[] = { 0x73, 0x06, 0x0e, 0x14, 0x4b, 0xa6, 0x64, 0xad, 0x49, 0xfd, 0xe5, 0xc2, 0xa5, 0xb6, 0x7c, 0x4a, 0x4a, 0x39, 0x49, 0x55, 0xc8, 0x4f, 0xbb, 0xbe, 0x96, 0xe1, 0xf4, 0x5f, 0x0e, 0xe5, 0x45, 0x99, 0x79, 0x5f, 0x9b, 0x98, 0xdd, 0x54, 0x8b, 0xb8};
    static const uint8_t returned_485[] = { 0x17, 0x0b, 0x91, 0xb9, 0x99, 0x08, 0xfc, 0x54, 0xf3, 0x49, 0xd0, 0x8c, 0x25, 0xc1, 0x0e, 0xa3, 0x2b, 0xc5, 0x3e, 0x85, 0x7e, 0x66, 0x0a, 0x29, 0x1c, 0xc7, 0x2c, 0x47, 0x85, 0xcc, 0x30, 0xb4, 0x57, 0x4c, 0x48, 0x88, 0xea, 0xd8, 0xbb, 0xbb, 0x88, 0x25, 0x49, 0x48, 0x70, 0xc7, 0xe8, 0x56, 0xda, 0x12, 0xdf, 0xe4, 0x2e, 0xe9, 0x9a, 0x6b, 0x55, 0x90, 0x19, 0x68, 0x57, 0x13, 0x9f, 0xa8};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_486[] = { 0x06, 0x87, 0x8e, 0x81, 0x90, 0x54, 0xf8, 0x22, 0x8d, 0x66, 0xca, 0x5b, 0x50, 0x28, 0x89, 0x97, 0x2c, 0x6c, 0x5e, 0x5e, 0xdb, 0x9a, 0xc9, 0x16, 0x11, 0x87, 0xf9, 0x91, 0x22, 0x91, 0xf7, 0x04, 0x65, 0x69, 0xe7, 0xd9, 0x0c, 0xcd, 0x0b, 0xee};
    rng.instantiate(entropy_484, personalization_486, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_485, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13606 */
  {
    static const uint8_t entropy_487[] = { 0x0c, 0x81, 0xbc, 0xec, 0x33, 0x66, 0xc0, 0x22, 0x9f, 0x43, 0xdb, 0xcd, 0x23, 0x26, 0x99, 0xcd, 0x38, 0x84, 0xbf, 0xe5, 0xdc, 0x93, 0x98, 0x85, 0xf9, 0x37, 0xa4, 0x63, 0x71, 0xd1, 0xf8, 0x21, 0x98, 0xc0, 0x0e, 0x34, 0x71, 0xe5, 0x98, 0x6d};
    static const uint8_t returned_488[] = { 0xa4, 0x2c, 0x8c, 0xc3, 0x3d, 0x7b, 0x86, 0x6b, 0xe1, 0xd8, 0x30, 0xaa, 0x97, 0xcb, 0xbf, 0x05, 0xf2, 0x88, 0x7e, 0x9e, 0x5b, 0xda, 0x4f, 0x4f, 0x9f, 0x08, 0xd1, 0x75, 0xfe, 0xee, 0x72, 0xd5, 0xe2, 0x66, 0xc0, 0x6b, 0x23, 0xe3, 0xb2, 0x9e, 0xbe, 0xb1, 0x4e, 0x25, 0xa8, 0x1b, 0x85, 0x36, 0x64, 0x57, 0x26, 0xfb, 0xa9, 0x1f, 0x68, 0xf8, 0x34, 0x79, 0x62, 0x23, 0xd8, 0xdb, 0x94, 0xec};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_489[] = { 0x8b, 0x4e, 0x90, 0x22, 0x06, 0x74, 0x7c, 0xf3, 0x5a, 0x7a, 0xd6, 0x4b, 0x77, 0xe8, 0x56, 0xcc, 0xf1, 0x2d, 0x18, 0x70, 0xff, 0x82, 0x43, 0xb6, 0x78, 0x3c, 0x70, 0x8e, 0xcd, 0x93, 0x62, 0x77, 0x5a, 0x26, 0xf4, 0x07, 0x0e, 0x8b, 0x71, 0x64};
    rng.instantiate(entropy_487, personalization_489, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_488, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13614 */
  {
    static const uint8_t entropy_490[] = { 0xc9, 0xd6, 0x91, 0xfc, 0x04, 0x44, 0x80, 0x43, 0xae, 0x13, 0x75, 0x35, 0x63, 0x95, 0x11, 0x9d, 0xe1, 0xc6, 0xb8, 0xc0, 0x95, 0x75, 0xad, 0x1c, 0x69, 0x5f, 0x23, 0x1b, 0xb4, 0x2f, 0x4e, 0x17, 0xf2, 0x63, 0x36, 0xc3, 0x2c, 0xfd, 0x22, 0x5a};
    static const uint8_t returned_491[] = { 0xa7, 0x6f, 0x38, 0x1b, 0x9f, 0x37, 0x9d, 0x9e, 0xc1, 0x7a, 0x88, 0xd4, 0xbc, 0x42, 0xa7, 0xf4, 0x4e, 0x94, 0xc8, 0xf0, 0xc4, 0xd6, 0xf1, 0xac, 0x9d, 0x23, 0x0e, 0x17, 0x4b, 0x01, 0x56, 0xcc, 0x56, 0xa1, 0xc2, 0x38, 0x55, 0x05, 0x97, 0x94, 0x26, 0x95, 0x47, 0x6b, 0x26, 0xaf, 0x27, 0x02, 0xb5, 0x9c, 0x24, 0x20, 0x59, 0x52, 0x15, 0x5a, 0x2f, 0xa0, 0x00, 0xf4, 0x80, 0x98, 0x65, 0xa2};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_492[] = { 0xef, 0xc8, 0x6a, 0x95, 0x0e, 0xb4, 0xf7, 0x5f, 0x3d, 0xf0, 0x36, 0x10, 0x99, 0xef, 0x05, 0xac, 0xec, 0x57, 0xd7, 0xff, 0x36, 0x56, 0x16, 0x13, 0x39, 0x78, 0x52, 0x5d, 0x11, 0x4c, 0xdf, 0x7f, 0x91, 0x79, 0x00, 0x72, 0x52, 0xb1, 0x32, 0x01};
    rng.instantiate(entropy_490, personalization_492, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_491, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13622 */
  {
    static const uint8_t entropy_493[] = { 0x83, 0x86, 0xad, 0x92, 0x45, 0x79, 0xed, 0xd8, 0x0c, 0x5d, 0x7a, 0x6f, 0x40, 0xad, 0x2e, 0x6a, 0x42, 0x96, 0x7a, 0x02, 0x70, 0xe6, 0x7d, 0x80, 0xd4, 0x31, 0xfa, 0x15, 0xb3, 0x7d, 0xcd, 0x03, 0x02, 0x04, 0x4c, 0x4b, 0xe2, 0xa6, 0x1d, 0x25};
    static const uint8_t returned_494[] = { 0xa4, 0x2d, 0x0b, 0xc8, 0x9f, 0x10, 0x6f, 0x61, 0xbb, 0x3d, 0xd0, 0xa2, 0x7e, 0x30, 0x5c, 0xf4, 0xdd, 0x2a, 0x84, 0xb4, 0x5d, 0x50, 0x6d, 0x55, 0x2f, 0xd5, 0x70, 0x26, 0xbd, 0xd7, 0x35, 0xb9, 0x30, 0xc0, 0x13, 0x3c, 0xa1, 0xd2, 0xee, 0x7c, 0x7f, 0x9e, 0x3a, 0x81, 0xae, 0x7d, 0xf5, 0xb3, 0xc1, 0x0b, 0x34, 0xec, 0xaf, 0xab, 0xfa, 0xcd, 0x55, 0x53, 0xbd, 0x8b, 0x75, 0x20, 0x9e, 0x63};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_495[] = { 0x2e, 0xdb, 0x37, 0xbf, 0xf0, 0xfa, 0xec, 0x67, 0xdc, 0x14, 0x9d, 0x34, 0x5f, 0x64, 0xa9, 0xc0, 0xa1, 0xdb, 0x6e, 0x6d, 0x52, 0x48, 0xfe, 0xa5, 0x50, 0x10, 0x91, 0xc5, 0xca, 0x64, 0xde, 0x96, 0x43, 0x27, 0x78, 0x34, 0xd7, 0x38, 0x29, 0x5c};
    rng.instantiate(entropy_493, personalization_495, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_494, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13630 */
  {
    static const uint8_t entropy_496[] = { 0xc1, 0xf8, 0xa8, 0x00, 0x7d, 0x63, 0x2f, 0xa0, 0xcd, 0x3e, 0xda, 0xf1, 0x8d, 0xce, 0x55, 0xe8, 0x70, 0xfc, 0x1f, 0xd2, 0xfe, 0x1e, 0xa3, 0x32, 0x10, 0x3b, 0x4b, 0x0c, 0xd8, 0xbf, 0x55, 0x91, 0xc2, 0x58, 0xab, 0x8b, 0x46, 0xc6, 0xa8, 0x8e};
    static const uint8_t returned_497[] = { 0xc7, 0x0a, 0x9f, 0x55, 0x75, 0xfc, 0xba, 0xe8, 0xf7, 0x88, 0x97, 0x6b, 0x5e, 0xc6, 0x0f, 0x2a, 0xb3, 0x5e, 0x5b, 0x0d, 0x2e, 0x30, 0xaf, 0xfd, 0xcb, 0xae, 0xb4, 0xc2, 0x4f, 0xc2, 0xbd, 0x26, 0x1b, 0x44, 0x20, 0x22, 0x57, 0x04, 0x4e, 0x50, 0xf3, 0xc5, 0xc5, 0xe4, 0x11, 0xeb, 0xb2, 0xf0, 0x79, 0x00, 0xd9, 0x78, 0xf4, 0xfe, 0x66, 0x88, 0x5d, 0x36, 0xb0, 0x1e, 0xd9, 0x27, 0xda, 0xbf};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_498[] = { 0x1c, 0x25, 0x1c, 0x41, 0x9e, 0x7c, 0x0b, 0x99, 0x97, 0xd8, 0xe7, 0xc8, 0x66, 0x13, 0x03, 0x3a, 0x8f, 0x01, 0x2b, 0xdd, 0xd4, 0xbd, 0x25, 0x49, 0x68, 0x31, 0x98, 0x8f, 0xe9, 0x9d, 0x87, 0x32, 0x51, 0x0d, 0x42, 0x60, 0x76, 0x3c, 0x0e, 0x52};
    rng.instantiate(entropy_496, personalization_498, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_497, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13638 */
  {
    static const uint8_t entropy_499[] = { 0x92, 0x68, 0x0c, 0xdb, 0x8e, 0x3b, 0xac, 0x00, 0xca, 0x0c, 0xa2, 0x5e, 0x98, 0x8f, 0x6f, 0xbc, 0x3c, 0xe2, 0xa6, 0xec, 0x27, 0x6d, 0x8b, 0x30, 0xb9, 0xee, 0x5d, 0x79, 0x33, 0xde, 0xcd, 0x3f, 0x90, 0xb3, 0x39, 0xf0, 0x86, 0x1b, 0x49, 0x3c};
    static const uint8_t returned_500[] = { 0xfe, 0xab, 0x4a, 0x78, 0x23, 0x96, 0x63, 0x89, 0x7e, 0x66, 0x15, 0x71, 0x84, 0xbf, 0xe8, 0x56, 0x8e, 0x3c, 0xc4, 0x60, 0x12, 0x90, 0x8e, 0x8d, 0x96, 0xf2, 0x1c, 0xdb, 0xeb, 0x79, 0x41, 0xe4, 0x30, 0x58, 0x17, 0x87, 0xe0, 0x8d, 0xd9, 0x19, 0x8b, 0xda, 0xf5, 0x8f, 0xf8, 0x84, 0xd8, 0x34, 0xc0, 0x82, 0x7b, 0xf9, 0x31, 0x11, 0x3c, 0x00, 0xc3, 0x4f, 0x98, 0x8f, 0x1d, 0x7b, 0x05, 0xed};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_501[] = { 0xd7, 0x07, 0xff, 0x05, 0x26, 0xdf, 0xc0, 0xc7, 0xea, 0xfa, 0x3d, 0x76, 0xf5, 0xad, 0x0e, 0x9d, 0x98, 0x19, 0x2e, 0xce, 0x08, 0x55, 0xce, 0x09, 0xed, 0xba, 0x0a, 0xef, 0xe8, 0x19, 0xb9, 0x40, 0x58, 0x5b, 0x5d, 0xf8, 0xca, 0x43, 0x7e, 0xad};
    rng.instantiate(entropy_499, personalization_501, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_500, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13646 */
  {
    static const uint8_t entropy_502[] = { 0x7b, 0x53, 0xfe, 0x45, 0xe5, 0xb6, 0x1c, 0x13, 0x0a, 0x42, 0xfc, 0xe9, 0x2a, 0x66, 0xa9, 0x5d, 0xca, 0x41, 0x7c, 0x17, 0x23, 0x3b, 0x68, 0xe2, 0xd8, 0xba, 0x7d, 0x18, 0xa0, 0x2a, 0xcb, 0x57, 0x4d, 0xa2, 0xc0, 0x48, 0xbc, 0x29, 0xdb, 0x9a};
    static const uint8_t returned_503[] = { 0x09, 0xc8, 0x69, 0xac, 0x97, 0xef, 0xce, 0x03, 0x78, 0xa8, 0x78, 0xf7, 0x76, 0x42, 0xd5, 0x02, 0x72, 0x50, 0x48, 0xc9, 0x50, 0x52, 0xc8, 0x22, 0x0f, 0x25, 0xf0, 0x3b, 0xd9, 0xbd, 0x60, 0xa1, 0x19, 0x8e, 0x45, 0xd4, 0x99, 0x40, 0xae, 0x35, 0xc2, 0x57, 0x1a, 0x72, 0xcd, 0xea, 0xe2, 0x97, 0xd0, 0x23, 0xec, 0x4c, 0xdc, 0x10, 0x47, 0x2f, 0x11, 0x12, 0xa8, 0x79, 0x6f, 0xa2, 0x53, 0x26};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_504[] = { 0x14, 0x63, 0xa8, 0xe6, 0x30, 0x64, 0xf6, 0xbd, 0xf4, 0xf4, 0x2b, 0xfa, 0x7c, 0x74, 0x85, 0xab, 0x7b, 0xa6, 0xad, 0xa5, 0xb0, 0xe5, 0xe8, 0x7d, 0xc8, 0x8a, 0x36, 0xe9, 0xbd, 0xf3, 0x9f, 0x70, 0xa7, 0xe9, 0x95, 0xd2, 0xde, 0xd3, 0xc2, 0xb5};
    rng.instantiate(entropy_502, personalization_504, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_503, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13654 */
  {
    static const uint8_t entropy_505[] = { 0x8a, 0xdf, 0xc0, 0x4d, 0xdb, 0x2f, 0x8a, 0x3b, 0x13, 0xde, 0xf4, 0x12, 0x8d, 0x10, 0x29, 0xa7, 0x02, 0x76, 0xc5, 0x3e, 0x69, 0x0a, 0xe2, 0x1a, 0x1e, 0xe9, 0xc3, 0x6e, 0x4a, 0x26, 0xf8, 0x92, 0x82, 0x68, 0xa4, 0xc5, 0xa8, 0xbb, 0xc9, 0xea};
    static const uint8_t returned_506[] = { 0xb5, 0x62, 0x69, 0x5d, 0xc1, 0xa0, 0x88, 0xb1, 0xb7, 0xf5, 0xe3, 0xee, 0x69, 0xd6, 0xc9, 0xe7, 0x67, 0xa6, 0xc7, 0x6f, 0x8c, 0x48, 0x3c, 0x8c, 0xce, 0x4a, 0x8e, 0xf8, 0xe5, 0x88, 0xe5, 0x3a, 0xab, 0x1d, 0x2a, 0xc4, 0xdb, 0xab, 0x12, 0x4f, 0x30, 0x7d, 0xef, 0x49, 0x1b, 0xf8, 0x43, 0xd6, 0x16, 0x8c, 0x88, 0xb5, 0x28, 0xad, 0x4c, 0x41, 0x7d, 0xbf, 0xb6, 0x16, 0xcc, 0x0a, 0x7c, 0xcb};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_507[] = { 0xab, 0x5c, 0x19, 0x85, 0x7a, 0xd9, 0x10, 0x4f, 0xbe, 0x12, 0x6b, 0xd5, 0x94, 0x1d, 0xb3, 0x1a, 0x61, 0x1d, 0xfc, 0x5a, 0xdb, 0xda, 0x9b, 0x1b, 0x77, 0x2e, 0xd2, 0xb0, 0x8c, 0x01, 0x53, 0x61, 0x38, 0xf0, 0x83, 0x78, 0x2d, 0xf6, 0xe2, 0x22};
    rng.instantiate(entropy_505, personalization_507, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_506, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13662 */
  {
    static const uint8_t entropy_508[] = { 0x39, 0x94, 0xd9, 0x21, 0xe9, 0xb2, 0x4e, 0xbe, 0xea, 0xa2, 0xb3, 0xf1, 0x5e, 0x74, 0x9b, 0x00, 0x35, 0x3a, 0xbb, 0xb4, 0xf0, 0x58, 0x38, 0xe6, 0x55, 0x95, 0x66, 0x53, 0xad, 0xbc, 0x27, 0xc5, 0x80, 0xc0, 0x9c, 0xd6, 0xeb, 0x8c, 0xde, 0x30};
    static const uint8_t returned_509[] = { 0x59, 0xde, 0x04, 0xbc, 0x36, 0x02, 0x49, 0x61, 0x7d, 0x96, 0x9c, 0xe7, 0xdd, 0xe7, 0xb6, 0x38, 0xdb, 0xf0, 0xd1, 0x04, 0xe0, 0xd3, 0xc9, 0xce, 0x0a, 0x63, 0xa4, 0xa7, 0x37, 0x69, 0x76, 0xa3, 0x38, 0xf9, 0xe5, 0xb3, 0x06, 0x08, 0xc2, 0xe1, 0xb8, 0x81, 0xd8, 0x2f, 0xc6, 0xdd, 0x5a, 0xe2, 0x51, 0x84, 0xd6, 0xf0, 0x7c, 0xb0, 0xdc, 0x2f, 0x5d, 0x99, 0x89, 0xea, 0x49, 0x10, 0x0c, 0x01};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_510[] = { 0x71, 0xeb, 0x26, 0xe6, 0x11, 0x12, 0xb1, 0x1f, 0x21, 0x8d, 0x01, 0x6a, 0x67, 0x86, 0x84, 0xb8, 0xaa, 0xab, 0x65, 0x19, 0xea, 0x41, 0xaf, 0x21, 0xfc, 0x71, 0x3c, 0x4a, 0xfa, 0x14, 0xf3, 0x9d, 0x49, 0xa5, 0xa7, 0x47, 0x23, 0x44, 0xde, 0xf1};
    rng.instantiate(entropy_508, personalization_510, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_509, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13670 */
  {
    static const uint8_t entropy_511[] = { 0x2a, 0x3d, 0x16, 0xa9, 0x6d, 0xaa, 0xc4, 0xb6, 0xc9, 0xa6, 0x47, 0x47, 0x29, 0x75, 0x22, 0x04, 0xb3, 0xf1, 0x97, 0xe9, 0x39, 0x61, 0x80, 0xc9, 0x85, 0x51, 0xcd, 0x36, 0xf0, 0xfc, 0x68, 0xb7, 0xfd, 0xf5, 0x33, 0x11, 0x5d, 0xa6, 0xb2, 0xc6};
    static const uint8_t returned_512[] = { 0x21, 0x56, 0x1c, 0x15, 0xd0, 0x24, 0x05, 0x0a, 0x5c, 0xbf, 0x8d, 0x31, 0x47, 0x2c, 0xd5, 0x20, 0x10, 0xba, 0x0a, 0x73, 0x85, 0xb5, 0xf6, 0xf0, 0xea, 0x03, 0xbd, 0xbf, 0x52, 0x3a, 0x82, 0x8f, 0x7a, 0x75, 0xde, 0x85, 0x86, 0xfe, 0xee, 0xa9, 0x8a, 0xdc, 0x56, 0xc9, 0x15, 0xb5, 0xcf, 0xba, 0x41, 0x6d, 0xd3, 0x66, 0x1c, 0x2c, 0xee, 0x54, 0x14, 0x3f, 0xee, 0x22, 0x87, 0xbb, 0x3f, 0x90};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_513[] = { 0x54, 0x7e, 0x34, 0x34, 0x00, 0x65, 0xfd, 0xbe, 0xb4, 0x09, 0xff, 0xf4, 0x9f, 0x2d, 0x9a, 0x97, 0xc5, 0x20, 0x2a, 0xa1, 0x48, 0xaa, 0x7e, 0x85, 0x19, 0x61, 0x07, 0x99, 0xa6, 0x82, 0xde, 0x81, 0xc5, 0x03, 0xbb, 0x52, 0xad, 0xdd, 0x50, 0xac};
    rng.instantiate(entropy_511, personalization_513, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_512, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13678 */
  {
    static const uint8_t entropy_514[] = { 0xc9, 0xdb, 0x6c, 0x55, 0x9b, 0xe9, 0xae, 0xc8, 0xe2, 0xc4, 0x6c, 0x57, 0x5e, 0xff, 0x25, 0x75, 0x3b, 0xfa, 0x9d, 0x88, 0x6e, 0x93, 0x4b, 0x8c, 0x2d, 0x22, 0x6d, 0xed, 0xa6, 0xe8, 0xc8, 0xbe, 0x8b, 0xea, 0x68, 0xae, 0xc4, 0x01, 0x53, 0x74};
    static const uint8_t returned_515[] = { 0xd0, 0x85, 0xdd, 0xff, 0x1a, 0x1f, 0x8b, 0x9d, 0x38, 0xd4, 0x13, 0xa6, 0x6c, 0x92, 0x44, 0x4d, 0xe1, 0x4f, 0x5e, 0x76, 0x2d, 0x77, 0x12, 0x7c, 0x83, 0x03, 0x8a, 0x77, 0x53, 0xf0, 0x21, 0x00, 0x20, 0xec, 0xd6, 0x48, 0x13, 0xf0, 0xf8, 0x8d, 0xc6, 0xa7, 0x14, 0x42, 0x8e, 0xa6, 0xbe, 0xbe, 0x9a, 0x9e, 0x73, 0x8e, 0x7a, 0xfb, 0xea, 0x47, 0x4c, 0x1f, 0xf7, 0x55, 0x3a, 0x31, 0xbf, 0x8c};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_516[] = { 0xf5, 0x63, 0xde, 0xb7, 0x0b, 0xd6, 0x58, 0x73, 0xb8, 0x33, 0xb2, 0xca, 0xba, 0x74, 0x6f, 0x78, 0x97, 0x39, 0x4f, 0xab, 0x8b, 0x13, 0xc3, 0xf9, 0x84, 0xc0, 0x9b, 0x33, 0xbd, 0xbe, 0x8e, 0x95, 0x49, 0xd9, 0x40, 0x70, 0xdd, 0xbb, 0x95, 0x34};
    rng.instantiate(entropy_514, personalization_516, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_515, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13686 */
  {
    static const uint8_t entropy_517[] = { 0xbd, 0x59, 0x8f, 0xec, 0x98, 0xb3, 0x55, 0xc4, 0xca, 0x8b, 0x8f, 0x12, 0x9e, 0x71, 0x17, 0x9b, 0x57, 0x5c, 0x64, 0x93, 0x3d, 0x04, 0xb1, 0xd7, 0x2a, 0x3e, 0x57, 0xd0, 0x4f, 0x50, 0x7c, 0x33, 0x7c, 0x64, 0xf7, 0x28, 0xe7, 0x6c, 0xbd, 0xda};
    static const uint8_t returned_518[] = { 0xd1, 0x98, 0xdc, 0xac, 0xfa, 0xc4, 0x72, 0x19, 0x9d, 0xe0, 0x2a, 0x74, 0xfd, 0x1a, 0x09, 0xee, 0x94, 0x12, 0xeb, 0x31, 0xf0, 0x06, 0xbf, 0x9d, 0xc7, 0x76, 0x7f, 0xca, 0x43, 0xd8, 0xdf, 0xc8, 0x3c, 0x9e, 0xac, 0xc3, 0xbd, 0xc8, 0x2f, 0x2a, 0x08, 0x3a, 0x7a, 0xad, 0xd8, 0xa5, 0xc7, 0x1a, 0xac, 0xd4, 0xaa, 0xb6, 0x9e, 0x11, 0x60, 0xcb, 0xb7, 0x55, 0x8f, 0xd1, 0xb3, 0x7f, 0xb1, 0xdd};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_519[] = { 0x7d, 0xe3, 0xa8, 0x49, 0x20, 0xd4, 0xbe, 0xe4, 0xf3, 0x3e, 0x18, 0xf0, 0x60, 0xad, 0x9a, 0x00, 0xd6, 0x8d, 0xec, 0xd0, 0x02, 0xa3, 0x6c, 0xb8, 0x5d, 0x9b, 0x9d, 0xaf, 0x46, 0x27, 0x12, 0x75, 0x31, 0xea, 0xef, 0xb2, 0xd4, 0xdd, 0x40, 0x6d};
    rng.instantiate(entropy_517, personalization_519, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_518, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13694 */
  {
    static const uint8_t entropy_520[] = { 0x75, 0x55, 0xaa, 0x70, 0x03, 0x9f, 0x91, 0x21, 0x42, 0xcb, 0xb9, 0x9f, 0xcd, 0x54, 0xb6, 0x06, 0x7a, 0x55, 0x1a, 0xfe, 0xfc, 0x82, 0x70, 0x66, 0xe2, 0xba, 0x03, 0x81, 0x6f, 0x76, 0xb0, 0xfd, 0xbc, 0xa8, 0x60, 0x91, 0x19, 0xc2, 0x1d, 0x33};
    static const uint8_t returned_521[] = { 0x27, 0xd7, 0x29, 0xeb, 0x9a, 0x22, 0xd6, 0x7b, 0xf8, 0x30, 0x8b, 0x2e, 0xdd, 0xdb, 0x4d, 0xfb, 0x2c, 0x22, 0xff, 0xcd, 0x17, 0xef, 0x40, 0x45, 0xbc, 0x63, 0xdd, 0x6f, 0xd9, 0xf6, 0x68, 0xa7, 0x4c, 0x23, 0x0b, 0x44, 0x27, 0x7d, 0x9e, 0xe5, 0x04, 0x55, 0x6b, 0x6f, 0xa9, 0xda, 0x96, 0xa8, 0x1b, 0x20, 0x4b, 0x74, 0x09, 0x78, 0x66, 0xb5, 0xfa, 0x62, 0xef, 0x8e, 0x87, 0x3c, 0x55, 0x47};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_522[] = { 0x8c, 0x3d, 0x8c, 0x10, 0x18, 0x4d, 0x41, 0x7e, 0xcc, 0x7b, 0xed, 0x28, 0x32, 0x94, 0x6d, 0xe1, 0x30, 0x1f, 0x3a, 0x28, 0x1a, 0x73, 0xfd, 0x60, 0x03, 0x0c, 0x74, 0x8a, 0xf7, 0xf2, 0x79, 0x95, 0xa3, 0xbe, 0x31, 0xb7, 0x9e, 0x7f, 0x0c, 0xb5};
    rng.instantiate(entropy_520, personalization_522, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_521, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13702 */
  {
    static const uint8_t entropy_523[] = { 0x2d, 0x0c, 0x45, 0xbd, 0xcc, 0xac, 0x3a, 0x97, 0x2f, 0xe4, 0x01, 0x60, 0x13, 0x79, 0xd5, 0xe5, 0xf6, 0x17, 0x3e, 0xde, 0xa8, 0x23, 0xd5, 0x31, 0x86, 0x82, 0x9f, 0x34, 0x3c, 0x0d, 0x1c, 0x84, 0x3a, 0x6d, 0x7a, 0x82, 0x55, 0xc1, 0x5c, 0x9e};
    static const uint8_t returned_524[] = { 0x3d, 0x6f, 0x91, 0x40, 0xfd, 0xb4, 0x6c, 0xc1, 0xa0, 0x4a, 0xe9, 0x87, 0xdd, 0xa9, 0x1a, 0x18, 0xa7, 0xeb, 0x59, 0x24, 0x0c, 0x6b, 0x42, 0x92, 0xf6, 0x4c, 0x84, 0x45, 0xf2, 0x7f, 0x1f, 0x72, 0xa2, 0xd8, 0x0e, 0x84, 0x63, 0xda, 0x01, 0x40, 0x9c, 0xbf, 0x28, 0x41, 0x69, 0x86, 0xed, 0x8a, 0x85, 0xe8, 0xb9, 0xc4, 0xca, 0xa4, 0x54, 0x16, 0x88, 0xae, 0xde, 0x1b, 0x69, 0x05, 0xb3, 0x84};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_525[] = { 0x93, 0x45, 0xdc, 0x1e, 0xe7, 0xc4, 0x28, 0xa9, 0x61, 0xf2, 0xb7, 0x87, 0xe6, 0xf9, 0x48, 0x7f, 0x93, 0x80, 0x62, 0xaf, 0xd5, 0xfe, 0x3b, 0x3c, 0xeb, 0x04, 0xba, 0x84, 0x45, 0xb1, 0x11, 0x8a, 0x8e, 0x2e, 0x30, 0xb3, 0xf0, 0xbc, 0xc2, 0x99};
    rng.instantiate(entropy_523, personalization_525, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_524, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13846 */
  {
    static const uint8_t entropy_526[] = { 0x57, 0xba, 0xaf, 0xe6, 0x34, 0x5d, 0xb0, 0x9f, 0x64, 0xa6, 0xdc, 0xfc, 0xd0, 0x15, 0x02, 0x67, 0x27, 0xde, 0x8d, 0x67, 0xbd, 0x6e, 0x90, 0x8a, 0xbd, 0xde, 0x11, 0xe9, 0xea, 0x07, 0xbf, 0x03, 0x7c, 0x92, 0x61, 0xfd, 0x0f, 0xa9, 0x1f, 0xf9};
    static const uint8_t returned_527[] = { 0xe3, 0x79, 0xa1, 0x00, 0x8a, 0x57, 0x1c, 0xc7, 0xfb, 0x1f, 0x71, 0x76, 0x4c, 0x1c, 0x1a, 0x7e, 0xe8, 0xe0, 0x75, 0x2d, 0xf4, 0xc0, 0x38, 0xb2, 0xb1, 0x62, 0xe0, 0x21, 0x7c, 0x56, 0xde, 0x4e, 0x5d, 0x2a, 0x52, 0xb8, 0x5b, 0x98, 0x8e, 0xce, 0x21, 0xb2, 0x11, 0x01, 0xbb, 0x13, 0xf2, 0x3c, 0x38, 0x2f, 0x81, 0x2c, 0xe3, 0x11, 0x0d, 0x94, 0x4a, 0x59, 0x4b, 0xf6, 0x83, 0x12, 0x73, 0xdc};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_526, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_527, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13854 */
  {
    static const uint8_t entropy_528[] = { 0x1a, 0x58, 0x63, 0x78, 0xc3, 0x66, 0xaf, 0x5c, 0xe0, 0x03, 0xae, 0x0c, 0x0b, 0x97, 0x0b, 0xa8, 0xb4, 0xcf, 0x98, 0x18, 0x17, 0xd5, 0x01, 0x24, 0xcb, 0x47, 0xb8, 0x39, 0xda, 0x20, 0x8e, 0x92, 0x9f, 0x59, 0x27, 0x23, 0x21, 0x98, 0x0a, 0xb4};
    static const uint8_t returned_529[] = { 0xdd, 0x4f, 0x02, 0xfe, 0x69, 0xef, 0xb5, 0xcc, 0x00, 0x76, 0xda, 0x25, 0x13, 0x6f, 0x73, 0x67, 0x3c, 0xf2, 0xba, 0x38, 0x63, 0x5b, 0x5b, 0x1d, 0xd7, 0x9b, 0xab, 0xd6, 0x21, 0xeb, 0x4c, 0x2b, 0x6b, 0xe3, 0xe9, 0xde, 0xbf, 0x43, 0xa7, 0xa2, 0xa7, 0x47, 0xf4, 0xd6, 0xd6, 0x86, 0x1e, 0xa1, 0xad, 0x32, 0xef, 0x70, 0x8f, 0xc9, 0x8d, 0x7b, 0xcf, 0xe1, 0xdc, 0xd3, 0xc7, 0x15, 0x17, 0x5f};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_528, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_529, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13862 */
  {
    static const uint8_t entropy_530[] = { 0x7f, 0xfe, 0x0a, 0x1a, 0x9d, 0x05, 0xe3, 0xac, 0xc9, 0x69, 0x80, 0x88, 0xbb, 0x03, 0x4d, 0x6f, 0xf7, 0x9a, 0x4c, 0x45, 0xd2, 0x3a, 0x15, 0x44, 0xcc, 0xbf, 0x94, 0xe4, 0xd4, 0xe5, 0xbe, 0x2b, 0x8c, 0x90, 0x2d, 0x63, 0xb7, 0x5e, 0xc9, 0x76};
    static const uint8_t returned_531[] = { 0x09, 0x78, 0x45, 0xf0, 0x9c, 0x3e, 0x70, 0xd9, 0x57, 0xaa, 0x6b, 0x21, 0x1f, 0xdf, 0xbc, 0x83, 0xab, 0xc4, 0xe5, 0x22, 0x4d, 0x0d, 0x40, 0x12, 0x3e, 0xf8, 0xc9, 0x44, 0x3a, 0xf4, 0x6a, 0x27, 0x3b, 0x6f, 0x99, 0x85, 0xb9, 0x02, 0x53, 0x74, 0x4f, 0x37, 0x60, 0x2c, 0x9b, 0x71, 0x66, 0x45, 0x8c, 0x37, 0x0a, 0xbb, 0xa3, 0xc9, 0x70, 0x1f, 0xec, 0x7c, 0xe3, 0xe7, 0x8f, 0x34, 0x0e, 0x44};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_530, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_531, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13870 */
  {
    static const uint8_t entropy_532[] = { 0xe9, 0x34, 0x75, 0x96, 0xbb, 0xae, 0x3b, 0x2b, 0x2f, 0x8f, 0xd1, 0xd9, 0xef, 0xe8, 0xa1, 0x66, 0xe2, 0x99, 0xf3, 0x7a, 0xdb, 0xc2, 0xcc, 0x0b, 0x3c, 0xd6, 0x32, 0xda, 0x86, 0x0e, 0xf7, 0xbe, 0x44, 0xae, 0xc3, 0xf2, 0x5a, 0x74, 0xea, 0xa8};
    static const uint8_t returned_533[] = { 0xab, 0x53, 0xf7, 0xee, 0x10, 0xf3, 0xd8, 0xcd, 0x4d, 0x47, 0x50, 0x35, 0x61, 0x1b, 0xa5, 0x18, 0x2f, 0x08, 0x56, 0x71, 0x49, 0x4c, 0x71, 0x50, 0xbb, 0x02, 0xb1, 0xe5, 0x9e, 0xf4, 0xfb, 0x2a, 0x86, 0x0f, 0x72, 0xc4, 0xde, 0x85, 0xbc, 0x68, 0xbe, 0x37, 0x2d, 0x72, 0x74, 0x33, 0xa3, 0xe2, 0x41, 0x6c, 0x43, 0x1f, 0x6f, 0xc5, 0x3b, 0xd5, 0xcb, 0xe3, 0xd2, 0x67, 0x9d, 0x00, 0xe1, 0xd3};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_532, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_533, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13878 */
  {
    static const uint8_t entropy_534[] = { 0x34, 0xa6, 0xed, 0xe9, 0xf5, 0xbb, 0x07, 0x11, 0x52, 0xe9, 0x4b, 0x84, 0xb3, 0x68, 0xb4, 0xd0, 0xd6, 0x2a, 0x63, 0xac, 0xd7, 0x2a, 0xe5, 0x6a, 0x42, 0x40, 0x21, 0x77, 0x69, 0x03, 0x87, 0xa4, 0xbd, 0xb8, 0xfd, 0x82, 0xbe, 0xa0, 0xd1, 0x71};
    static const uint8_t returned_535[] = { 0xee, 0x87, 0x63, 0x99, 0xe8, 0xc2, 0x41, 0x50, 0x8a, 0x8f, 0xfb, 0xbe, 0x51, 0x53, 0x82, 0x17, 0x07, 0xcd, 0x06, 0x48, 0x94, 0x34, 0x6e, 0xe7, 0xfb, 0x88, 0xac, 0x30, 0xfa, 0x62, 0xd4, 0x94, 0xcd, 0xd4, 0xf8, 0x97, 0x64, 0x80, 0xe5, 0x07, 0xc6, 0xa6, 0xc9, 0x48, 0x40, 0x57, 0x46, 0xc9, 0x6c, 0xc4, 0xf0, 0x0d, 0x04, 0x1b, 0xe9, 0x18, 0x21, 0x54, 0xe8, 0x68, 0x2d, 0xe2, 0x83, 0xe4};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_534, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_535, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13886 */
  {
    static const uint8_t entropy_536[] = { 0xfa, 0x58, 0xbf, 0xb2, 0xce, 0x5f, 0x12, 0x1c, 0x5f, 0x13, 0xf2, 0x99, 0x1d, 0x3f, 0xb0, 0x73, 0x6a, 0x3a, 0xb6, 0xec, 0x1c, 0xd7, 0xec, 0xd0, 0x42, 0x66, 0x72, 0x72, 0x0c, 0xb0, 0xb0, 0x7d, 0x1f, 0xbb, 0xd7, 0x6e, 0x5a, 0xc9, 0x31, 0xc9};
    static const uint8_t returned_537[] = { 0x47, 0xa8, 0x6c, 0xa5, 0x30, 0xd6, 0xcc, 0xae, 0xfe, 0xad, 0x5a, 0x7e, 0xc0, 0xd0, 0x19, 0x83, 0x2c, 0x99, 0xe3, 0xb5, 0x7a, 0xed, 0x50, 0xaf, 0x0c, 0xac, 0x75, 0x19, 0x5f, 0x77, 0x2c, 0xde, 0x34, 0x35, 0x3e, 0x96, 0x53, 0x38, 0xf1, 0xd6, 0x0f, 0xbf, 0xa0, 0xa7, 0xe0, 0xb3, 0x81, 0x6f, 0x84, 0xc9, 0x05, 0xf7, 0xbd, 0xc1, 0xfc, 0x07, 0xb7, 0xb0, 0xc4, 0x28, 0x35, 0x0d, 0x4d, 0xa0};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_536, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_537, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13894 */
  {
    static const uint8_t entropy_538[] = { 0x4e, 0xb1, 0xee, 0x44, 0x7c, 0x05, 0x84, 0x4a, 0x85, 0xe7, 0x70, 0xad, 0x94, 0x78, 0xfb, 0xd7, 0x12, 0x5e, 0xa6, 0x37, 0x75, 0x61, 0xf5, 0xe8, 0x82, 0x47, 0x0c, 0x2e, 0xab, 0x03, 0x07, 0xec, 0xc0, 0xf0, 0x89, 0xd9, 0xa5, 0x9a, 0x2f, 0x6e};
    static const uint8_t returned_539[] = { 0x2f, 0xbe, 0xcb, 0x74, 0x9c, 0x54, 0xaa, 0x7e, 0xbd, 0xda, 0x64, 0xff, 0x25, 0x33, 0x48, 0xb9, 0x81, 0x80, 0xb7, 0x89, 0x3d, 0xeb, 0x49, 0xd1, 0x8a, 0x0f, 0x9a, 0x16, 0x2b, 0xcb, 0x0e, 0x3f, 0xd1, 0xea, 0xc4, 0xbb, 0x8a, 0x6b, 0xb5, 0xff, 0xef, 0x8d, 0x42, 0x45, 0xb1, 0x29, 0x1f, 0xd4, 0x0d, 0x4e, 0xce, 0x23, 0xe0, 0x2e, 0x78, 0x78, 0x56, 0x90, 0xd6, 0x39, 0x87, 0x87, 0x9f, 0x39};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_538, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_539, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13902 */
  {
    static const uint8_t entropy_540[] = { 0x77, 0x61, 0x65, 0xc8, 0x7c, 0xc4, 0x17, 0x1f, 0xdf, 0x11, 0x01, 0x6f, 0x3b, 0x5b, 0x7f, 0x0a, 0xca, 0xff, 0xb6, 0x78, 0x92, 0xcb, 0x48, 0x15, 0x67, 0x1f, 0xe6, 0xa7, 0x76, 0x6e, 0xfe, 0x4e, 0x1c, 0x9f, 0x2e, 0x4e, 0x09, 0x01, 0x7e, 0xf1};
    static const uint8_t returned_541[] = { 0x97, 0x28, 0x97, 0x3e, 0xc6, 0x2f, 0x1b, 0x4b, 0x3b, 0x2d, 0xb9, 0x05, 0xf0, 0xc1, 0x99, 0x15, 0x79, 0x5f, 0x9b, 0xae, 0xe4, 0x7a, 0x36, 0xcd, 0x0a, 0xa0, 0x2f, 0x02, 0xdd, 0x9b, 0x4d, 0xd9, 0x10, 0xb2, 0xc0, 0xa9, 0xaf, 0xef, 0x7b, 0x29, 0x0d, 0x1f, 0x7b, 0xee, 0xa3, 0xc6, 0xf2, 0x8b, 0x5b, 0x27, 0x6e, 0x2f, 0x45, 0xc0, 0x3a, 0xb6, 0x05, 0xa3, 0x43, 0x7f, 0x6e, 0x39, 0x89, 0x81};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_540, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_541, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13910 */
  {
    static const uint8_t entropy_542[] = { 0x13, 0xd4, 0x85, 0xf3, 0x61, 0xe6, 0x8c, 0xaa, 0x91, 0xa9, 0xc2, 0x7f, 0xa4, 0xc8, 0x37, 0x2d, 0xb3, 0xb5, 0xb8, 0xb9, 0x5c, 0x44, 0xc4, 0x0c, 0x8d, 0x61, 0x07, 0x1a, 0x6d, 0x9e, 0xb0, 0xf8, 0x2a, 0x7a, 0xae, 0xb1, 0x1d, 0x76, 0xd9, 0x40};
    static const uint8_t returned_543[] = { 0xa0, 0x97, 0x95, 0xc7, 0x46, 0x50, 0xdc, 0xbc, 0x1a, 0x75, 0x07, 0x2b, 0x87, 0x87, 0xd7, 0x85, 0x89, 0x46, 0x66, 0xdd, 0x24, 0xd8, 0xf6, 0x21, 0x91, 0x2d, 0xaa, 0xfe, 0x7d, 0x34, 0x16, 0xb9, 0xd7, 0x6d, 0x7b, 0xd5, 0xf9, 0xac, 0xac, 0x96, 0x0c, 0x03, 0x7d, 0x00, 0xd0, 0xd9, 0x70, 0x3e, 0x4f, 0x8a, 0x2b, 0x19, 0x1a, 0x7e, 0x28, 0x3c, 0x0d, 0xb9, 0xea, 0x57, 0xba, 0x8f, 0x6a, 0x6d};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_542, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_543, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13918 */
  {
    static const uint8_t entropy_544[] = { 0xc0, 0xeb, 0xc2, 0x57, 0xf6, 0xd3, 0xf5, 0x6f, 0x86, 0x08, 0x7b, 0xf1, 0xea, 0xcf, 0xec, 0x3f, 0x46, 0x48, 0x1a, 0xfc, 0xe7, 0x92, 0xb0, 0x7b, 0x7f, 0xda, 0x4d, 0x19, 0xcf, 0x0e, 0x3d, 0xa7, 0x1d, 0x52, 0x31, 0x8a, 0x50, 0x77, 0x5e, 0x9b};
    static const uint8_t returned_545[] = { 0x10, 0x2d, 0xb8, 0xa2, 0x33, 0x8c, 0x29, 0xd0, 0x17, 0xbe, 0xec, 0x79, 0x3b, 0xad, 0x93, 0x73, 0x8e, 0x25, 0x0a, 0x43, 0x94, 0x0d, 0xdb, 0xbc, 0x30, 0xc9, 0xf0, 0xcb, 0xd0, 0x53, 0x42, 0xb4, 0x7c, 0xff, 0xe0, 0x3f, 0xba, 0x8e, 0xad, 0x13, 0x81, 0xea, 0x36, 0x5f, 0x4e, 0xb6, 0x14, 0xeb, 0x00, 0xaf, 0x42, 0x70, 0xf8, 0xf7, 0x41, 0xdb, 0xd8, 0xb0, 0x4f, 0x9e, 0x67, 0x26, 0xf7, 0xa7};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_544, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_545, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13926 */
  {
    static const uint8_t entropy_546[] = { 0x40, 0x34, 0x7a, 0x0b, 0x9b, 0x62, 0x6f, 0x0d, 0x37, 0x53, 0xae, 0x00, 0x14, 0xa0, 0xde, 0xc0, 0x1c, 0x51, 0xe2, 0x30, 0xe4, 0x09, 0xba, 0x6b, 0xc3, 0xaa, 0x01, 0x68, 0x72, 0xe7, 0x51, 0xb7, 0xaa, 0x7b, 0xc8, 0xa2, 0xac, 0xf6, 0xe5, 0x51};
    static const uint8_t returned_547[] = { 0xda, 0x36, 0xb3, 0x6e, 0x21, 0xef, 0x4c, 0x31, 0xb1, 0x63, 0x42, 0x99, 0x1b, 0x80, 0x7c, 0xd6, 0x1b, 0x73, 0x94, 0x27, 0xa5, 0x0d, 0xef, 0x5b, 0x0b, 0x77, 0x35, 0xa5, 0xf1, 0xae, 0xa3, 0xe8, 0x22, 0x91, 0x24, 0xb6, 0x7d, 0x31, 0xce, 0x62, 0xd7, 0x86, 0xc9, 0x13, 0xc2, 0x85, 0xbb, 0x3e, 0x1b, 0xaa, 0x39, 0x37, 0x16, 0xed, 0x1c, 0xbf, 0x0c, 0xa1, 0x92, 0x93, 0xc1, 0x05, 0x56, 0x53};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_546, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_547, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13934 */
  {
    static const uint8_t entropy_548[] = { 0x6f, 0xb7, 0x90, 0xf1, 0x5d, 0x63, 0xd4, 0xfe, 0x49, 0x2d, 0xbe, 0x2f, 0xe1, 0x7d, 0xa1, 0xb7, 0x09, 0xe6, 0x26, 0x3c, 0xbb, 0xb9, 0x43, 0xaa, 0xab, 0xe1, 0x37, 0x2d, 0x1b, 0xe2, 0x34, 0x5c, 0x4e, 0x56, 0x67, 0x13, 0xf5, 0xd8, 0xdb, 0xaa};
    static const uint8_t returned_549[] = { 0x8b, 0x34, 0x5a, 0xf7, 0xa0, 0x88, 0xb4, 0xe2, 0x45, 0x53, 0xc7, 0xc3, 0x4c, 0xad, 0xc8, 0xb0, 0x8d, 0x15, 0xd6, 0xb1, 0x45, 0x42, 0x00, 0x29, 0x18, 0xa1, 0x3c, 0x4d, 0x63, 0x99, 0x8f, 0xca, 0xda, 0xe1, 0x68, 0xf2, 0x58, 0x2d, 0x48, 0x11, 0x12, 0xb0, 0xbb, 0x0c, 0x89, 0xc0, 0x0d, 0xc6, 0x0e, 0x6c, 0xc3, 0xe8, 0x01, 0x89, 0xe5, 0x7c, 0xb4, 0xcd, 0x82, 0xed, 0x00, 0x48, 0x74, 0x38};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_548, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_549, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13942 */
  {
    static const uint8_t entropy_550[] = { 0x97, 0x7c, 0x1f, 0x93, 0x1f, 0x8e, 0xcc, 0xa7, 0xd0, 0x0f, 0x61, 0xa1, 0x4f, 0x50, 0xa3, 0x8a, 0xb9, 0x18, 0xf5, 0x66, 0xce, 0x4a, 0x06, 0xa7, 0x0a, 0x58, 0x4a, 0x42, 0x3f, 0x70, 0xe7, 0xde, 0x75, 0x33, 0xd8, 0x64, 0x28, 0xa7, 0x01, 0x70};
    static const uint8_t returned_551[] = { 0xf1, 0xe6, 0xec, 0x7f, 0x2b, 0x20, 0xf3, 0xd2, 0x77, 0xc4, 0x90, 0x48, 0xc9, 0xef, 0x51, 0xce, 0xb9, 0x3e, 0xce, 0x91, 0x30, 0x88, 0x6c, 0x9e, 0xe9, 0x34, 0x30, 0x20, 0xa3, 0xdc, 0xd1, 0x9f, 0xdf, 0x62, 0xde, 0x24, 0x35, 0xdd, 0x0e, 0xd9, 0xb4, 0xa4, 0x72, 0x8a, 0x1d, 0xc5, 0x6b, 0x72, 0x5b, 0xf2, 0x7e, 0x33, 0xbd, 0x90, 0x13, 0xfe, 0xbc, 0xa4, 0x45, 0xc4, 0x07, 0xdf, 0xed, 0xe2};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_550, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_551, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13950 */
  {
    static const uint8_t entropy_552[] = { 0x58, 0x94, 0xf4, 0xef, 0x7e, 0xa2, 0x39, 0x29, 0x27, 0xcf, 0xa2, 0x1f, 0x61, 0xfa, 0xa0, 0xe1, 0xb1, 0x2e, 0xe4, 0x45, 0x8c, 0x76, 0xc3, 0x80, 0x28, 0x0e, 0x0d, 0xaf, 0x3d, 0xe2, 0x21, 0x51, 0x2c, 0x87, 0xda, 0x31, 0xdf, 0x07, 0x3b, 0xfb};
    static const uint8_t returned_553[] = { 0x0a, 0xd3, 0xc8, 0xe5, 0xad, 0x0c, 0xd1, 0xf3, 0x30, 0x8f, 0x88, 0x2f, 0x9a, 0xa0, 0xaa, 0x5f, 0x29, 0x0d, 0x93, 0xb4, 0xa2, 0x04, 0x5c, 0xeb, 0x86, 0x79, 0x91, 0xf2, 0x64, 0x0c, 0x52, 0x76, 0x15, 0x6b, 0xfb, 0xcc, 0xad, 0xa5, 0x70, 0x31, 0xaa, 0x8e, 0x27, 0x13, 0x21, 0xa6, 0xff, 0x1e, 0xb2, 0x5f, 0xdd, 0xde, 0x4f, 0x40, 0xa1, 0x06, 0xc6, 0x87, 0x5a, 0x99, 0x81, 0x6c, 0x4a, 0x0d};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_552, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_553, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:13958 */
  {
    static const uint8_t entropy_554[] = { 0x1f, 0x5f, 0x78, 0x45, 0x89, 0x59, 0xb3, 0xca, 0xbd, 0x57, 0xa5, 0x56, 0xa8, 0xe7, 0x0c, 0x36, 0x4b, 0xab, 0x26, 0x0a, 0xd5, 0x57, 0x2f, 0xca, 0x41, 0xfc, 0x2b, 0xb6, 0x43, 0x35, 0xfb, 0x88, 0x8a, 0x31, 0xcd, 0xb3, 0x7d, 0xee, 0xf5, 0xd1};
    static const uint8_t returned_555[] = { 0x0c, 0x44, 0x36, 0xf7, 0x54, 0x15, 0xd0, 0xee, 0xc4, 0x11, 0xf5, 0xba, 0x0d, 0x96, 0xfe, 0x33, 0x31, 0x61, 0xc2, 0xd6, 0xfa, 0xa3, 0x0f, 0x6d, 0x80, 0x6d, 0xc4, 0x57, 0xb4, 0x12, 0x3b, 0x7b, 0x2b, 0x65, 0xcf, 0x7b, 0xd8, 0xf4, 0xe6, 0x99, 0xc5, 0x63, 0xec, 0x0c, 0x6f, 0x45, 0xee, 0x37, 0xc3, 0x1b, 0x3c, 0x6c, 0x11, 0xc2, 0x89, 0x27, 0xb7, 0x7d, 0x53, 0x05, 0x3b, 0x00, 0x57, 0xa7};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    rng.instantiate(entropy_554, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_555, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14102 */
  {
    static const uint8_t entropy_556[] = { 0x56, 0xe7, 0x81, 0x09, 0x09, 0x43, 0x68, 0x56, 0xc9, 0x2d, 0xbf, 0x07, 0xd1, 0x26, 0x9c, 0xa5, 0x87, 0x83, 0x84, 0x3d, 0x26, 0x4e, 0xf6, 0x84, 0x2f, 0xab, 0xfd, 0x3d, 0xb2, 0xf6, 0x6f, 0x37, 0x45, 0x15, 0x86, 0xe0, 0x94, 0x1e, 0xf2, 0x98};
    static const uint8_t returned_557[] = { 0x4f, 0x61, 0x10, 0x1e, 0xb1, 0x41, 0xf4, 0x84, 0xc6, 0x99, 0x77, 0x9a, 0x92, 0x95, 0x3a, 0x36, 0x29, 0x03, 0x5e, 0xc2, 0xbd, 0xf1, 0x04, 0x53, 0x29, 0x55, 0xaa, 0xfc, 0x14, 0x0b, 0xb1, 0xf3, 0x77, 0x07, 0x80, 0x62, 0x08, 0x4d, 0x91, 0xe8, 0x0b, 0x7f, 0xa9, 0xc0, 0xf1, 0x71, 0xe5, 0xfb, 0x09, 0x70, 0xd1, 0xa8, 0x48, 0x70, 0x4f, 0xf9, 0xa0, 0xed, 0xb8, 0xef, 0x84, 0xa7, 0xa1, 0x04};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_558[] = { 0x51, 0xb6, 0xf2, 0xe1, 0x65, 0x3e, 0xca, 0x3b, 0x36, 0xd7, 0x6f, 0xd8, 0x89, 0xf7, 0xd0, 0x2f, 0xbf, 0xd6, 0x4c, 0xdd, 0xd4, 0x04, 0x47, 0xf8, 0x4a, 0xb2, 0x04, 0x4f, 0x49, 0xb0, 0xfa, 0x5c, 0x1e, 0xce, 0x0c, 0xfc, 0xa4, 0x66, 0xae, 0x49};
    rng.instantiate(entropy_556, personalization_558, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_557, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14110 */
  {
    static const uint8_t entropy_559[] = { 0x78, 0x19, 0xfa, 0x7e, 0xec, 0x40, 0xed, 0x26, 0xd4, 0xa1, 0xe8, 0xfc, 0xec, 0x1c, 0x0c, 0x57, 0x90, 0x82, 0x82, 0xef, 0xf6, 0x66, 0x67, 0x0a, 0xf8, 0xaa, 0x30, 0x85, 0x51, 0x1d, 0xa8, 0x31, 0xf1, 0x2b, 0x24, 0xaf, 0xc7, 0x72, 0x8c, 0x1d};
    static const uint8_t returned_560[] = { 0x81, 0xf9, 0x87, 0x7a, 0x41, 0x37, 0x1b, 0xaf, 0x63, 0xf7, 0xe4, 0xde, 0xeb, 0x2d, 0xa1, 0x09, 0x85, 0xfd, 0xa9, 0xf5, 0x01, 0x6f, 0x9f, 0x4d, 0xb0, 0x8e, 0xc6, 0xde, 0xf8, 0x10, 0x84, 0x63, 0x81, 0x18, 0x3f, 0xde, 0xd8, 0x77, 0xcf, 0xe4, 0x11, 0x12, 0x77, 0x45, 0x12, 0xc2, 0xb0, 0x35, 0x01, 0xe7, 0xf3, 0xda, 0xf6, 0xd3, 0xa5, 0x8a, 0x0c, 0xbf, 0xd7, 0x40, 0xfe, 0x02, 0x43, 0x2a};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_561[] = { 0x95, 0x56, 0x2e, 0x4c, 0x1a, 0x1b, 0x8e, 0x1d, 0x02, 0x26, 0x06, 0x35, 0x7c, 0xf1, 0x3d, 0x6c, 0xe2, 0x80, 0xa5, 0x25, 0x31, 0x5e, 0x89, 0x9b, 0x33, 0xef, 0xb5, 0xd6, 0x76, 0x5c, 0xb1, 0xeb, 0x3d, 0xa2, 0xd7, 0xab, 0xdc, 0xb0, 0x16, 0x58};
    rng.instantiate(entropy_559, personalization_561, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_560, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14118 */
  {
    static const uint8_t entropy_562[] = { 0x89, 0x12, 0x1d, 0x4c, 0x10, 0xa8, 0x9d, 0x43, 0x92, 0xdc, 0x9b, 0x0a, 0xe5, 0x70, 0x55, 0xa5, 0xdf, 0x5b, 0x9b, 0xde, 0xdc, 0xaf, 0xe1, 0xc7, 0x37, 0x4f, 0xc4, 0xbb, 0x17, 0xb5, 0xf0, 0x68, 0xab, 0xd2, 0x2d, 0x57, 0x68, 0x82, 0xeb, 0x66};
    static const uint8_t returned_563[] = { 0x7e, 0xe7, 0x4c, 0x8b, 0x6d, 0xa5, 0x46, 0x47, 0x48, 0x80, 0x1c, 0xb5, 0xdc, 0x16, 0x2c, 0x40, 0x71, 0x3d, 0xe8, 0x0b, 0x81, 0x0f, 0x5b, 0x01, 0xfd, 0x63, 0xb0, 0xa5, 0xdc, 0x27, 0x10, 0xf4, 0x90, 0xf2, 0x41, 0xf9, 0xfb, 0x47, 0x9c, 0x70, 0x51, 0x2c, 0xf7, 0x79, 0xbc, 0x57, 0xca, 0x02, 0xaf, 0x85, 0xd9, 0x56, 0x03, 0x92, 0x2e, 0xe5, 0x79, 0xb9, 0x01, 0x6a, 0x54, 0x34, 0xfe, 0x71};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_564[] = { 0x3c, 0x2f, 0x07, 0x98, 0xee, 0x67, 0x61, 0x39, 0x11, 0x29, 0xee, 0xdf, 0xaa, 0x48, 0x3d, 0xb1, 0xcd, 0x3c, 0x18, 0xc2, 0x7f, 0x38, 0x06, 0x33, 0x4f, 0x7d, 0xb3, 0xc1, 0x02, 0x22, 0xbb, 0x8b, 0xc5, 0xfc, 0xaa, 0xc2, 0x38, 0x79, 0x19, 0x41};
    rng.instantiate(entropy_562, personalization_564, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_563, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14126 */
  {
    static const uint8_t entropy_565[] = { 0x72, 0xe2, 0xd6, 0x3d, 0x87, 0x99, 0x4b, 0x5d, 0x55, 0xfb, 0x25, 0x77, 0xd1, 0x01, 0xad, 0x23, 0xb6, 0x44, 0x7c, 0xfc, 0xe6, 0xb2, 0x70, 0x0c, 0x03, 0x70, 0xf7, 0x7d, 0xed, 0x60, 0x80, 0x92, 0xc8, 0x74, 0x60, 0x12, 0x47, 0x2f, 0xab, 0x02};
    static const uint8_t returned_566[] = { 0x63, 0xf2, 0xf8, 0x59, 0x1d, 0x71, 0x0d, 0xb0, 0xda, 0x15, 0x3f, 0xda, 0x01, 0xdf, 0x95, 0xf5, 0x0e, 0x7d, 0xe3, 0x2e, 0xc2, 0xea, 0x06, 0xf8, 0x9b, 0x11, 0x9a, 0xce, 0x8f, 0x28, 0x24, 0xa5, 0x60, 0x2c, 0x65, 0xf8, 0x22, 0x5a, 0x64, 0x36, 0xef, 0xa3, 0x10, 0xa6, 0x06, 0x60, 0xaf, 0xee, 0x3e, 0x60, 0x2b, 0x6c, 0xb7, 0x87, 0x24, 0x9b, 0x35, 0x88, 0xf6, 0x38, 0x13, 0xb5, 0xed, 0x1b};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_567[] = { 0x0e, 0x5f, 0x57, 0x9a, 0x1a, 0xa4, 0xfe, 0xf3, 0x5a, 0x70, 0x1a, 0x7a, 0xb3, 0x66, 0x4a, 0x4f, 0xd0, 0x83, 0xe1, 0x37, 0xd9, 0xcc, 0x13, 0xbd, 0xf0, 0xbf, 0xb0, 0xed, 0xdf, 0x0b, 0x09, 0x52, 0x5a, 0xa1, 0x5d, 0x14, 0x7f, 0x0e, 0xee, 0xd8};
    rng.instantiate(entropy_565, personalization_567, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_566, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14134 */
  {
    static const uint8_t entropy_568[] = { 0x07, 0x97, 0x2b, 0x0b, 0x37, 0x64, 0x6c, 0x12, 0x22, 0xdf, 0x2b, 0xa0, 0xd8, 0x51, 0x81, 0xf6, 0x52, 0xd4, 0x01, 0x13, 0xa6, 0xbd, 0x5a, 0x28, 0x3b, 0x7b, 0x97, 0x08, 0x7a, 0xa3, 0x91, 0xad, 0x3e, 0x9a, 0x2c, 0x29, 0x47, 0xd2, 0x61, 0xc1};
    static const uint8_t returned_569[] = { 0x46, 0x94, 0x46, 0x5c, 0xdc, 0xf2, 0xf6, 0xbc, 0xe8, 0x7f, 0x38, 0x91, 0x30, 0x9d, 0x20, 0x3f, 0x2c, 0xa7, 0x34, 0xc2, 0x8a, 0x25, 0xef, 0xc0, 0x9b, 0x73, 0x3b, 0xd5, 0xd7, 0x77, 0xfe, 0xe9, 0xc0, 0xbf, 0x64, 0x36, 0x27, 0x1e, 0xa2, 0x0e, 0x61, 0xc8, 0x59, 0x35, 0x9c, 0x05, 0xf0, 0x32, 0x0f, 0xe9, 0xb2, 0xcc, 0xe5, 0x44, 0x78, 0x88, 0x3d, 0xde, 0xf7, 0x01, 0xa4, 0xb7, 0x55, 0x64};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_570[] = { 0xa9, 0x4c, 0xcb, 0x58, 0xb7, 0xdd, 0x4e, 0xa1, 0x9d, 0x32, 0x71, 0x99, 0xba, 0x1a, 0x68, 0x59, 0x77, 0x57, 0xc5, 0x18, 0xff, 0x96, 0x8e, 0x18, 0x21, 0xa7, 0x41, 0xf3, 0x0c, 0xea, 0xa4, 0xe0, 0x66, 0x4d, 0x04, 0x29, 0xb6, 0x09, 0xba, 0x68};
    rng.instantiate(entropy_568, personalization_570, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_569, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14142 */
  {
    static const uint8_t entropy_571[] = { 0x76, 0x09, 0xaf, 0x59, 0xf9, 0x7a, 0x0c, 0xf9, 0xc0, 0x11, 0x9c, 0xf6, 0x10, 0x4f, 0x73, 0xfd, 0x69, 0x7d, 0x50, 0xca, 0x3d, 0xb1, 0x24, 0xf2, 0xc5, 0x81, 0x31, 0xb9, 0xfd, 0xb9, 0x41, 0x69, 0x78, 0xd1, 0xc8, 0xe8, 0xad, 0xa4, 0xea, 0x2f};
    static const uint8_t returned_572[] = { 0x17, 0x5c, 0xa6, 0xd0, 0xea, 0x7c, 0x12, 0x3e, 0x7f, 0x0e, 0x1e, 0x2f, 0xed, 0xd5, 0x6a, 0x5a, 0xfa, 0x3a, 0x25, 0x2b, 0x9e, 0x2d, 0x8f, 0xc4, 0x5b, 0xc3, 0x27, 0xe2, 0x4e, 0x60, 0x1e, 0x7d, 0x4c, 0x00, 0xfd, 0xe7, 0xc9, 0x5f, 0x75, 0x13, 0xb9, 0xd6, 0x41, 0xc1, 0x38, 0x26, 0x87, 0xf9, 0x07, 0x94, 0x0f, 0xcf, 0xd2, 0x61, 0x29, 0xc6, 0x62, 0x0d, 0xf4, 0xf5, 0x9c, 0x55, 0x2b, 0x35};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_573[] = { 0x6f, 0xf5, 0x64, 0x30, 0x9e, 0xcb, 0x6d, 0x90, 0x23, 0x3f, 0x8a, 0x3b, 0xc5, 0x2b, 0xdd, 0xa6, 0x89, 0xe5, 0x0c, 0xd4, 0xef, 0x42, 0xd4, 0x8d, 0xd9, 0x3a, 0x81, 0xc5, 0x5b, 0xce, 0xa4, 0x2c, 0xb8, 0xfb, 0x73, 0x02, 0x4a, 0x20, 0xde, 0x2b};
    rng.instantiate(entropy_571, personalization_573, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_572, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14150 */
  {
    static const uint8_t entropy_574[] = { 0x7d, 0x4a, 0x89, 0xb5, 0x32, 0x99, 0x64, 0xf3, 0xa4, 0xe5, 0x22, 0x3e, 0xd6, 0x01, 0x7e, 0xd5, 0x3e, 0x5d, 0x76, 0x57, 0xde, 0x24, 0xad, 0x8b, 0xa5, 0x04, 0x9c, 0x3f, 0x57, 0x92, 0xe0, 0x16, 0x23, 0xa6, 0x52, 0x6e, 0x61, 0xe9, 0x46, 0x8d};
    static const uint8_t returned_575[] = { 0x8b, 0x92, 0x3d, 0x80, 0x12, 0xf3, 0x4e, 0xda, 0xc5, 0xe4, 0x6a, 0x98, 0x1b, 0x0b, 0xd2, 0x21, 0xbf, 0x04, 0x0d, 0x04, 0xc1, 0x7d, 0x01, 0xb4, 0xfa, 0x5b, 0xc2, 0xfc, 0xcd, 0x12, 0x38, 0x25, 0xa5, 0xe1, 0x70, 0x08, 0xcc, 0xff, 0x41, 0x5a, 0x1e, 0x4f, 0x2c, 0x8c, 0x52, 0x1c, 0x8f, 0xfd, 0x8d, 0x36, 0x48, 0x05, 0x0c, 0x9c, 0x89, 0x67, 0x1f, 0xfe, 0xeb, 0xa5, 0x18, 0xa2, 0xc1, 0xd9};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_576[] = { 0xed, 0xd4, 0xcf, 0x25, 0x4a, 0xd4, 0xae, 0xc6, 0xae, 0x61, 0xb5, 0xb9, 0xe0, 0xcc, 0x32, 0x2a, 0x58, 0x24, 0xa0, 0xec, 0x0f, 0xb5, 0x73, 0xf7, 0x60, 0x10, 0x47, 0x6d, 0x11, 0x26, 0x22, 0x1f, 0xe0, 0xb8, 0xf2, 0xb9, 0x40, 0x6b, 0x91, 0xcd};
    rng.instantiate(entropy_574, personalization_576, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_575, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14158 */
  {
    static const uint8_t entropy_577[] = { 0x78, 0x7e, 0xdd, 0x7a, 0xac, 0xe3, 0x06, 0xad, 0x6d, 0x0c, 0x6d, 0xf8, 0x08, 0x8f, 0x32, 0x74, 0x2b, 0xcf, 0x5f, 0x32, 0x1f, 0xd5, 0xf7, 0xfe, 0xd9, 0x57, 0x28, 0x28, 0x25, 0x9f, 0xd0, 0x6c, 0x91, 0x21, 0xc7, 0x8d, 0xd1, 0xc0, 0x5b, 0x52};
    static const uint8_t returned_578[] = { 0x1e, 0x8a, 0xf0, 0xd2, 0x12, 0xda, 0x56, 0x6f, 0x13, 0x3a, 0x88, 0x37, 0x22, 0xd8, 0xe1, 0x72, 0xd6, 0xad, 0xb1, 0xf8, 0x8e, 0x29, 0xd6, 0xef, 0xee, 0x44, 0x7c, 0x30, 0xfe, 0x60, 0x3a, 0x63, 0x01, 0x7e, 0x62, 0x27, 0xea, 0x9d, 0xfa, 0xa8, 0xde, 0x09, 0x3d, 0xc1, 0x7c, 0x81, 0xa3, 0x31, 0x0d, 0xfc, 0x86, 0xb3, 0x21, 0x1d, 0x9e, 0x19, 0x81, 0xe8, 0x53, 0xb0, 0xd3, 0x47, 0xcd, 0xa7};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_579[] = { 0x85, 0xef, 0x86, 0xd2, 0x98, 0xfe, 0xb9, 0x5f, 0x72, 0x35, 0x77, 0xd5, 0xd2, 0x6f, 0xa2, 0x2b, 0xcf, 0xa6, 0x16, 0x98, 0x1e, 0x0e, 0x9e, 0x1a, 0xc1, 0xd5, 0x44, 0xec, 0x3d, 0xf7, 0x65, 0x70, 0xce, 0x7d, 0xa8, 0xc4, 0xe4, 0xa9, 0x58, 0xdb};
    rng.instantiate(entropy_577, personalization_579, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_578, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14166 */
  {
    static const uint8_t entropy_580[] = { 0x01, 0x14, 0x6f, 0x8c, 0x69, 0x7d, 0xdc, 0xd7, 0xf8, 0x5a, 0x59, 0xad, 0xbd, 0xfd, 0x19, 0x23, 0xf0, 0xec, 0xfa, 0xae, 0x88, 0x9c, 0x48, 0x8d, 0xb4, 0x3f, 0x9d, 0x4c, 0x36, 0x7b, 0x62, 0x6b, 0x33, 0x7e, 0xed, 0xf9, 0x17, 0xc3, 0x19, 0x77};
    static const uint8_t returned_581[] = { 0x40, 0x20, 0x40, 0x34, 0x83, 0x72, 0xf9, 0xde, 0x0e, 0xa4, 0x47, 0x8a, 0x52, 0xde, 0xba, 0x7c, 0xc5, 0x5c, 0xae, 0xf5, 0x7b, 0x7f, 0x19, 0x3b, 0xa8, 0x2a, 0xf5, 0x29, 0xe0, 0xbf, 0x75, 0x2f, 0xbb, 0x28, 0x3d, 0xec, 0xe6, 0x87, 0x66, 0xc8, 0x48, 0xdb, 0x0d, 0xd5, 0xc4, 0x9a, 0x2a, 0xb1, 0xdd, 0xf6, 0x25, 0x55, 0x5a, 0x4f, 0xd1, 0xc3, 0x19, 0x9a, 0xa1, 0xf4, 0x02, 0xcb, 0xc2, 0xbb};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_582[] = { 0xf6, 0x78, 0xa4, 0x3a, 0xc0, 0x53, 0x83, 0xdb, 0xca, 0x92, 0x67, 0xff, 0x23, 0x05, 0x05, 0x2e, 0x57, 0x06, 0x4b, 0x69, 0x51, 0xc9, 0xe7, 0xe9, 0xc8, 0x26, 0xed, 0x86, 0x8a, 0x34, 0xfb, 0x0d, 0x0b, 0x26, 0x16, 0x0f, 0x06, 0x3c, 0x58, 0x04};
    rng.instantiate(entropy_580, personalization_582, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_581, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14174 */
  {
    static const uint8_t entropy_583[] = { 0xb0, 0x0a, 0x90, 0x60, 0x86, 0x1e, 0x78, 0xf8, 0x23, 0xd0, 0x3f, 0x31, 0x92, 0x92, 0xb6, 0x12, 0xb5, 0x5a, 0x4c, 0x90, 0xa1, 0xdc, 0xf3, 0xc4, 0x5d, 0xeb, 0x94, 0x55, 0xcf, 0x8d, 0x2a, 0x42, 0x3c, 0xfb, 0xe7, 0xbb, 0x24, 0xa5, 0xdf, 0x04};
    static const uint8_t returned_584[] = { 0xe0, 0x51, 0x87, 0x2f, 0x5e, 0xa1, 0x3c, 0xde, 0xb7, 0xe6, 0x1c, 0xe0, 0x45, 0x09, 0xce, 0x3d, 0x45, 0x39, 0xb2, 0x8c, 0x05, 0x29, 0xcf, 0xef, 0xbf, 0xae, 0x12, 0xa7, 0x50, 0x87, 0x0b, 0x68, 0xfe, 0xd8, 0x9b, 0x31, 0xe8, 0x7f, 0x0d, 0xc3, 0xd5, 0x89, 0xf9, 0xd1, 0xa8, 0x1a, 0xc4, 0xa9, 0xd4, 0xb3, 0x56, 0xc1, 0xcb, 0x1f, 0xdc, 0x14, 0xf0, 0x3a, 0x2b, 0x67, 0x58, 0xcd, 0x9d, 0xb3};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_585[] = { 0x61, 0x1f, 0x2d, 0x5b, 0x2d, 0x00, 0x04, 0x61, 0x7a, 0x8b, 0xb0, 0x2c, 0x8e, 0x4b, 0x08, 0x3a, 0xbf, 0xfa, 0xd6, 0xb6, 0xbd, 0x75, 0x56, 0xa7, 0xc2, 0x7d, 0xcf, 0x5c, 0x7c, 0x6c, 0x83, 0x30, 0xec, 0xf7, 0xa9, 0xe8, 0x83, 0xcf, 0x49, 0xe1};
    rng.instantiate(entropy_583, personalization_585, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_584, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14182 */
  {
    static const uint8_t entropy_586[] = { 0x34, 0x62, 0xa9, 0x2c, 0xd9, 0xff, 0x51, 0x67, 0x97, 0xb6, 0x47, 0x0d, 0xa1, 0xed, 0xdb, 0x45, 0xad, 0xb8, 0x6b, 0x54, 0x49, 0x16, 0x21, 0x11, 0x29, 0xb8, 0xeb, 0xc7, 0xf4, 0x40, 0x6d, 0x02, 0x21, 0x46, 0x75, 0xd4, 0xf9, 0xb1, 0xb1, 0xee};
    static const uint8_t returned_587[] = { 0xde, 0x08, 0xa5, 0xac, 0xb6, 0x75, 0xa7, 0x9a, 0xbd, 0xc3, 0x06, 0xda, 0x7c, 0xc6, 0xb7, 0xd4, 0x8d, 0x88, 0x93, 0x0d, 0x77, 0x92, 0xc2, 0xed, 0x35, 0xb0, 0x7c, 0x4f, 0x9a, 0x4d, 0x3a, 0x6d, 0xbe, 0x77, 0x0d, 0x47, 0x45, 0x69, 0x1c, 0x76, 0x00, 0x80, 0x7c, 0x78, 0xb0, 0x6c, 0x1c, 0xf4, 0xf4, 0xe0, 0xde, 0x88, 0x55, 0x2b, 0x74, 0xc8, 0x7c, 0x37, 0x57, 0x2d, 0x3f, 0x0f, 0x9f, 0xe9};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_588[] = { 0xa3, 0x92, 0x36, 0x1e, 0x61, 0x15, 0xba, 0xa4, 0xa5, 0x81, 0x06, 0x8a, 0x6e, 0x37, 0x66, 0x5b, 0xdc, 0x12, 0xd4, 0x5b, 0x8e, 0xe6, 0x56, 0xfc, 0x3b, 0x90, 0xb1, 0xed, 0x01, 0x35, 0xb7, 0xd2, 0xf5, 0x07, 0x6b, 0x68, 0x0d, 0xde, 0x61, 0xb4};
    rng.instantiate(entropy_586, personalization_588, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_587, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14190 */
  {
    static const uint8_t entropy_589[] = { 0xe8, 0x67, 0x36, 0x0a, 0x53, 0xe8, 0x1b, 0xe2, 0xae, 0x58, 0xc4, 0x6d, 0x96, 0xa3, 0xee, 0x7c, 0xf7, 0xbe, 0xf4, 0xb1, 0xfa, 0xd3, 0x5f, 0xa7, 0x17, 0x06, 0x35, 0x37, 0xb4, 0x00, 0xd4, 0x69, 0x18, 0x69, 0x5f, 0xd3, 0x3c, 0xc4, 0xd3, 0x4a};
    static const uint8_t returned_590[] = { 0xb5, 0xc9, 0x04, 0xec, 0x3a, 0x17, 0xad, 0x53, 0xa7, 0x5c, 0x50, 0xea, 0xfc, 0xbe, 0x6b, 0x5f, 0x6e, 0xa0, 0xaa, 0x87, 0xc1, 0x2e, 0x2d, 0x2f, 0x8f, 0x00, 0x3f, 0x53, 0x6e, 0x63, 0xc1, 0xb0, 0x43, 0xe0, 0xb5, 0x5a, 0x7a, 0x5c, 0x15, 0x9f, 0xa3, 0x9c, 0xc5, 0xe4, 0x60, 0xde, 0xf5, 0x04, 0x05, 0x74, 0xa4, 0x68, 0xc5, 0xe4, 0x20, 0x36, 0xb5, 0xa0, 0xb5, 0x76, 0xfe, 0xa6, 0xdf, 0xf3};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_591[] = { 0xdd, 0x54, 0xd9, 0x82, 0xb7, 0x63, 0xd9, 0x82, 0x16, 0x11, 0x63, 0x0f, 0x50, 0x6a, 0x20, 0x21, 0x6b, 0x29, 0x54, 0xa2, 0x03, 0x2e, 0x31, 0xff, 0xc6, 0x39, 0x56, 0x79, 0x83, 0x2e, 0x9b, 0x3f, 0x56, 0x8a, 0x82, 0x29, 0xd3, 0x0a, 0x1c, 0xb3};
    rng.instantiate(entropy_589, personalization_591, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_590, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14198 */
  {
    static const uint8_t entropy_592[] = { 0x8f, 0xd9, 0x4c, 0x6a, 0x49, 0x8e, 0x59, 0xe0, 0xe0, 0xcb, 0x2f, 0x3c, 0x18, 0x9c, 0xf6, 0xa0, 0x5a, 0xaa, 0x38, 0x34, 0xeb, 0xb1, 0x9f, 0xde, 0xaf, 0x1c, 0x90, 0x25, 0x39, 0x94, 0x5c, 0xc6, 0xec, 0x6b, 0x2d, 0x94, 0x14, 0x79, 0x96, 0x2e};
    static const uint8_t returned_593[] = { 0x58, 0xe1, 0x82, 0x9d, 0xc5, 0x31, 0xaf, 0x06, 0xc3, 0x26, 0x65, 0xbf, 0xfa, 0x77, 0xff, 0x9a, 0x71, 0x09, 0x3c, 0x17, 0x68, 0x12, 0x79, 0xa7, 0x14, 0x5e, 0xed, 0x54, 0x90, 0xbc, 0xc3, 0x45, 0xb3, 0x30, 0xca, 0x5d, 0xc3, 0x44, 0x82, 0x49, 0xfb, 0xa1, 0x9f, 0xa4, 0xa9, 0x28, 0x17, 0x5f, 0x2b, 0xce, 0x81, 0x5b, 0x56, 0xc9, 0x1a, 0xe9, 0x65, 0x85, 0x2b, 0x09, 0xa9, 0x9b, 0x01, 0x5e};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_594[] = { 0xba, 0x96, 0xa9, 0x07, 0x1c, 0x21, 0x52, 0x72, 0x9f, 0x78, 0x84, 0xe9, 0xfe, 0xfb, 0x1f, 0x95, 0x8f, 0xbf, 0x32, 0x83, 0x77, 0xe2, 0x51, 0x18, 0xd6, 0xf9, 0xcd, 0xd9, 0x01, 0x30, 0xd4, 0x1b, 0x59, 0x38, 0xed, 0x5d, 0x5e, 0x82, 0x6f, 0xb4};
    rng.instantiate(entropy_592, personalization_594, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_593, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14206 */
  {
    static const uint8_t entropy_595[] = { 0x27, 0xd6, 0xff, 0x3a, 0x4f, 0xc4, 0x69, 0x8a, 0x9a, 0xc2, 0x40, 0xf0, 0x98, 0x9b, 0x3d, 0x59, 0x0b, 0x75, 0x2d, 0x2f, 0xfb, 0xc5, 0xf3, 0x3e, 0x2f, 0x49, 0x5a, 0xce, 0xde, 0x1c, 0xb9, 0xf1, 0x73, 0x2f, 0x53, 0x8b, 0x51, 0x59, 0x1c, 0x3e};
    static const uint8_t returned_596[] = { 0x95, 0x8f, 0x9f, 0x61, 0xad, 0xd6, 0xbf, 0xc9, 0x85, 0x09, 0x35, 0x0b, 0x60, 0x52, 0x01, 0x42, 0x6f, 0xc8, 0x3f, 0xc4, 0x5b, 0x53, 0x83, 0xa5, 0x8d, 0xc8, 0x4e, 0x3e, 0xf8, 0xcb, 0x91, 0x1c, 0xae, 0x5a, 0x3b, 0xc6, 0xf8, 0x55, 0x63, 0xdf, 0x0c, 0x21, 0x6f, 0xe8, 0xcb, 0xc8, 0xea, 0x07, 0x53, 0x79, 0x42, 0x18, 0x60, 0x91, 0x3c, 0xc6, 0xcc, 0x5c, 0xf8, 0x1a, 0xc5, 0x70, 0x67, 0x10};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_597[] = { 0xcb, 0xd7, 0x76, 0xe0, 0x7d, 0xbf, 0x3f, 0x91, 0x8f, 0x38, 0x05, 0xf3, 0x9c, 0x8c, 0xea, 0x89, 0xcb, 0x7a, 0xd6, 0xd2, 0x0f, 0x51, 0x1b, 0x8b, 0x2a, 0xd5, 0x84, 0x84, 0x74, 0x12, 0x88, 0xc4, 0xd2, 0xbe, 0x96, 0x54, 0xf5, 0xb6, 0x79, 0x12};
    rng.instantiate(entropy_595, personalization_597, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_596, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14214 */
  {
    static const uint8_t entropy_598[] = { 0xcf, 0x94, 0x77, 0xba, 0x03, 0x3c, 0x5d, 0x23, 0x24, 0xdd, 0x97, 0xb6, 0x9c, 0xfe, 0x59, 0xd6, 0x6a, 0xe7, 0xf7, 0x32, 0x7a, 0xa9, 0x28, 0xed, 0x1a, 0xd3, 0x6c, 0x2d, 0x9d, 0x63, 0xbe, 0x73, 0x1f, 0xf2, 0xde, 0x9b, 0x29, 0xaa, 0x87, 0xb9};
    static const uint8_t returned_599[] = { 0xac, 0xad, 0xe1, 0x90, 0x50, 0x8f, 0x25, 0x72, 0x4a, 0x3c, 0x7d, 0xd4, 0xd9, 0x60, 0xbe, 0xe0, 0x88, 0xcb, 0x61, 0x52, 0xf3, 0x1a, 0x53, 0x72, 0x95, 0xa8, 0xff, 0x4b, 0x85, 0xaf, 0x94, 0xa0, 0xff, 0x00, 0x6b, 0xe9, 0xce, 0x2f, 0x54, 0x1b, 0x82, 0x37, 0xf6, 0xa7, 0xfc, 0x62, 0xa4, 0xbb, 0x8e, 0x41, 0xac, 0x69, 0x79, 0xa6, 0xf1, 0x12, 0xb5, 0x71, 0x58, 0xaa, 0x6e, 0xca, 0x34, 0x7f};
    uint8_t buffer[64];
    AesCtrDrbg192 rng;
    static const uint8_t personalization_600[] = { 0x21, 0x5a, 0x3e, 0x63, 0x8f, 0xa6, 0xa7, 0x4d, 0x91, 0x59, 0x2b, 0x07, 0xfa, 0x08, 0xf8, 0xd4, 0x98, 0x3c, 0x6a, 0xd0, 0x82, 0x0a, 0x90, 0x8b, 0xa7, 0x35, 0xac, 0x5b, 0xce, 0xe6, 0x8c, 0x3f, 0x67, 0x0f, 0x6f, 0xcf, 0x4d, 0x05, 0xb2, 0x5c};
    rng.instantiate(entropy_598, personalization_600, 40);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_599, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14358 */
  {
    static const uint8_t entropy_601[] = { 0xdf, 0x5d, 0x73, 0xfa, 0xa4, 0x68, 0x64, 0x9e, 0xdd, 0xa3, 0x3b, 0x5c, 0xca, 0x79, 0xb0, 0xb0, 0x56, 0x00, 0x41, 0x9c, 0xcb, 0x7a, 0x87, 0x9d, 0xdf, 0xec, 0x9d, 0xb3, 0x2e, 0xe4, 0x94, 0xe5, 0x53, 0x1b, 0x51, 0xde, 0x16, 0xa3, 0x0f, 0x76, 0x92, 0x62, 0x47, 0x4c, 0x73, 0xbe, 0xc0, 0x10};
    static const uint8_t returned_602[] = { 0xd1, 0xc0, 0x7c, 0xd9, 0x5a, 0xf8, 0xa7, 0xf1, 0x10, 0x12, 0xc8, 0x4c, 0xe4, 0x8b, 0xb8, 0xcb, 0x87, 0x18, 0x9e, 0x99, 0xd4, 0x0f, 0xcc, 0xb1, 0x77, 0x1c, 0x61, 0x9b, 0xdf, 0x82, 0xab, 0x22, 0x80, 0xb1, 0xdc, 0x2f, 0x25, 0x81, 0xf3, 0x91, 0x64, 0xf7, 0xac, 0x0c, 0x51, 0x04, 0x94, 0xb3, 0xa4, 0x3c, 0x41, 0xb7, 0xdb, 0x17, 0x51, 0x4c, 0x87, 0xb1, 0x07, 0xae, 0x79, 0x3e, 0x01, 0xc5};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_601, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_602, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14366 */
  {
    static const uint8_t entropy_603[] = { 0x3b, 0x6f, 0xb6, 0x34, 0xd3, 0x5b, 0xb3, 0x86, 0x92, 0x73, 0x74, 0xf9, 0x91, 0xc1, 0xcb, 0xc9, 0xfa, 0xfb, 0xa3, 0xa4, 0x3c, 0x43, 0x2d, 0xc4, 0x11, 0xb7, 0xb2, 0xfa, 0x96, 0xcf, 0xcc, 0xe8, 0xd3, 0x05, 0xe1, 0x35, 0xff, 0x9b, 0xc4, 0x60, 0xdb, 0xc7, 0xba, 0x39, 0x90, 0xbf, 0x80, 0x60};
    static const uint8_t returned_604[] = { 0x08, 0x3a, 0x83, 0x6f, 0xe1, 0xcd, 0xe0, 0x53, 0x16, 0x45, 0x55, 0x52, 0x94, 0x09, 0x33, 0x7d, 0xc4, 0xfe, 0xc6, 0x84, 0x45, 0x94, 0xfd, 0xf1, 0x50, 0x83, 0xba, 0x9d, 0x10, 0x01, 0xeb, 0x94, 0x5c, 0x3b, 0x96, 0xa1, 0xbc, 0xee, 0x39, 0x90, 0xe1, 0xe5, 0x1f, 0x85, 0xc8, 0x0e, 0x9f, 0x4e, 0x04, 0xde, 0x34, 0xe5, 0x7b, 0x64, 0x0f, 0x6c, 0xae, 0x8e, 0xd6, 0x8e, 0x99, 0x62, 0x47, 0x12};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_603, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_604, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14374 */
  {
    static const uint8_t entropy_605[] = { 0x02, 0x17, 0xa8, 0xac, 0xf2, 0xf8, 0xe2, 0xc4, 0xab, 0x7b, 0xdc, 0xd5, 0xa6, 0x94, 0xbc, 0xa2, 0x8d, 0x03, 0x80, 0x18, 0x86, 0x9d, 0xcb, 0xe2, 0x16, 0x0d, 0x1c, 0xe0, 0xb4, 0xc7, 0x8e, 0xad, 0x55, 0x92, 0xef, 0xed, 0x98, 0x66, 0x2f, 0x2d, 0xff, 0x87, 0xf3, 0x2f, 0x48, 0x35, 0xc6, 0x77};
    static const uint8_t returned_606[] = { 0xaa, 0x36, 0x77, 0x97, 0x26, 0xf5, 0x28, 0x75, 0x31, 0x25, 0x07, 0xfb, 0x08, 0x47, 0x44, 0xd4, 0xd7, 0xf3, 0xf9, 0x46, 0x8a, 0x5b, 0x24, 0x6c, 0xcd, 0xe3, 0x16, 0xd2, 0xab, 0x91, 0x87, 0x9c, 0x2e, 0x29, 0xf5, 0xa0, 0x93, 0x8a, 0x3b, 0xcd, 0x72, 0x2b, 0xb7, 0x18, 0xd0, 0x1b, 0xbf, 0xc3, 0x58, 0x31, 0xc9, 0xe6, 0x4f, 0x5b, 0x64, 0x10, 0xae, 0x90, 0x8d, 0x30, 0x61, 0xf7, 0x6c, 0x84};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_605, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_606, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14382 */
  {
    static const uint8_t entropy_607[] = { 0x37, 0xd8, 0x51, 0xfb, 0x20, 0xab, 0x3b, 0xa7, 0x3b, 0x1d, 0x8d, 0x81, 0xf3, 0x23, 0x90, 0x1a, 0x55, 0x52, 0x9c, 0x26, 0xa8, 0xf7, 0x53, 0xd3, 0x29, 0x80, 0xd6, 0xd2, 0xab, 0xa3, 0xda, 0x27, 0x8b, 0x90, 0x74, 0x00, 0xa1, 0x94, 0x06, 0xe2, 0x55, 0x20, 0x6e, 0x1d, 0x08, 0x58, 0xf3, 0x84};
    static const uint8_t returned_608[] = { 0x96, 0xea, 0xba, 0xfb, 0x45, 0xc7, 0x79, 0x67, 0xb1, 0x4a, 0x66, 0x63, 0xa3, 0x92, 0x38, 0x30, 0x6c, 0xe5, 0x80, 0x38, 0xa3, 0xdc, 0x0b, 0x8a, 0xec, 0xaf, 0x02, 0x31, 0xc4, 0x04, 0xec, 0xba, 0x50, 0xf1, 0xab, 0x0a, 0x17, 0xb1, 0x89, 0x4c, 0xf6, 0xac, 0xb6, 0x30, 0xfe, 0x16, 0x5f, 0x8a, 0x9d, 0x7c, 0x54, 0x12, 0xe1, 0xba, 0xb4, 0xeb, 0x4e, 0xfe, 0x9a, 0xe8, 0x4f, 0x5b, 0x4a, 0x03};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_607, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_608, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14390 */
  {
    static const uint8_t entropy_609[] = { 0xe6, 0x2e, 0xab, 0x30, 0xb9, 0x33, 0x85, 0x93, 0x07, 0x61, 0x04, 0xee, 0x9c, 0x14, 0x8a, 0x6c, 0x22, 0xf7, 0x96, 0xda, 0xed, 0xb7, 0x1b, 0xac, 0xdd, 0xa2, 0x07, 0xb1, 0x97, 0x68, 0xb5, 0xfe, 0xd5, 0xd2, 0x0c, 0x9e, 0xea, 0x12, 0xed, 0x5a, 0xb9, 0x59, 0xc1, 0x43, 0xf7, 0x73, 0xcd, 0xa6};
    static const uint8_t returned_610[] = { 0xf5, 0xea, 0x04, 0x0c, 0x67, 0x0f, 0x83, 0xc2, 0x6f, 0xf2, 0xc3, 0x8f, 0x66, 0x16, 0x9b, 0x57, 0x2f, 0xec, 0xc7, 0x28, 0x3e, 0x90, 0x2f, 0x0f, 0x4b, 0x2f, 0x6a, 0x44, 0x40, 0xf5, 0xb8, 0x97, 0x08, 0x07, 0xd5, 0x8c, 0xa0, 0x14, 0x66, 0xce, 0xc7, 0xfb, 0x68, 0xb4, 0xcf, 0x95, 0x23, 0x55, 0xe7, 0x80, 0x05, 0x0b, 0xf4, 0x8a, 0xd5, 0xb2, 0x0c, 0x17, 0xc7, 0x8a, 0xa0, 0xfc, 0x03, 0x52};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_609, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_610, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14398 */
  {
    static const uint8_t entropy_611[] = { 0x62, 0x45, 0x75, 0x5c, 0xb0, 0x2a, 0xe8, 0x83, 0x91, 0x1c, 0x0d, 0x82, 0x00, 0x90, 0x35, 0x71, 0x5b, 0x23, 0x04, 0xf7, 0x8c, 0xe2, 0xa0, 0xd8, 0xfa, 0x22, 0xd4, 0x7e, 0x7e, 0x1e, 0x39, 0x4f, 0xd9, 0xa7, 0xa1, 0x38, 0x62, 0xef, 0x23, 0x93, 0xbb, 0x38, 0x18, 0xec, 0x49, 0xcb, 0x70, 0xf2};
    static const uint8_t returned_612[] = { 0x3c, 0xd5, 0x90, 0xa0, 0xdf, 0xec, 0xe3, 0x09, 0x40, 0xc1, 0x1f, 0xf2, 0x43, 0xd9, 0x9e, 0x55, 0x2b, 0x53, 0x1a, 0xe1, 0x1b, 0x31, 0xa4, 0x54, 0xb4, 0x2e, 0xd0, 0x4f, 0x2c, 0x77, 0xf2, 0xe2, 0xf5, 0x8f, 0x9b, 0xd1, 0xcd, 0x0a, 0x36, 0x48, 0x0f, 0x84, 0x52, 0x56, 0xbc, 0x82, 0x72, 0x3c, 0x2d, 0xe5, 0xc6, 0xd1, 0x5b, 0xc8, 0xbe, 0x20, 0x40, 0xe5, 0xae, 0x8b, 0x53, 0x31, 0x51, 0x6e};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_611, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_612, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14406 */
  {
    static const uint8_t entropy_613[] = { 0xbc, 0x10, 0xb0, 0x98, 0x5a, 0x1d, 0xa8, 0xd0, 0xbc, 0xbc, 0xed, 0x02, 0x9c, 0xf5, 0x2f, 0x0f, 0xe1, 0x2b, 0x6d, 0x6b, 0xc5, 0x00, 0xdd, 0xff, 0xba, 0xf3, 0x7a, 0x20, 0x90, 0x35, 0x6c, 0xf1, 0xaa, 0xcb, 0x1b, 0xf3, 0x0a, 0xd9, 0x48, 0xf8, 0x7f, 0x89, 0x9c, 0x54, 0x4d, 0x11, 0x57, 0x16};
    static const uint8_t returned_614[] = { 0x85, 0x75, 0xf0, 0xf1, 0xf9, 0x59, 0x58, 0x9e, 0x26, 0x95, 0x89, 0x1d, 0xfa, 0xc5, 0x6d, 0xb7, 0x2b, 0x79, 0x98, 0x1c, 0x60, 0x77, 0xde, 0x92, 0x15, 0x4c, 0x55, 0x57, 0xc3, 0xe8, 0x9a, 0xb7, 0x73, 0x78, 0x27, 0x06, 0x9e, 0xcc, 0x70, 0x0d, 0xe1, 0x83, 0x17, 0xb5, 0xa1, 0xfa, 0x38, 0xc1, 0x1d, 0x67, 0x5b, 0xbb, 0x9b, 0xa2, 0x35, 0xf1, 0x53, 0xc4, 0xf9, 0x89, 0x9b, 0xc4, 0xbb, 0x8f};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_613, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_614, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14414 */
  {
    static const uint8_t entropy_615[] = { 0x03, 0x98, 0xb1, 0xbb, 0x37, 0xf9, 0x67, 0x3a, 0x2d, 0x88, 0xef, 0x41, 0x8b, 0x4c, 0xca, 0x3d, 0x60, 0x09, 0x95, 0x0f, 0xae, 0x93, 0xf0, 0x80, 0x95, 0xa4, 0x96, 0x02, 0x83, 0x32, 0x9c, 0xe7, 0x53, 0x12, 0xbb, 0x21, 0xc3, 0x0d, 0x26, 0xb0, 0xdd, 0xfa, 0xbf, 0x29, 0x60, 0x06, 0x06, 0x5c};
    static const uint8_t returned_616[] = { 0x22, 0x81, 0x6b, 0x8c, 0x4b, 0xcf, 0x34, 0xf8, 0xd5, 0x42, 0x57, 0xc2, 0x17, 0xb5, 0x29, 0xcf, 0x03, 0x8b, 0x6f, 0x6f, 0xb1, 0x86, 0x30, 0x17, 0xa3, 0x43, 0xd5, 0x0c, 0x88, 0x36, 0x96, 0xd4, 0x43, 0xfa, 0x76, 0xc2, 0x59, 0xda, 0xae, 0x46, 0xa7, 0x63, 0x38, 0x2b, 0xcc, 0x28, 0x9d, 0xe5, 0x5b, 0x22, 0x4f, 0x8d, 0xb9, 0x9d, 0x46, 0x83, 0x8c, 0x95, 0x1b, 0x3e, 0x18, 0xa9, 0xfc, 0x26};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_615, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_616, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14422 */
  {
    static const uint8_t entropy_617[] = { 0x4b, 0xfa, 0x09, 0x83, 0x9d, 0xa4, 0x60, 0xe5, 0xb0, 0x88, 0x41, 0x1e, 0xb3, 0x12, 0xa3, 0xc8, 0x9a, 0x85, 0x8e, 0xe8, 0x8c, 0xf3, 0xcb, 0x2a, 0xd4, 0xf8, 0xf9, 0x89, 0x6b, 0xcf, 0xca, 0xe7, 0x2f, 0xbd, 0x28, 0xf6, 0xbb, 0x42, 0x88, 0x11, 0xba, 0x34, 0xfb, 0xe4, 0xf8, 0xc8, 0xf5, 0x18};
    static const uint8_t returned_618[] = { 0x46, 0xa5, 0x74, 0xeb, 0xbd, 0x56, 0x68, 0x61, 0x75, 0x76, 0x80, 0xa5, 0xa3, 0xa0, 0x50, 0xbe, 0xca, 0x92, 0xfa, 0x69, 0x93, 0xba, 0x72, 0xbc, 0xed, 0x22, 0xbc, 0x0a, 0x46, 0xed, 0x00, 0x58, 0x4e, 0x61, 0xdb, 0x69, 0x8e, 0x35, 0x2e, 0x31, 0xc7, 0x4a, 0xf4, 0xf5, 0x71, 0x1b, 0x0a, 0xa1, 0xd9, 0xd4, 0x18, 0x94, 0xff, 0xdb, 0x9c, 0x88, 0x37, 0xc3, 0x8b, 0x1b, 0x37, 0x82, 0xe3, 0x81};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_617, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_618, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14430 */
  {
    static const uint8_t entropy_619[] = { 0x86, 0xd1, 0x15, 0xf1, 0xd3, 0xa1, 0x54, 0xc5, 0x0b, 0x45, 0x56, 0x2a, 0x02, 0xc9, 0x55, 0xe3, 0x07, 0xc1, 0x7f, 0xeb, 0xec, 0xab, 0x4d, 0x13, 0xe0, 0xd5, 0xb6, 0xc7, 0x25, 0x8b, 0x4b, 0xfe, 0xb9, 0x1e, 0x31, 0x6a, 0xd0, 0xf8, 0x7b, 0xbc, 0x0a, 0xe1, 0xd0, 0x9d, 0x4d, 0x60, 0xd3, 0x1a};
    static const uint8_t returned_620[] = { 0xff, 0x02, 0x50, 0xe0, 0x26, 0xef, 0x96, 0x64, 0x34, 0x06, 0x2c, 0x87, 0x55, 0x45, 0xbc, 0x43, 0x66, 0x05, 0xbb, 0x5d, 0x02, 0x87, 0x7a, 0x1b, 0xd3, 0xfd, 0x03, 0xab, 0x87, 0x52, 0xb1, 0x96, 0x37, 0x49, 0xea, 0x20, 0x8d, 0xf5, 0x3f, 0x6c, 0x51, 0x82, 0x64, 0x34, 0xf5, 0xc6, 0xe6, 0xd9, 0x91, 0x84, 0x5c, 0x61, 0x54, 0xf6, 0xb2, 0x00, 0x0d, 0xe6, 0x40, 0xd0, 0x30, 0x28, 0x89, 0x65};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_619, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_620, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14438 */
  {
    static const uint8_t entropy_621[] = { 0xce, 0x4c, 0x6c, 0x49, 0x8e, 0x5d, 0xf8, 0xb6, 0x1d, 0xeb, 0xfa, 0xf1, 0xc2, 0x4c, 0x47, 0x91, 0x09, 0xc8, 0x7c, 0x7d, 0x38, 0x78, 0x2f, 0x50, 0xbb, 0x60, 0x87, 0x71, 0x27, 0xa5, 0x48, 0x05, 0x94, 0x42, 0x8b, 0xd7, 0xa9, 0xfd, 0x71, 0xff, 0xf2, 0xfe, 0x0d, 0x1d, 0xb3, 0xce, 0x6e, 0x2f};
    static const uint8_t returned_622[] = { 0x13, 0x89, 0xf2, 0xa6, 0x13, 0x42, 0x35, 0xe0, 0x8e, 0x7a, 0x0b, 0x41, 0xc4, 0xa1, 0xb5, 0xfd, 0x77, 0xbc, 0xe4, 0x69, 0xfb, 0x68, 0x45, 0xe5, 0x19, 0xcc, 0xad, 0x38, 0x5d, 0x74, 0x64, 0x9f, 0x22, 0x07, 0xc8, 0x44, 0x88, 0x55, 0x67, 0x41, 0xd2, 0x7d, 0x64, 0x35, 0x43, 0x7a, 0xd0, 0x88, 0xd1, 0x1f, 0x52, 0x26, 0x5b, 0x88, 0x2e, 0x47, 0x64, 0x24, 0x02, 0xd1, 0xc0, 0x88, 0x25, 0x62};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_621, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_622, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14446 */
  {
    static const uint8_t entropy_623[] = { 0xc1, 0xda, 0xd0, 0xe3, 0x76, 0xaa, 0x2c, 0x35, 0x0e, 0x0d, 0x89, 0xfc, 0xd2, 0x40, 0x40, 0x99, 0x2c, 0x08, 0xc1, 0x41, 0xad, 0xc3, 0x73, 0xd4, 0x36, 0x07, 0x86, 0xa0, 0x88, 0x12, 0xd2, 0x91, 0x93, 0x29, 0xb4, 0xf5, 0xa5, 0xfa, 0xe4, 0x01, 0x6c, 0xb7, 0x69, 0x9b, 0x06, 0x47, 0xed, 0xfa};
    static const uint8_t returned_624[] = { 0xd3, 0x89, 0x91, 0x53, 0x6f, 0xb0, 0x35, 0x09, 0x53, 0x1f, 0xfa, 0xe4, 0x4c, 0x74, 0x94, 0xf0, 0x5a, 0x73, 0x03, 0x09, 0x20, 0xc2, 0xba, 0xfd, 0x83, 0x3b, 0xe1, 0xa8, 0xc7, 0xf6, 0xd7, 0x41, 0x60, 0x77, 0xd0, 0x08, 0x9b, 0xb6, 0x51, 0xb9, 0x6a, 0xd9, 0x64, 0xc2, 0x6f, 0x11, 0xb3, 0x1b, 0xb0, 0x36, 0x4b, 0x4f, 0x5e, 0x0d, 0xc7, 0xe1, 0x15, 0x04, 0x05, 0x4b, 0x51, 0x10, 0x21, 0x1a};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_623, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_624, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14454 */
  {
    static const uint8_t entropy_625[] = { 0x75, 0x17, 0x3e, 0x81, 0xce, 0x87, 0xe7, 0xc8, 0xd0, 0x34, 0x57, 0x61, 0xee, 0x59, 0xa3, 0xfd, 0x1c, 0x55, 0x5f, 0x37, 0xf7, 0xc2, 0x36, 0xf7, 0xe3, 0xaa, 0xa5, 0xf5, 0xdd, 0xcb, 0x80, 0x89, 0x46, 0x2e, 0x8e, 0xdb, 0xe4, 0xe1, 0x9a, 0xec, 0x24, 0x67, 0x68, 0x4a, 0x57, 0x71, 0x67, 0x88};
    static const uint8_t returned_626[] = { 0x58, 0xbb, 0xc5, 0xce, 0x5c, 0x2d, 0x8b, 0x63, 0x30, 0xc5, 0x85, 0x7a, 0x88, 0x8e, 0xe6, 0xb3, 0xd7, 0x4b, 0x2b, 0xa0, 0x09, 0xc8, 0x55, 0x3c, 0xc7, 0xb8, 0xad, 0xb5, 0x17, 0x93, 0x86, 0x2e, 0x9c, 0x9c, 0x93, 0x39, 0x59, 0xea, 0x73, 0xd7, 0x20, 0x78, 0x6e, 0x47, 0x1d, 0xfd, 0xd2, 0xbe, 0xd5, 0x72, 0xe2, 0x5f, 0x68, 0x3d, 0xcd, 0x6f, 0x7e, 0x72, 0x9d, 0xb0, 0x25, 0x4f, 0x74, 0xad};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_625, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_626, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14462 */
  {
    static const uint8_t entropy_627[] = { 0xa7, 0xc5, 0x7c, 0x5a, 0xf2, 0x8a, 0x25, 0x89, 0x26, 0x83, 0x8c, 0x39, 0xae, 0x62, 0x19, 0x40, 0x05, 0xc9, 0x3a, 0xff, 0xfe, 0x55, 0x92, 0xa6, 0x85, 0xb1, 0x50, 0xc9, 0xde, 0x3c, 0xcf, 0x79, 0xc2, 0x23, 0x61, 0x66, 0x74, 0xd6, 0x76, 0x51, 0x7f, 0x4b, 0xd1, 0xa2, 0xfc, 0x3b, 0xd6, 0xec};
    static const uint8_t returned_628[] = { 0xa0, 0xea, 0x3a, 0xf0, 0xcc, 0x95, 0x10, 0x3b, 0xa3, 0xe8, 0x9e, 0x5e, 0x4a, 0x6b, 0x79, 0x2b, 0xfb, 0x19, 0xee, 0xf9, 0x58, 0x02, 0x55, 0xed, 0x76, 0xe7, 0x1e, 0xd0, 0xe5, 0x32, 0x58, 0x48, 0x49, 0x7d, 0x77, 0x57, 0xeb, 0x5c, 0xb3, 0x19, 0x47, 0x5b, 0x77, 0x92, 0x6a, 0xbb, 0x6a, 0x2b, 0xfb, 0x44, 0x37, 0xcc, 0xff, 0x0c, 0x83, 0x56, 0xc1, 0xb5, 0x70, 0x5d, 0x85, 0x84, 0x2d, 0x93};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_627, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_628, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14470 */
  {
    static const uint8_t entropy_629[] = { 0xb7, 0xf7, 0xe4, 0xe6, 0x83, 0x56, 0xb2, 0xac, 0x2c, 0x2c, 0x00, 0x75, 0xc0, 0xef, 0x5e, 0xc6, 0xf5, 0xa6, 0xf2, 0x25, 0xa1, 0x8d, 0xb0, 0x08, 0x30, 0x26, 0x1a, 0x95, 0x76, 0x57, 0x71, 0xeb, 0xa7, 0x39, 0xa7, 0xcf, 0x8a, 0x11, 0x26, 0xc5, 0x89, 0x94, 0xc4, 0x3b, 0x2d, 0x28, 0x02, 0x4a};
    static const uint8_t returned_630[] = { 0xa1, 0x5e, 0x8c, 0xc4, 0x37, 0xa6, 0x00, 0xa5, 0x1d, 0xcf, 0xb7, 0x78, 0xaf, 0xa2, 0x3d, 0x57, 0x7d, 0x0e, 0x56, 0xb0, 0x04, 0xf5, 0x6e, 0xeb, 0x28, 0x6e, 0x6c, 0x94, 0x9d, 0x98, 0x2b, 0xdb, 0x93, 0x53, 0xcb, 0xc6, 0x3d, 0x33, 0xd7, 0xd3, 0x97, 0xce, 0xb4, 0xfe, 0xa5, 0x1a, 0x6d, 0xf0, 0xb4, 0xd6, 0xd4, 0xcd, 0x32, 0xb9, 0x06, 0x5b, 0xc4, 0x11, 0x0d, 0x79, 0x0c, 0x61, 0x0e, 0x44};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_629, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_630, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14614 */
  {
    static const uint8_t entropy_631[] = { 0x22, 0xa8, 0x9e, 0xe0, 0xe3, 0x7b, 0x54, 0xea, 0x63, 0x68, 0x63, 0xd9, 0xfe, 0xd1, 0x08, 0x21, 0xf1, 0x95, 0x2a, 0x42, 0x84, 0x88, 0xd5, 0x28, 0xec, 0xeb, 0x9d, 0x2e, 0xc6, 0x9d, 0x57, 0x3e, 0xc6, 0x21, 0x62, 0x16, 0xfb, 0x3e, 0x8f, 0x72, 0xa1, 0x48, 0xa5, 0xad, 0xa9, 0xd6, 0x20, 0xb1};
    static const uint8_t returned_632[] = { 0xf7, 0xfa, 0xb6, 0xa6, 0xfc, 0xf4, 0x45, 0xf0, 0xa0, 0x43, 0x4b, 0x2a, 0xa0, 0xc6, 0x10, 0xbd, 0xef, 0x54, 0x89, 0xec, 0xd9, 0x54, 0x14, 0x63, 0x46, 0x23, 0xad, 0xd1, 0x8a, 0x9f, 0x88, 0x8b, 0xca, 0x6b, 0xe1, 0x51, 0x31, 0x2d, 0x1b, 0x9e, 0x8f, 0x83, 0xbd, 0x0a, 0xca, 0xd6, 0x23, 0x4d, 0x3b, 0xcc, 0xc1, 0x1b, 0x63, 0xa4, 0x0d, 0x6f, 0xbf, 0xf4, 0x48, 0xf6, 0x7d, 0xb0, 0xb9, 0x1f};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_633[] = { 0x95, 0x3c, 0x10, 0xba, 0xdc, 0xbc, 0xd4, 0x5f, 0xb4, 0xe5, 0x47, 0x58, 0x26, 0x47, 0x7f, 0xc1, 0x37, 0xac, 0x96, 0xa4, 0x9a, 0xd5, 0x00, 0x5f, 0xb1, 0x4b, 0xda, 0xf6, 0x46, 0x8a, 0xe7, 0xf4, 0x6c, 0x5d, 0x0d, 0xe2, 0x2d, 0x30, 0x4a, 0xfc, 0x67, 0x98, 0x96, 0x15, 0xad, 0xc2, 0xe9, 0x83};
    rng.instantiate(entropy_631, personalization_633, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_632, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14622 */
  {
    static const uint8_t entropy_634[] = { 0xa5, 0xca, 0x32, 0xff, 0x18, 0x30, 0x55, 0x55, 0xd3, 0x2e, 0x27, 0x0f, 0x17, 0x05, 0x29, 0x23, 0x2c, 0x45, 0x87, 0x79, 0xea, 0xac, 0xe2, 0x21, 0xac, 0x49, 0x58, 0xb4, 0x22, 0x6d, 0xf8, 0x18, 0x9e, 0x42, 0xb0, 0x84, 0x4f, 0xc7, 0x65, 0x75, 0x1a, 0x62, 0x91, 0xa6, 0x0a, 0x35, 0xd8, 0xb4};
    static const uint8_t returned_635[] = { 0x00, 0x85, 0x1c, 0xac, 0x32, 0x04, 0x32, 0x6d, 0x97, 0xb5, 0xf2, 0x6c, 0xd0, 0xbc, 0x05, 0xfe, 0xaf, 0xc3, 0x4f, 0x56, 0xb5, 0xb7, 0xde, 0xf2, 0x64, 0x0b, 0xf5, 0xa1, 0x2d, 0xa0, 0x09, 0x0d, 0x85, 0x32, 0x0f, 0x31, 0x32, 0xfe, 0x72, 0x12, 0xc8, 0x6d, 0x65, 0xf3, 0xb9, 0x38, 0x36, 0x6e, 0xae, 0x25, 0xcd, 0x92, 0x33, 0xc0, 0xf9, 0x94, 0x1a, 0x70, 0xf9, 0x9e, 0x79, 0x5c, 0xde, 0x4c};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_636[] = { 0xf4, 0x2a, 0x3a, 0x32, 0xdc, 0x92, 0xa3, 0xee, 0xff, 0x65, 0x8c, 0x34, 0x9e, 0xb2, 0xe1, 0x81, 0x56, 0x44, 0x58, 0xc2, 0x02, 0xaa, 0x92, 0x2e, 0xc4, 0x36, 0x4e, 0x3a, 0x93, 0xb2, 0xeb, 0xdf, 0xb5, 0x8e, 0xf7, 0x8f, 0xc7, 0x23, 0x7b, 0x70, 0xd8, 0xa2, 0x61, 0xbc, 0xf3, 0x0b, 0xd1, 0xb6};
    rng.instantiate(entropy_634, personalization_636, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_635, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14630 */
  {
    static const uint8_t entropy_637[] = { 0x2e, 0x90, 0xb2, 0xda, 0xff, 0xc3, 0xdd, 0xda, 0x43, 0x8c, 0x38, 0xc1, 0xbd, 0xd6, 0xe0, 0x7d, 0x78, 0xc8, 0x62, 0x22, 0x5d, 0x9d, 0x10, 0xb5, 0x0a, 0x4d, 0x8e, 0x3e, 0x32, 0xcb, 0x63, 0xe2, 0x81, 0x01, 0xc0, 0x6d, 0xd2, 0x0e, 0x2d, 0x17, 0x4d, 0x0f, 0x4e, 0xa1, 0xbd, 0xde, 0xe4, 0x0a};
    static const uint8_t returned_638[] = { 0x84, 0x7f, 0x61, 0x14, 0x8d, 0xaa, 0x5d, 0x82, 0x90, 0xda, 0xe7, 0xf7, 0x29, 0x1b, 0xed, 0x58, 0xa1, 0xa4, 0xa7, 0x62, 0xc8, 0x1d, 0x73, 0xea, 0xbc, 0xa9, 0x15, 0x42, 0xa5, 0xae, 0x22, 0x00, 0xe1, 0x8a, 0xfc, 0x93, 0x97, 0xa1, 0x40, 0x19, 0x56, 0x92, 0x68, 0x26, 0xf6, 0x5d, 0xa3, 0x47, 0x0b, 0x40, 0xfa, 0x91, 0x47, 0x84, 0x2b, 0xb4, 0x9d, 0x4e, 0x0d, 0x83, 0xbf, 0x77, 0xcd, 0x31};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_639[] = { 0xf3, 0x49, 0xed, 0x3b, 0x77, 0x91, 0x84, 0xb8, 0x04, 0x8f, 0x83, 0x3e, 0x79, 0x75, 0x15, 0x74, 0xc4, 0x85, 0xde, 0x0b, 0x8f, 0x6e, 0xc7, 0x3b, 0xf0, 0x8b, 0x3e, 0xa4, 0xb8, 0x2e, 0xee, 0xc4, 0xe7, 0x36, 0xce, 0x5a, 0x80, 0x93, 0xf9, 0x6b, 0x4d, 0x7c, 0x7c, 0xe8, 0x0f, 0x5c, 0xf6, 0x06};
    rng.instantiate(entropy_637, personalization_639, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_638, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14638 */
  {
    static const uint8_t entropy_640[] = { 0x8a, 0xb4, 0xfb, 0x1b, 0xa8, 0x3e, 0x1e, 0x4e, 0x7f, 0x8a, 0xda, 0x84, 0x75, 0xbf, 0xa3, 0x26, 0x31, 0x5d, 0xed, 0x59, 0x6e, 0x21, 0xab, 0x80, 0x4a, 0x90, 0xd5, 0x0b, 0x23, 0x55, 0xd4, 0xb9, 0x6c, 0x8d, 0x37, 0xee, 0x06, 0x28, 0xf8, 0xf2, 0xc2, 0xa0, 0x24, 0x52, 0x55, 0xa0, 0x4b, 0xc5};
    static const uint8_t returned_641[] = { 0x0d, 0x55, 0xde, 0xfb, 0xb1, 0x13, 0x8e, 0xe3, 0x35, 0x57, 0xc7, 0xf9, 0x25, 0x04, 0xd0, 0xcd, 0x32, 0x51, 0x40, 0xc0, 0x88, 0x03, 0x50, 0x44, 0xb3, 0xfb, 0x1c, 0x2f, 0x64, 0x69, 0xd8, 0x50, 0x5e, 0x97, 0xe5, 0x1d, 0x0d, 0xc9, 0x77, 0x98, 0xd5, 0x5b, 0x35, 0xf5, 0xb7, 0x7e, 0x8a, 0xd2, 0x4d, 0xd4, 0x2b, 0xb9, 0xd7, 0x6f, 0x9d, 0x10, 0x22, 0x7a, 0xe4, 0xf0, 0x5d, 0x09, 0xa0, 0x10};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_642[] = { 0xb8, 0x38, 0xdd, 0xdb, 0xbd, 0x18, 0xf3, 0x7c, 0x35, 0x2d, 0xf3, 0x01, 0xa0, 0x79, 0x86, 0xfb, 0x4c, 0xce, 0x42, 0xd8, 0xf9, 0x14, 0x54, 0x7f, 0x49, 0xdb, 0x31, 0x72, 0x1a, 0x8b, 0xf4, 0xa4, 0xd4, 0x52, 0x56, 0xf1, 0xa4, 0x04, 0x99, 0x4d, 0x30, 0x88, 0xba, 0x09, 0x5a, 0xd8, 0x8c, 0x92};
    rng.instantiate(entropy_640, personalization_642, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_641, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14646 */
  {
    static const uint8_t entropy_643[] = { 0x29, 0x71, 0x37, 0xef, 0x2d, 0x57, 0x04, 0xec, 0x08, 0xc8, 0xf6, 0x45, 0x02, 0xaa, 0xdb, 0x69, 0x20, 0x02, 0x70, 0x89, 0xe7, 0x10, 0xb3, 0xde, 0x31, 0x74, 0xb4, 0xaa, 0xf7, 0x56, 0xb7, 0xa0, 0xb1, 0x08, 0x71, 0x95, 0xc7, 0x14, 0x28, 0xf3, 0x41, 0x12, 0x73, 0x0d, 0x10, 0xd3, 0x15, 0x6a};
    static const uint8_t returned_644[] = { 0x55, 0x74, 0x16, 0x00, 0x3e, 0x92, 0x6f, 0xb5, 0xfb, 0xae, 0xf5, 0x0b, 0xd4, 0x8c, 0x26, 0x5f, 0x74, 0xbb, 0x85, 0xa2, 0x95, 0x02, 0xfd, 0x01, 0x53, 0x24, 0x0b, 0x88, 0xee, 0x5b, 0x95, 0xba, 0xdc, 0xe5, 0x81, 0x3c, 0x2a, 0xb2, 0x6d, 0xee, 0xb3, 0xa5, 0xbb, 0x9d, 0x9f, 0x01, 0x85, 0x22, 0x23, 0x86, 0x4b, 0x55, 0x26, 0x62, 0x10, 0xa4, 0xbe, 0x24, 0xe4, 0xe9, 0xc0, 0x2e, 0xf3, 0x2b};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_645[] = { 0xe4, 0x70, 0x98, 0x7f, 0x17, 0x99, 0xcc, 0xae, 0xc5, 0xd2, 0xe7, 0x3b, 0x0c, 0x2d, 0xf2, 0x60, 0xd1, 0xc1, 0x9f, 0xf0, 0x75, 0xbb, 0x97, 0xa6, 0x5c, 0xcb, 0x8c, 0xd7, 0xdc, 0x94, 0x63, 0x7c, 0xa7, 0xa9, 0xf4, 0x69, 0x48, 0xaf, 0xc6, 0xcb, 0xb5, 0xe4, 0x50, 0x94, 0x64, 0x68, 0xd7, 0x9d};
    rng.instantiate(entropy_643, personalization_645, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_644, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14654 */
  {
    static const uint8_t entropy_646[] = { 0x2c, 0x3a, 0x24, 0x01, 0x3a, 0x7c, 0x8b, 0x64, 0x23, 0x85, 0x07, 0xf4, 0x51, 0x27, 0xdd, 0xab, 0xf6, 0x38, 0xdd, 0x69, 0xc8, 0x9f, 0x26, 0x8b, 0xb4, 0x1f, 0x20, 0xf6, 0xed, 0xbf, 0x14, 0x15, 0x74, 0x88, 0x07, 0x2c, 0x17, 0x1a, 0x1c, 0x99, 0xe7, 0xe0, 0x5f, 0xd5, 0x15, 0x41, 0xdf, 0x31};
    static const uint8_t returned_647[] = { 0xe9, 0x57, 0xb7, 0x17, 0x17, 0x79, 0xc4, 0x69, 0x9f, 0xf4, 0xc3, 0xb7, 0x42, 0x74, 0xc2, 0x85, 0x26, 0x10, 0x69, 0x46, 0xbe, 0x77, 0xa3, 0x2f, 0xe6, 0x96, 0xef, 0x41, 0xaa, 0x89, 0x73, 0x50, 0x78, 0x21, 0x5a, 0xab, 0x20, 0x18, 0x19, 0x09, 0x9d, 0x61, 0x0f, 0xd5, 0x68, 0x0b, 0x51, 0x98, 0x2e, 0xe8, 0x32, 0xdf, 0x56, 0x1a, 0xe9, 0x7c, 0xca, 0x25, 0x64, 0xf9, 0x59, 0x5b, 0x4c, 0x4b};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_648[] = { 0x88, 0x69, 0x2b, 0xbe, 0xde, 0xc9, 0xfb, 0x0f, 0xa2, 0xbd, 0x85, 0x73, 0x41, 0x32, 0x8a, 0x0e, 0xea, 0x7a, 0xf1, 0x84, 0xc7, 0x99, 0x90, 0xe0, 0x71, 0x4d, 0x41, 0xd8, 0x4a, 0x11, 0x97, 0x15, 0x53, 0x36, 0xf8, 0x92, 0x43, 0xfa, 0xb6, 0xa3, 0x0b, 0xc9, 0xe3, 0x4a, 0xca, 0x44, 0x6a, 0x6a};
    rng.instantiate(entropy_646, personalization_648, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_647, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14662 */
  {
    static const uint8_t entropy_649[] = { 0x25, 0x58, 0x70, 0x4b, 0xe3, 0x2a, 0x8d, 0xf4, 0x33, 0xd8, 0x76, 0x8c, 0xbd, 0x55, 0x74, 0xc2, 0x4d, 0xd0, 0x9d, 0xe3, 0x15, 0x64, 0xb9, 0xa0, 0xf4, 0x49, 0x5f, 0xc1, 0xee, 0x55, 0x1e, 0x44, 0x8d, 0xf4, 0xfe, 0x8b, 0x14, 0x59, 0xd6, 0xb2, 0xb6, 0x14, 0x4e, 0x1f, 0x4a, 0x10, 0x90, 0xcf};
    static const uint8_t returned_650[] = { 0xb7, 0xf5, 0xd4, 0x86, 0x2b, 0x47, 0x41, 0x99, 0x74, 0xee, 0x09, 0xa2, 0x2c, 0x1c, 0x5e, 0x0e, 0xa5, 0xb0, 0xbf, 0x1f, 0x2e, 0x12, 0x92, 0x32, 0x1e, 0x86, 0x4d, 0x9d, 0x2e, 0xdf, 0x3e, 0x36, 0x71, 0x2d, 0xa8, 0x9b, 0xa4, 0x55, 0x7c, 0xde, 0xdf, 0x03, 0xc6, 0xa3, 0x96, 0xbc, 0x3b, 0x84, 0xc4, 0xa6, 0xe6, 0x64, 0xd6, 0xcb, 0x8d, 0x94, 0xd8, 0x61, 0xfb, 0xe4, 0x72, 0xf2, 0xee, 0x08};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_651[] = { 0x44, 0x2c, 0x2e, 0x1d, 0x96, 0xfe, 0x08, 0xd8, 0x90, 0x54, 0xb6, 0x3a, 0x05, 0xb7, 0x12, 0x2f, 0xf7, 0x93, 0x6f, 0x83, 0x7f, 0x4a, 0xc9, 0x5d, 0x8d, 0xc3, 0xa1, 0xac, 0xa3, 0xe3, 0x68, 0x0b, 0x56, 0xab, 0xb0, 0xe0, 0x22, 0xfd, 0x0b, 0xe9, 0xd0, 0xc1, 0x1f, 0x5a, 0xcd, 0xfa, 0xa8, 0xb7};
    rng.instantiate(entropy_649, personalization_651, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_650, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14670 */
  {
    static const uint8_t entropy_652[] = { 0x04, 0xd8, 0xac, 0xa2, 0x54, 0x24, 0xaf, 0x21, 0xb3, 0xe4, 0x44, 0x96, 0x38, 0xd3, 0x1e, 0x0d, 0x80, 0xa3, 0xee, 0x45, 0x72, 0x78, 0x8c, 0xa8, 0x66, 0x40, 0xf9, 0xb8, 0x7e, 0x4e, 0x07, 0xd9, 0xf7, 0x55, 0xfc, 0x2e, 0x66, 0x6c, 0x59, 0xb0, 0xa9, 0x5f, 0xa1, 0xee, 0x7d, 0xc4, 0x7e, 0xde};
    static const uint8_t returned_653[] = { 0xc9, 0x65, 0xc6, 0x21, 0xa3, 0xab, 0x4b, 0x37, 0x58, 0x54, 0xd4, 0xc2, 0xd5, 0x2f, 0x28, 0xde, 0xbc, 0x07, 0xf7, 0xcf, 0xb7, 0x60, 0x04, 0x89, 0xeb, 0xd9, 0xc7, 0xb6, 0x4b, 0x42, 0x75, 0x57, 0x74, 0x74, 0xbe, 0x07, 0x09, 0x50, 0xfc, 0xa5, 0x62, 0x8f, 0x12, 0x8a, 0x8d, 0xdd, 0xd9, 0x24, 0x0a, 0x43, 0x53, 0x73, 0x95, 0x1d, 0x9a, 0x62, 0x52, 0xb5, 0x20, 0x23, 0x01, 0x0f, 0x6b, 0xdb};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_654[] = { 0x0e, 0xa4, 0x21, 0x03, 0x96, 0xf9, 0x86, 0x12, 0x26, 0x1f, 0x80, 0x77, 0x7d, 0x3a, 0xd5, 0x16, 0x6f, 0x7b, 0x60, 0xc0, 0xbf, 0x82, 0x1f, 0xd1, 0x05, 0xeb, 0xd1, 0x61, 0xef, 0x1c, 0x1c, 0x5d, 0xb9, 0x11, 0xbc, 0x59, 0xbf, 0x29, 0x44, 0x1f, 0x13, 0x22, 0x8e, 0x80, 0x0a, 0xd1, 0x09, 0x9d};
    rng.instantiate(entropy_652, personalization_654, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_653, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14678 */
  {
    static const uint8_t entropy_655[] = { 0xa0, 0xa5, 0x1c, 0x6e, 0x80, 0x11, 0xf2, 0x6d, 0xb5, 0x35, 0x33, 0xe6, 0xbe, 0x87, 0x58, 0xdd, 0x7c, 0xd3, 0xc6, 0xcd, 0x00, 0xce, 0xb4, 0xf4, 0x29, 0xac, 0xd4, 0x0b, 0x19, 0x3b, 0xeb, 0x18, 0x89, 0x13, 0x66, 0x18, 0xc7, 0x82, 0x6a, 0xcd, 0x0b, 0x7e, 0xd1, 0x0e, 0xef, 0x05, 0x51, 0xe5};
    static const uint8_t returned_656[] = { 0xb5, 0xd4, 0x4c, 0xf2, 0x19, 0xe2, 0x6f, 0xc3, 0x14, 0x72, 0x86, 0x95, 0xcf, 0x08, 0x31, 0x3c, 0x2c, 0xe4, 0xd0, 0x5c, 0x9c, 0xf7, 0xd4, 0x46, 0xc5, 0x07, 0x55, 0x0b, 0x46, 0x2c, 0x5d, 0x31, 0x3b, 0x6c, 0xeb, 0x27, 0x54, 0xe2, 0x57, 0x0d, 0x37, 0x53, 0x8d, 0xf9, 0xbe, 0x45, 0xd7, 0x1f, 0x2c, 0xa9, 0xc8, 0xe2, 0x4b, 0x80, 0x75, 0xfe, 0x6c, 0x1a, 0x44, 0xce, 0xed, 0xe8, 0x4a, 0x5f};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_657[] = { 0x10, 0x2c, 0xd6, 0xed, 0x39, 0xce, 0x04, 0x8b, 0x3c, 0xac, 0x4d, 0x53, 0x59, 0x89, 0xbe, 0xf8, 0xd4, 0xb5, 0x13, 0x11, 0x94, 0x8c, 0x86, 0xce, 0xa4, 0x21, 0xe2, 0x68, 0xd3, 0x6b, 0xdb, 0x03, 0xba, 0x12, 0x29, 0x02, 0x60, 0x81, 0x78, 0x3f, 0x8c, 0x05, 0xe2, 0xe7, 0x3c, 0xdd, 0x3e, 0x72};
    rng.instantiate(entropy_655, personalization_657, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_656, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14686 */
  {
    static const uint8_t entropy_658[] = { 0x13, 0xe7, 0xf8, 0x0b, 0xb8, 0x3f, 0x94, 0x45, 0x3b, 0xb5, 0x85, 0x90, 0x79, 0x20, 0x6d, 0x7c, 0x76, 0x44, 0x14, 0x88, 0xa3, 0x04, 0x4f, 0x20, 0xb0, 0xee, 0xdc, 0x5d, 0x06, 0xd3, 0xd8, 0xf8, 0xa6, 0x33, 0xe8, 0x0c, 0xdd, 0x61, 0x04, 0xd8, 0xae, 0x51, 0x54, 0xce, 0xce, 0x90, 0x84, 0x75};
    static const uint8_t returned_659[] = { 0xb4, 0xb4, 0x1a, 0xfe, 0x5a, 0xcd, 0x66, 0x6b, 0xe6, 0x7f, 0x9d, 0xc4, 0x52, 0x09, 0xf6, 0x2b, 0x0a, 0x45, 0x0a, 0x16, 0xf3, 0x9e, 0xe2, 0xfb, 0x28, 0xec, 0x36, 0x28, 0xb8, 0x09, 0xf7, 0x07, 0xf0, 0x9e, 0x5e, 0x6d, 0x7b, 0xad, 0xc1, 0xa5, 0xe7, 0xa2, 0xc5, 0xae, 0x8b, 0x8f, 0xc5, 0x75, 0x88, 0xef, 0x11, 0x0a, 0xed, 0x15, 0x7c, 0x8d, 0x84, 0xc8, 0xb4, 0xbe, 0xdb, 0x43, 0x54, 0x51};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_660[] = { 0x0a, 0xbf, 0x50, 0x1a, 0x53, 0x71, 0x11, 0xf9, 0x92, 0xaf, 0x58, 0xa1, 0x10, 0x74, 0x90, 0x67, 0xb2, 0xb4, 0x76, 0x5d, 0x37, 0xf0, 0xfe, 0x95, 0x1c, 0xfa, 0x6e, 0xda, 0x03, 0xd4, 0x10, 0x02, 0x7d, 0xf0, 0x34, 0xe3, 0x73, 0x98, 0xdf, 0xb6, 0x4d, 0x50, 0xda, 0x51, 0x5d, 0x38, 0x68, 0xa7};
    rng.instantiate(entropy_658, personalization_660, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_659, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14694 */
  {
    static const uint8_t entropy_661[] = { 0x59, 0x7a, 0x5c, 0xa7, 0xe1, 0xde, 0xb5, 0x43, 0x3e, 0x0a, 0x7c, 0x6b, 0x18, 0x85, 0x30, 0xe2, 0x16, 0x6f, 0x3c, 0x8c, 0x16, 0xcc, 0xfc, 0x75, 0x78, 0xc8, 0xd9, 0x93, 0x1d, 0x70, 0xb4, 0xa3, 0x33, 0xa5, 0x36, 0xab, 0xdb, 0x07, 0x25, 0xb6, 0xc8, 0x6f, 0xe3, 0xd2, 0xb2, 0x97, 0x4e, 0x17};
    static const uint8_t returned_662[] = { 0xc1, 0xb9, 0x22, 0x6e, 0x77, 0x18, 0xad, 0xdc, 0xdd, 0xdb, 0xa2, 0x1d, 0x7b, 0x55, 0x39, 0xb4, 0x46, 0x47, 0x75, 0x38, 0x80, 0x34, 0xb5, 0xff, 0x17, 0xf8, 0xb5, 0x12, 0xc6, 0x57, 0x25, 0xce, 0xda, 0x4a, 0x20, 0xff, 0x94, 0x35, 0xa3, 0xaf, 0x06, 0x20, 0x82, 0xbc, 0xfa, 0xf2, 0x9e, 0xc1, 0xab, 0x8f, 0x42, 0xc7, 0x28, 0x56, 0xef, 0x59, 0xd8, 0x81, 0xdf, 0x85, 0xd4, 0x65, 0xc1, 0x4a};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_663[] = { 0x80, 0xc2, 0x28, 0x3d, 0xf1, 0x56, 0x19, 0x74, 0x50, 0x68, 0x72, 0xff, 0xc3, 0x3b, 0xc7, 0x32, 0x0a, 0xe2, 0xac, 0x2d, 0x31, 0xe3, 0x2d, 0x9c, 0x04, 0xbb, 0x75, 0xdd, 0x8a, 0x8c, 0xfa, 0x4c, 0x89, 0x59, 0x7c, 0x90, 0x78, 0x62, 0x2e, 0xb4, 0xd2, 0x90, 0x04, 0x66, 0x62, 0x5c, 0x0c, 0x9e};
    rng.instantiate(entropy_661, personalization_663, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_662, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14702 */
  {
    static const uint8_t entropy_664[] = { 0x32, 0x75, 0x82, 0x41, 0xcc, 0x57, 0x2b, 0xb8, 0x82, 0x19, 0xe9, 0xc8, 0x28, 0x0c, 0x3d, 0x99, 0xfd, 0xae, 0x0c, 0xd8, 0xe8, 0x78, 0xf8, 0xc0, 0xcd, 0xf1, 0x12, 0xf1, 0x7c, 0xcc, 0xb0, 0x12, 0x1f, 0xbf, 0xb0, 0x85, 0x9d, 0x27, 0xa0, 0x73, 0x4d, 0xa2, 0xe8, 0xc6, 0xde, 0x4c, 0xd8, 0x0a};
    static const uint8_t returned_665[] = { 0xf6, 0xff, 0x29, 0x50, 0x4d, 0xd7, 0xae, 0x63, 0xd6, 0x01, 0x6a, 0x62, 0xd7, 0x7e, 0xd0, 0x14, 0x86, 0xd0, 0x22, 0xe1, 0x4e, 0x2b, 0x72, 0x81, 0x95, 0x6a, 0xa2, 0xf9, 0xd5, 0x70, 0xda, 0x3a, 0x3e, 0xec, 0x8a, 0x74, 0x45, 0x29, 0x56, 0x4f, 0x55, 0x60, 0x89, 0x05, 0xb0, 0x9a, 0x08, 0xfa, 0x78, 0x1c, 0xda, 0x39, 0x83, 0x62, 0x07, 0xf6, 0xf5, 0xc1, 0x65, 0xd2, 0x71, 0x53, 0xfc, 0xdd};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_666[] = { 0x62, 0x8c, 0xb6, 0x71, 0x76, 0xe1, 0x87, 0xed, 0x10, 0x1f, 0x9f, 0x72, 0xa5, 0x23, 0x68, 0xc2, 0x47, 0x5b, 0x38, 0xe6, 0x92, 0x29, 0x72, 0x21, 0xc2, 0x4c, 0xe9, 0x5f, 0x28, 0x01, 0xfa, 0xb1, 0xc2, 0x9a, 0x40, 0x85, 0x66, 0x4b, 0xe4, 0xf7, 0x51, 0xb5, 0xa6, 0x4d, 0x78, 0x7f, 0xce, 0x29};
    rng.instantiate(entropy_664, personalization_666, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_665, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14710 */
  {
    static const uint8_t entropy_667[] = { 0x10, 0x1f, 0x19, 0xed, 0x66, 0x58, 0x74, 0x16, 0x17, 0x9b, 0xaa, 0x90, 0x1d, 0x8b, 0x88, 0x8b, 0x75, 0x77, 0x0f, 0xfe, 0x67, 0x91, 0x17, 0xf1, 0x0f, 0x25, 0xb4, 0x6f, 0x65, 0x9a, 0x57, 0x0d, 0xdb, 0xde, 0xf0, 0x85, 0x57, 0x8d, 0xed, 0x5e, 0x0d, 0x74, 0xfa, 0xda, 0x68, 0x37, 0xfb, 0x5f};
    static const uint8_t returned_668[] = { 0x7f, 0x61, 0x38, 0x44, 0xa6, 0xe1, 0x06, 0x36, 0xfb, 0x27, 0xd8, 0xb1, 0x46, 0x25, 0x7d, 0x10, 0x93, 0x2c, 0x37, 0xc7, 0x61, 0x60, 0x99, 0x89, 0x39, 0x28, 0xd2, 0xd4, 0x58, 0xf2, 0x94, 0xae, 0x16, 0x5d, 0xef, 0x19, 0xf7, 0x17, 0x5e, 0x79, 0x8c, 0x0d, 0xce, 0xd4, 0xab, 0x7d, 0x96, 0xde, 0xf8, 0x8c, 0xd6, 0x53, 0xb3, 0x26, 0x4f, 0x41, 0xe7, 0x56, 0xa0, 0x43, 0xaf, 0x6f, 0x39, 0xc2};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_669[] = { 0xff, 0xeb, 0xb3, 0xda, 0x75, 0x65, 0x94, 0x6e, 0xd3, 0x8a, 0x4d, 0x5c, 0x85, 0x0c, 0x06, 0x8f, 0x0c, 0xb1, 0x0f, 0x6c, 0xe5, 0x03, 0x44, 0x00, 0x06, 0xf9, 0x72, 0xa3, 0x66, 0xdd, 0x61, 0xc3, 0xe9, 0xe1, 0xb0, 0x0c, 0x65, 0x66, 0xba, 0xf8, 0xee, 0xbe, 0x0f, 0xc8, 0x68, 0xce, 0x36, 0x3d};
    rng.instantiate(entropy_667, personalization_669, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_668, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14718 */
  {
    static const uint8_t entropy_670[] = { 0x22, 0x48, 0x09, 0xc4, 0x3b, 0xcd, 0xb4, 0x6c, 0x52, 0xfe, 0x30, 0x98, 0xcc, 0x2d, 0x88, 0xd0, 0xd2, 0x6c, 0x34, 0xe7, 0x6e, 0x58, 0xf9, 0x70, 0x47, 0x02, 0x7a, 0xdf, 0xe9, 0x3f, 0x8b, 0xfa, 0x01, 0xc5, 0x5d, 0x5b, 0x3c, 0x26, 0x7b, 0xc6, 0x02, 0x89, 0xec, 0x82, 0xd2, 0xfa, 0x21, 0xbc};
    static const uint8_t returned_671[] = { 0x48, 0xa5, 0x1f, 0xb3, 0xc3, 0x5b, 0x31, 0x30, 0x58, 0x98, 0x7b, 0xc1, 0x0f, 0x67, 0x23, 0xae, 0x5d, 0xf0, 0x51, 0xe1, 0x80, 0xbf, 0x9b, 0x5b, 0x0f, 0xd8, 0xb4, 0xc4, 0xf1, 0x2e, 0xe4, 0x57, 0xf4, 0xd1, 0x76, 0x81, 0x38, 0x18, 0x65, 0x79, 0x7b, 0x2f, 0x76, 0x1f, 0xb0, 0x5f, 0x12, 0xe6, 0xa9, 0xeb, 0x18, 0xb1, 0xf9, 0x5d, 0x63, 0x9a, 0x4a, 0xf5, 0xb1, 0x61, 0x31, 0x68, 0xc1, 0xfe};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_672[] = { 0x1b, 0xde, 0x6b, 0xbd, 0xcc, 0xe0, 0x20, 0xec, 0xe3, 0x7f, 0xe2, 0x93, 0x1a, 0x70, 0xa8, 0x8c, 0x5c, 0x36, 0xb8, 0xd2, 0x9c, 0xb0, 0x75, 0x90, 0xc9, 0xdf, 0xd2, 0x3f, 0x8d, 0xa8, 0x67, 0x76, 0x46, 0x04, 0x6d, 0xfe, 0xef, 0xeb, 0x17, 0xb4, 0x5a, 0x09, 0xe6, 0x21, 0xe2, 0x63, 0xd4, 0x06};
    rng.instantiate(entropy_670, personalization_672, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_671, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14726 */
  {
    static const uint8_t entropy_673[] = { 0x4e, 0x37, 0xee, 0x86, 0x49, 0xa8, 0x6d, 0xd0, 0xba, 0xb8, 0x78, 0x5a, 0x1e, 0x3a, 0xcb, 0xd2, 0xc3, 0xa5, 0x7c, 0xa3, 0x46, 0xd0, 0xe3, 0x14, 0x76, 0x49, 0x0e, 0x49, 0xb5, 0x88, 0xb9, 0x28, 0x23, 0x2d, 0xfa, 0x50, 0xcb, 0x1d, 0x96, 0x07, 0x8f, 0x70, 0x68, 0x56, 0x1b, 0x97, 0xe2, 0xf1};
    static const uint8_t returned_674[] = { 0x8b, 0xf9, 0xc2, 0x63, 0xc1, 0x2a, 0x19, 0xc5, 0x05, 0x25, 0xfb, 0x70, 0xcf, 0xe5, 0x69, 0x80, 0xb2, 0x69, 0x57, 0xe5, 0xc2, 0x95, 0xf7, 0x54, 0x62, 0x44, 0xce, 0x6b, 0x7b, 0x1b, 0x90, 0xb2, 0x4c, 0xe3, 0xcf, 0xfc, 0x55, 0x36, 0xe9, 0x6d, 0x97, 0x3b, 0x19, 0x2a, 0x77, 0xf8, 0x78, 0xeb, 0x5e, 0x69, 0x87, 0xe1, 0x05, 0x54, 0x75, 0xa0, 0xab, 0xd0, 0x03, 0x12, 0xd7, 0xa6, 0x5d, 0xd3};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_675[] = { 0x61, 0x33, 0x4c, 0xdc, 0x87, 0x35, 0x33, 0x29, 0x25, 0x22, 0x1a, 0x63, 0x18, 0x98, 0x74, 0x03, 0xa4, 0xc1, 0xc9, 0x36, 0xc0, 0xa8, 0x06, 0x6c, 0xbf, 0xbb, 0x1a, 0x84, 0x51, 0x0b, 0xac, 0x2b, 0xb3, 0x7e, 0xa5, 0x2d, 0x6b, 0xa9, 0xf4, 0xe1, 0xa9, 0x32, 0x69, 0x47, 0x3f, 0x45, 0x66, 0xcb};
    rng.instantiate(entropy_673, personalization_675, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_674, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14870 */
  {
    static const uint8_t entropy_676[] = { 0xfc, 0x7f, 0x26, 0x29, 0xc9, 0xd8, 0x86, 0x72, 0xf8, 0x12, 0x29, 0xbb, 0xcc, 0x0c, 0x7e, 0x75, 0xc4, 0xb7, 0xd8, 0xe5, 0xd9, 0x38, 0x07, 0x02, 0xea, 0x52, 0xdc, 0x49, 0x56, 0x00, 0xa5, 0x6e, 0x4a, 0xe5, 0xf0, 0xa5, 0xc2, 0x5f, 0xb5, 0xd7, 0xe3, 0x1f, 0x5a, 0xef, 0x47, 0x12, 0xbc, 0x19};
    static const uint8_t returned_677[] = { 0xc6, 0x77, 0x5c, 0x9c, 0x64, 0x13, 0x7c, 0x01, 0x84, 0x18, 0xc4, 0xf0, 0x01, 0xd0, 0xe4, 0xd1, 0xf2, 0xdc, 0x44, 0x11, 0xd3, 0x79, 0xa6, 0x78, 0xf1, 0xd7, 0x1e, 0xee, 0x0b, 0xdc, 0x28, 0xc6, 0x6e, 0xac, 0xbd, 0x38, 0xf7, 0x6b, 0xe4, 0x5b, 0xf9, 0x92, 0xa7, 0x09, 0xaf, 0x14, 0xd1, 0x46, 0xc3, 0x5f, 0x91, 0x70, 0x2d, 0x27, 0xa1, 0xf4, 0x17, 0x63, 0x32, 0xeb, 0xd9, 0x03, 0xff, 0xf9};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_676, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_677, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14878 */
  {
    static const uint8_t entropy_678[] = { 0xc3, 0x2c, 0xba, 0x5e, 0xe6, 0x42, 0x91, 0xed, 0x1d, 0x7d, 0xc5, 0x1f, 0x8a, 0xd3, 0xad, 0x40, 0xae, 0x24, 0xc8, 0xfd, 0x2f, 0x78, 0x94, 0x35, 0x93, 0xc8, 0xf0, 0xa0, 0xb5, 0xa5, 0x38, 0x07, 0x98, 0x24, 0x2e, 0xe8, 0x8c, 0xee, 0xba, 0x0d, 0x87, 0x5b, 0x35, 0xa2, 0xd4, 0xfd, 0x8d, 0x19};
    static const uint8_t returned_679[] = { 0x15, 0x73, 0x66, 0xfc, 0x87, 0x77, 0xf6, 0xf0, 0xb7, 0x6a, 0x12, 0xf7, 0xbe, 0x0c, 0xf0, 0x59, 0x9c, 0x7a, 0x2a, 0x39, 0x9d, 0x54, 0xac, 0xba, 0x60, 0x64, 0x26, 0x02, 0x6e, 0x1c, 0x0a, 0x11, 0xb4, 0x38, 0x01, 0xfa, 0x9f, 0x0f, 0x47, 0x06, 0x48, 0xf7, 0xcd, 0x2f, 0x83, 0xd2, 0x58, 0xc7, 0xed, 0x72, 0x34, 0xed, 0x3e, 0xe9, 0xc9, 0xf6, 0x1d, 0x93, 0xda, 0x57, 0x8a, 0x07, 0x0a, 0x4b};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_678, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_679, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14886 */
  {
    static const uint8_t entropy_680[] = { 0x87, 0x9e, 0x28, 0x6b, 0x7d, 0xe4, 0xf4, 0x89, 0x8a, 0x96, 0xd9, 0x99, 0xd1, 0x8d, 0xba, 0x01, 0x55, 0x73, 0x8b, 0xa0, 0x6b, 0xa9, 0xd4, 0x4f, 0x07, 0x55, 0x9a, 0x14, 0xcc, 0x4f, 0x98, 0x4b, 0x7d, 0x1e, 0x3e, 0x93, 0xd6, 0x71, 0x54, 0xa4, 0x6b, 0xcf, 0x90, 0x8d, 0x7f, 0x79, 0xe3, 0xa9};
    static const uint8_t returned_681[] = { 0xa0, 0x77, 0x46, 0x5e, 0x8c, 0x7c, 0x66, 0x52, 0x66, 0xfe, 0x64, 0x31, 0x9c, 0x01, 0xdb, 0x66, 0x34, 0x74, 0xcb, 0x16, 0xb1, 0x61, 0xab, 0xcb, 0x3d, 0xa6, 0x45, 0xf6, 0x2b, 0x46, 0x8f, 0x5e, 0x3b, 0xde, 0x2e, 0x35, 0xd1, 0xca, 0xbc, 0xea, 0xdb, 0x80, 0x1a, 0x15, 0x1b, 0x91, 0xf5, 0xfb, 0xc8, 0x4b, 0x10, 0x91, 0x73, 0x76, 0x5b, 0x17, 0x78, 0xfb, 0xe4, 0xbc, 0x18, 0x79, 0x24, 0x2c};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_680, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_681, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14894 */
  {
    static const uint8_t entropy_682[] = { 0xd2, 0xf9, 0x5e, 0x3a, 0x82, 0x41, 0xd5, 0x01, 0xf0, 0xfa, 0x38, 0xe8, 0xdc, 0x32, 0xf1, 0x5c, 0x71, 0xf7, 0x75, 0x24, 0x6b, 0x05, 0x20, 0x97, 0xfd, 0x02, 0xbe, 0xaf, 0xc8, 0x78, 0xce, 0x8b, 0x47, 0x87, 0xd7, 0x43, 0x2c, 0x65, 0x4a, 0xdc, 0x97, 0x70, 0xa0, 0x3c, 0x6f, 0x6f, 0x1c, 0x3b};
    static const uint8_t returned_683[] = { 0x73, 0x3d, 0x5b, 0xbc, 0x54, 0xfa, 0xd3, 0x27, 0x11, 0x0a, 0xea, 0x87, 0xb9, 0x23, 0xdb, 0x0e, 0x36, 0x59, 0xc0, 0x76, 0xdf, 0x36, 0xa6, 0x63, 0x73, 0xd6, 0xe4, 0xe7, 0x1b, 0xa0, 0x1e, 0xe6, 0x82, 0xab, 0x4a, 0x87, 0xe9, 0x10, 0x3c, 0x78, 0xe4, 0xba, 0x76, 0x89, 0xd3, 0x53, 0xc7, 0x72, 0x54, 0x82, 0xf2, 0x9e, 0xd2, 0x11, 0xf1, 0x05, 0xbd, 0xa9, 0xcd, 0xc3, 0xd1, 0x9d, 0xbc, 0x7b};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_682, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_683, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14902 */
  {
    static const uint8_t entropy_684[] = { 0x08, 0xc6, 0xfb, 0x63, 0x3a, 0x9c, 0x44, 0xf5, 0xb3, 0xb8, 0x78, 0x33, 0x94, 0x0a, 0xc0, 0xeb, 0xc3, 0x4c, 0x63, 0xc3, 0xbc, 0xef, 0x7e, 0x60, 0x0a, 0x09, 0xb5, 0x3b, 0x47, 0x9c, 0x1c, 0xa9, 0xff, 0xd1, 0x4c, 0xda, 0x6b, 0x62, 0x53, 0xfe, 0x97, 0x43, 0x07, 0x81, 0xd3, 0x0f, 0x6d, 0xb0};
    static const uint8_t returned_685[] = { 0xbf, 0xb9, 0x60, 0xbe, 0x98, 0xac, 0x12, 0xdf, 0xcc, 0x9f, 0xe4, 0x54, 0xe4, 0x6b, 0x8c, 0x02, 0x31, 0x17, 0x1b, 0xcd, 0x20, 0xeb, 0x52, 0xfe, 0x86, 0xe4, 0x50, 0x64, 0x92, 0x46, 0xd2, 0xb4, 0x2c, 0x8f, 0x90, 0x18, 0x40, 0x7a, 0x23, 0x24, 0x88, 0xd1, 0x64, 0x47, 0x3c, 0x20, 0x2f, 0xcb, 0x2d, 0xa6, 0xfd, 0x20, 0x7f, 0xdc, 0x7a, 0xf9, 0x27, 0xcb, 0x03, 0x72, 0x24, 0x2b, 0x03, 0xcb};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_684, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_685, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14910 */
  {
    static const uint8_t entropy_686[] = { 0x88, 0xee, 0xe4, 0x06, 0x79, 0xe4, 0x65, 0xdf, 0xf3, 0x84, 0x1a, 0x2f, 0x0d, 0x22, 0x49, 0xd7, 0x50, 0x8b, 0x1e, 0xb2, 0xe3, 0x00, 0x9f, 0x93, 0xb9, 0x2b, 0x62, 0x8b, 0xec, 0x52, 0xe9, 0xba, 0xa9, 0x22, 0xb6, 0x0e, 0xef, 0x9d, 0x26, 0xa4, 0x8b, 0x33, 0x63, 0x70, 0x10, 0xf5, 0xa7, 0x62};
    static const uint8_t returned_687[] = { 0x0d, 0xad, 0x2a, 0x6b, 0x43, 0x80, 0x75, 0xc4, 0xb2, 0xdc, 0x6a, 0x2b, 0xa7, 0xbc, 0x31, 0xfd, 0x54, 0x33, 0x72, 0xd9, 0x7b, 0xd4, 0x09, 0xba, 0x38, 0x1d, 0x48, 0x1c, 0xce, 0xee, 0x4e, 0x81, 0xf6, 0x98, 0xbb, 0x87, 0x30, 0x12, 0x3b, 0x54, 0xca, 0x5c, 0xea, 0xd0, 0x22, 0x68, 0x83, 0x7b, 0xb3, 0xb3, 0x98, 0x79, 0xd9, 0xce, 0x14, 0x71, 0xac, 0x0f, 0xfc, 0x33, 0xc4, 0xd4, 0xf8, 0xf5};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_686, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_687, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14918 */
  {
    static const uint8_t entropy_688[] = { 0x6a, 0xf8, 0xa2, 0xd4, 0x82, 0x13, 0x94, 0x98, 0xf9, 0x53, 0x5d, 0xd3, 0x28, 0x75, 0xac, 0x4a, 0x11, 0x11, 0xf2, 0x4c, 0x99, 0x23, 0x3b, 0x0e, 0x0a, 0xa0, 0xd6, 0xc2, 0x80, 0x32, 0x9b, 0x5d, 0xa4, 0x2d, 0x81, 0xee, 0xf5, 0x4d, 0x71, 0x6e, 0xb2, 0x95, 0xf9, 0x71, 0x89, 0x30, 0x4e, 0x9e};
    static const uint8_t returned_689[] = { 0x5a, 0x41, 0xdd, 0x0e, 0xba, 0x5e, 0x6c, 0x37, 0xb4, 0x05, 0x0c, 0x3f, 0x8f, 0x93, 0x6a, 0x32, 0x02, 0xe3, 0x3c, 0x3e, 0x4e, 0xf9, 0xdf, 0x75, 0x49, 0xbc, 0xf4, 0x11, 0x20, 0x4b, 0x4a, 0x81, 0x43, 0x97, 0x9b, 0xc9, 0xf9, 0xca, 0x7e, 0xfe, 0xaf, 0xa4, 0xfe, 0xb2, 0x1f, 0xec, 0xaa, 0xe0, 0x4c, 0x85, 0xc0, 0xc7, 0x75, 0x7c, 0xc6, 0x67, 0x6f, 0x78, 0xff, 0xf1, 0x42, 0x67, 0xe7, 0x26};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_688, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_689, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14926 */
  {
    static const uint8_t entropy_690[] = { 0xcb, 0xbf, 0xf5, 0x7b, 0xf9, 0x8a, 0x6c, 0xd4, 0x28, 0xcb, 0xd6, 0x61, 0x0d, 0x54, 0x3b, 0xe6, 0x78, 0x16, 0x80, 0xea, 0x29, 0x19, 0xca, 0x90, 0xfc, 0x78, 0xe7, 0x4d, 0x29, 0x93, 0x99, 0x31, 0x9d, 0xff, 0x36, 0x64, 0x7b, 0x4a, 0x6a, 0x4a, 0x82, 0x09, 0xbe, 0x1f, 0x78, 0x3f, 0xc1, 0x9d};
    static const uint8_t returned_691[] = { 0x5e, 0x2e, 0x2f, 0xd2, 0xe6, 0xfa, 0x9a, 0x72, 0x73, 0xa6, 0xc3, 0x5e, 0x12, 0x02, 0x7a, 0x8c, 0xa6, 0x7f, 0xd9, 0x1f, 0xd4, 0xa0, 0x35, 0x2a, 0x05, 0xbc, 0xfe, 0x70, 0x8f, 0x56, 0xd6, 0x0f, 0x2c, 0x94, 0x4b, 0x69, 0xa1, 0x08, 0xeb, 0x21, 0x98, 0xd3, 0x6f, 0xd6, 0xfd, 0x05, 0xec, 0x13, 0x14, 0xb4, 0x06, 0x0e, 0x1a, 0x5b, 0x52, 0x96, 0x12, 0x87, 0xa5, 0xaf, 0x0a, 0x08, 0x10, 0xec};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_690, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_691, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14934 */
  {
    static const uint8_t entropy_692[] = { 0x06, 0xb4, 0xc6, 0x06, 0x00, 0x9b, 0xf1, 0x1d, 0xd4, 0xb8, 0x6f, 0xed, 0x54, 0x4f, 0x67, 0x2c, 0x12, 0xee, 0x0d, 0x1a, 0xb7, 0xd9, 0x99, 0xf4, 0x92, 0xa7, 0xc1, 0x37, 0x86, 0x0f, 0x28, 0x02, 0x6a, 0xb9, 0x9e, 0x1f, 0x19, 0xc8, 0xaa, 0x4f, 0xaa, 0xed, 0x86, 0x10, 0xa2, 0xd8, 0x9b, 0xf5};
    static const uint8_t returned_693[] = { 0x11, 0x8f, 0xc4, 0xbb, 0xeb, 0x0e, 0x58, 0x92, 0x03, 0xc5, 0x68, 0xca, 0x65, 0xf5, 0x36, 0xa8, 0x98, 0x88, 0xb2, 0xfa, 0x6a, 0x9a, 0x2d, 0xe6, 0x12, 0x12, 0xb0, 0xa1, 0x1d, 0x06, 0x55, 0xea, 0xd9, 0x4c, 0xfc, 0x30, 0x93, 0x66, 0x56, 0x11, 0x7a, 0xf2, 0xfe, 0xeb, 0xe5, 0xdd, 0x07, 0xf1, 0x9e, 0xe1, 0x6a, 0xd0, 0x5a, 0x7b, 0x4c, 0xae, 0x06, 0xb4, 0x4e, 0x5e, 0xc2, 0x2d, 0x63, 0x97};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_692, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_693, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14942 */
  {
    static const uint8_t entropy_694[] = { 0x30, 0xdc, 0xe1, 0x11, 0x2c, 0x85, 0x90, 0xe2, 0x25, 0x14, 0xe6, 0xcf, 0x57, 0x03, 0x04, 0xbd, 0x40, 0xc9, 0x62, 0xf3, 0x68, 0x40, 0xb5, 0x29, 0x13, 0x45, 0x47, 0x66, 0xdf, 0x4d, 0x0d, 0x74, 0x56, 0x00, 0xd6, 0x52, 0x00, 0x5f, 0xfb, 0x25, 0x76, 0x05, 0x69, 0x97, 0x3f, 0x2f, 0xce, 0x28};
    static const uint8_t returned_695[] = { 0x75, 0x79, 0x4c, 0x59, 0xa4, 0x79, 0x01, 0x9c, 0x0c, 0x66, 0xa4, 0x26, 0xb5, 0x5a, 0x73, 0x50, 0x17, 0x32, 0xd5, 0x3a, 0x1f, 0x58, 0xc9, 0x06, 0xc8, 0x77, 0xa7, 0x33, 0x49, 0xbe, 0x25, 0x2b, 0xb9, 0x91, 0xc4, 0xd1, 0x13, 0xf2, 0xf4, 0x4f, 0x41, 0x21, 0xde, 0xe9, 0x0d, 0x72, 0xc2, 0x88, 0x7e, 0x49, 0x19, 0x6a, 0x06, 0x10, 0x10, 0x88, 0x18, 0x55, 0xb6, 0xcc, 0x09, 0x2d, 0xe8, 0x97};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_694, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_695, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14950 */
  {
    static const uint8_t entropy_696[] = { 0x80, 0xcf, 0x2e, 0xcf, 0x96, 0xd1, 0x80, 0xd6, 0xa5, 0x5c, 0xff, 0x12, 0xd3, 0x35, 0xb5, 0x52, 0x4f, 0x08, 0xe0, 0x64, 0x85, 0x49, 0x5a, 0x21, 0xee, 0xcd, 0x74, 0xb6, 0xc2, 0x07, 0xb0, 0x86, 0xc7, 0xce, 0xda, 0x69, 0x3e, 0x28, 0xfe, 0x40, 0xd1, 0xc7, 0xc0, 0xb7, 0xed, 0x5e, 0xc2, 0x1c};
    static const uint8_t returned_697[] = { 0x3b, 0xa3, 0x73, 0xb5, 0xd7, 0x27, 0xce, 0xb0, 0x89, 0x0a, 0xbd, 0x97, 0x07, 0x3a, 0x4f, 0x5b, 0x49, 0xef, 0xe1, 0x42, 0x64, 0x83, 0x6c, 0xef, 0x68, 0xe2, 0x98, 0x4e, 0x23, 0x9d, 0x3d, 0x29, 0x2a, 0xaf, 0x4b, 0x1a, 0x28, 0xc9, 0x09, 0x22, 0x55, 0x4e, 0xc1, 0x7b, 0x6f, 0xb3, 0x2f, 0x92, 0xf8, 0xc5, 0x2c, 0x15, 0x2f, 0x98, 0x04, 0x9a, 0x7e, 0x80, 0x4d, 0x44, 0x51, 0xa6, 0x84, 0x1d};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_696, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_697, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14958 */
  {
    static const uint8_t entropy_698[] = { 0x1c, 0x77, 0xe9, 0xb3, 0x97, 0x29, 0x09, 0xa4, 0x0e, 0x22, 0x25, 0x3a, 0x4a, 0x8b, 0xcc, 0x25, 0xf0, 0xb5, 0xf1, 0x4b, 0x45, 0xef, 0xc1, 0x0c, 0x7c, 0x0e, 0xf7, 0xd9, 0x74, 0x94, 0xf0, 0xc2, 0x5e, 0x0b, 0xa9, 0x6e, 0x0a, 0x65, 0xdf, 0x07, 0x22, 0x9c, 0xf2, 0xfb, 0x41, 0xa9, 0xab, 0x72};
    static const uint8_t returned_699[] = { 0x09, 0xe7, 0x4c, 0x99, 0x83, 0x95, 0x54, 0xbe, 0x80, 0x0a, 0x3e, 0xbb, 0xff, 0x12, 0xdc, 0x6b, 0xe1, 0x5c, 0xce, 0x42, 0x5d, 0x72, 0x05, 0x52, 0x38, 0xed, 0x94, 0xc3, 0xac, 0xc0, 0xaf, 0xc1, 0x67, 0x4a, 0x3b, 0x29, 0x50, 0x65, 0xd2, 0x9c, 0xff, 0x73, 0xc8, 0xd1, 0x8c, 0x9d, 0x9e, 0x7c, 0x2f, 0xfe, 0x36, 0xcd, 0xed, 0xe7, 0x18, 0x42, 0x6d, 0x4c, 0xad, 0xe0, 0x01, 0x58, 0x40, 0xff};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_698, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_699, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14966 */
  {
    static const uint8_t entropy_700[] = { 0x1d, 0x43, 0xb8, 0x2a, 0x55, 0x45, 0xf9, 0xa2, 0x37, 0x8f, 0xed, 0xb8, 0x6b, 0x53, 0x0f, 0xd2, 0xfa, 0xdb, 0xf9, 0x7f, 0x2b, 0xc0, 0x2f, 0x87, 0x7d, 0x1a, 0xfb, 0xa7, 0xe4, 0xbb, 0x8c, 0x0c, 0x29, 0xd4, 0x34, 0xfd, 0x56, 0x5c, 0x8d, 0x1a, 0x26, 0x2b, 0xb8, 0x69, 0x4d, 0xa1, 0x9a, 0x64};
    static const uint8_t returned_701[] = { 0x29, 0x53, 0x1c, 0xe7, 0x7a, 0x4f, 0x47, 0xb7, 0xda, 0x26, 0xad, 0x6f, 0xbc, 0xb0, 0x99, 0x5b, 0xb3, 0x3a, 0x0f, 0x70, 0x2c, 0xcb, 0x7c, 0x5b, 0x09, 0x1b, 0x1e, 0xb6, 0x56, 0x2a, 0x7f, 0xf3, 0xc8, 0xa4, 0xaa, 0xe7, 0x3b, 0xdb, 0x24, 0x7b, 0xf3, 0x27, 0xc7, 0x1f, 0x16, 0xe5, 0xbf, 0xff, 0xd8, 0x27, 0x58, 0xcf, 0x0b, 0x82, 0xcc, 0x58, 0x96, 0x01, 0x7a, 0xb8, 0x51, 0xab, 0x52, 0xb0};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_700, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_701, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14974 */
  {
    static const uint8_t entropy_702[] = { 0x37, 0x5d, 0xec, 0x29, 0xf8, 0xa6, 0xff, 0xbe, 0xb7, 0x1c, 0xbe, 0x3a, 0x2a, 0x37, 0x79, 0xa3, 0x71, 0x49, 0x63, 0x90, 0xd4, 0xcd, 0x5d, 0xf1, 0xdf, 0x87, 0x2b, 0x63, 0x2f, 0x14, 0xa9, 0x1e, 0xac, 0xf8, 0xda, 0x77, 0xf6, 0x24, 0xed, 0x03, 0x23, 0xc8, 0x03, 0x88, 0x6c, 0xa8, 0xda, 0x09};
    static const uint8_t returned_703[] = { 0xd3, 0x9c, 0xb6, 0x6a, 0xe6, 0x42, 0x19, 0xa8, 0xde, 0x99, 0xb4, 0xf6, 0x3d, 0xaa, 0x85, 0x36, 0xde, 0xfe, 0xaa, 0x53, 0xa0, 0x55, 0xa6, 0x6e, 0xc3, 0xde, 0x18, 0xc4, 0x16, 0x73, 0xfc, 0x92, 0x6b, 0x1a, 0x24, 0x6c, 0x78, 0x42, 0x61, 0xf0, 0x2b, 0x22, 0x48, 0x68, 0x87, 0x85, 0x8c, 0xa1, 0xdf, 0x59, 0x3b, 0x4e, 0xa4, 0x33, 0xf6, 0x5d, 0x0b, 0x5b, 0xb8, 0x52, 0x87, 0xde, 0xe8, 0xb5};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_702, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_703, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:14982 */
  {
    static const uint8_t entropy_704[] = { 0x10, 0x0e, 0x17, 0x65, 0x74, 0xbd, 0x55, 0x43, 0x84, 0x77, 0xf0, 0x15, 0x3e, 0xd0, 0x4b, 0x6c, 0xf2, 0x21, 0xbf, 0x6c, 0x1f, 0xcd, 0x71, 0x41, 0xab, 0xa1, 0x0c, 0x80, 0xd7, 0x1e, 0xb2, 0xe1, 0x6b, 0xc8, 0x21, 0x3a, 0xed, 0x68, 0x9f, 0x44, 0xef, 0x57, 0x80, 0x73, 0x34, 0xdc, 0x3d, 0x12};
    static const uint8_t returned_705[] = { 0xb4, 0x31, 0x5c, 0xc4, 0x47, 0x0d, 0x4c, 0x50, 0xa1, 0x58, 0x36, 0xf2, 0x18, 0xb2, 0x1c, 0x96, 0x66, 0x8d, 0x32, 0xea, 0xfc, 0x16, 0x49, 0xcf, 0x6c, 0x92, 0xb9, 0x6f, 0x07, 0x16, 0xaa, 0x54, 0x58, 0x2a, 0x31, 0xa1, 0xc5, 0xf5, 0x97, 0xb8, 0x0f, 0x62, 0x10, 0x26, 0x22, 0x36, 0x9e, 0x42, 0x2d, 0x98, 0xc3, 0x4d, 0x14, 0x98, 0xcb, 0x9b, 0xc0, 0x1d, 0x41, 0x8a, 0x4d, 0x23, 0x20, 0x74};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_704, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_705, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15126 */
  {
    static const uint8_t entropy_706[] = { 0xd8, 0x07, 0x8f, 0x99, 0xd5, 0xda, 0x1b, 0x31, 0x2e, 0x45, 0x12, 0xac, 0xbc, 0xcc, 0x19, 0x89, 0x30, 0x45, 0x39, 0x75, 0xd3, 0xd5, 0x0f, 0xb5, 0xa1, 0x3f, 0x25, 0xfd, 0xb1, 0x1a, 0x5f, 0xed, 0x1a, 0x24, 0x6e, 0x6b, 0xc1, 0x53, 0x95, 0x2a, 0x16, 0x62, 0x3c, 0x23, 0x3e, 0x13, 0xe2, 0x41};
    static const uint8_t returned_707[] = { 0x5e, 0xdb, 0x9b, 0x25, 0x28, 0x7f, 0x2b, 0x5b, 0x1e, 0x5f, 0xd8, 0x1f, 0x69, 0x77, 0x1c, 0xca, 0xb3, 0xb9, 0x87, 0x6b, 0xf2, 0xec, 0xdd, 0x64, 0x4c, 0x9c, 0x6c, 0x5f, 0xe8, 0xdd, 0x98, 0x8e, 0x0d, 0x76, 0x22, 0xde, 0xe9, 0x02, 0x36, 0x64, 0x49, 0xf2, 0x06, 0x3e, 0x3f, 0x82, 0x6d, 0xf9, 0x97, 0x43, 0x80, 0x6b, 0x82, 0x5f, 0xe8, 0xc8, 0x59, 0x46, 0xaf, 0x3b, 0x47, 0x81, 0xd6, 0xaa};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_708[] = { 0xdf, 0x1b, 0x8b, 0x21, 0x72, 0x5f, 0xf8, 0x86, 0xaf, 0x4c, 0x64, 0x7a, 0xf1, 0xa5, 0x87, 0xb1, 0x33, 0x9e, 0x09, 0x73, 0x78, 0x2e, 0x95, 0xc9, 0x3f, 0x3b, 0x40, 0xbf, 0x42, 0x1d, 0x5d, 0x03, 0xce, 0xc2, 0xb0, 0xb4, 0x1f, 0x90, 0x58, 0xd7, 0x30, 0xeb, 0x0f, 0xb5, 0x35, 0x68, 0xd0, 0x0a};
    rng.instantiate(entropy_706, personalization_708, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_707, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15134 */
  {
    static const uint8_t entropy_709[] = { 0xe5, 0xb0, 0x0f, 0x72, 0x1b, 0xbb, 0xf0, 0x81, 0xd3, 0x50, 0x43, 0x35, 0x92, 0xf6, 0xd2, 0xda, 0xb3, 0x62, 0x21, 0x7f, 0x0c, 0x0c, 0x49, 0x51, 0x5d, 0x1f, 0x7f, 0x45, 0x99, 0x9c, 0xf5, 0xac, 0xd5, 0x2b, 0x0e, 0x81, 0x6d, 0x10, 0x2d, 0x60, 0x63, 0x4a, 0x24, 0x61, 0xf4, 0x30, 0x01, 0x03};
    static const uint8_t returned_710[] = { 0x46, 0x47, 0x96, 0xa7, 0x72, 0x8e, 0xbc, 0x3b, 0x14, 0xda, 0x92, 0x5a, 0xc9, 0x07, 0x3e, 0x28, 0x19, 0xb6, 0x49, 0x30, 0xb9, 0xce, 0x62, 0x95, 0x4c, 0xf9, 0xa0, 0x4c, 0x3b, 0x7d, 0xd2, 0xa3, 0xc3, 0x57, 0x80, 0xa5, 0x75, 0xd7, 0xb9, 0x2e, 0x40, 0x23, 0x08, 0x6a, 0xba, 0x0b, 0x4d, 0xcc, 0x26, 0x71, 0x97, 0xdc, 0xeb, 0x14, 0x81, 0xe4, 0x3e, 0xdf, 0x4c, 0xc0, 0x30, 0xd5, 0x45, 0xe5};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_711[] = { 0x65, 0x4a, 0x93, 0x5d, 0x0c, 0x43, 0xaf, 0xfc, 0xa9, 0x28, 0x0a, 0xc1, 0x52, 0xa3, 0x42, 0x42, 0xfb, 0x64, 0x00, 0xd2, 0x08, 0x36, 0xaa, 0xbd, 0x13, 0x91, 0x77, 0x19, 0x02, 0x5c, 0x1e, 0x0d, 0x65, 0xa9, 0x6a, 0xf7, 0x56, 0x14, 0xe0, 0x58, 0x67, 0xd5, 0x19, 0x4a, 0xa8, 0xe7, 0x1c, 0x72};
    rng.instantiate(entropy_709, personalization_711, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_710, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15142 */
  {
    static const uint8_t entropy_712[] = { 0x0e, 0xe0, 0xf3, 0xef, 0xf0, 0x1d, 0x6b, 0xf3, 0xcc, 0x5a, 0x81, 0x40, 0xfd, 0xa7, 0xab, 0x26, 0x21, 0xe5, 0xcc, 0x7f, 0x12, 0x35, 0xfb, 0x43, 0x11, 0x0e, 0x46, 0x51, 0x7f, 0xde, 0xb0, 0xa2, 0x9a, 0xa1, 0x79, 0xc5, 0x5b, 0x8f, 0xe5, 0x60, 0x76, 0x41, 0xe7, 0xdf, 0xc3, 0xcd, 0x24, 0xa0};
    static const uint8_t returned_713[] = { 0xa1, 0xfd, 0xd8, 0xa3, 0x59, 0xf5, 0xe9, 0xde, 0xa8, 0x1f, 0xdf, 0x83, 0xc7, 0x00, 0xca, 0xcf, 0x04, 0xb4, 0xf8, 0x3c, 0x73, 0x27, 0x58, 0xe2, 0x65, 0x54, 0x8a, 0xaf, 0x1d, 0x79, 0x60, 0x84, 0x25, 0xc6, 0x37, 0x20, 0x89, 0x68, 0x96, 0x8b, 0x3b, 0x56, 0xbb, 0xb6, 0x12, 0x2f, 0x12, 0x71, 0xe4, 0x02, 0x31, 0x4e, 0xd9, 0xcb, 0xa2, 0x4a, 0xcf, 0x71, 0x45, 0x7f, 0xf7, 0x54, 0xe8, 0x5a};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_714[] = { 0xd1, 0xf7, 0x49, 0x3b, 0xa4, 0xed, 0x0d, 0xb1, 0x23, 0x5a, 0x5e, 0xfe, 0x38, 0xb8, 0xe6, 0x8f, 0xf0, 0x3f, 0x71, 0x8d, 0x84, 0x07, 0x1e, 0xad, 0x8f, 0xf4, 0xeb, 0x8c, 0x2e, 0x06, 0x36, 0x5c, 0x4c, 0x11, 0xe7, 0x86, 0x91, 0xce, 0x17, 0x6c, 0x2b, 0x2d, 0xbd, 0xe0, 0x3f, 0xc7, 0x3f, 0x3d};
    rng.instantiate(entropy_712, personalization_714, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_713, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15150 */
  {
    static const uint8_t entropy_715[] = { 0xf4, 0x3e, 0x4b, 0x7d, 0x33, 0x17, 0xce, 0x49, 0x4b, 0x0a, 0x68, 0xcb, 0x6e, 0x11, 0xe6, 0x11, 0xbb, 0xfe, 0x7b, 0x61, 0xbc, 0x37, 0xf6, 0xef, 0x1e, 0x6b, 0x45, 0xb3, 0xbd, 0x6d, 0x67, 0x97, 0xd3, 0x95, 0x52, 0xab, 0xb4, 0x90, 0x92, 0x9d, 0x0d, 0xc9, 0x67, 0xea, 0x04, 0x70, 0xd3, 0xae};
    static const uint8_t returned_716[] = { 0x99, 0x57, 0x3c, 0xd5, 0xe7, 0xce, 0x4a, 0x0d, 0xa1, 0xd5, 0x60, 0xfb, 0x5e, 0x99, 0x2f, 0x0b, 0xe2, 0x87, 0x36, 0xad, 0x9c, 0x2f, 0x14, 0x49, 0xf7, 0x21, 0x26, 0x1d, 0xcf, 0x3d, 0xf6, 0x7b, 0xec, 0x1c, 0x3d, 0x49, 0xa6, 0xe4, 0xf9, 0x9f, 0xf4, 0xbc, 0x9a, 0xee, 0x0e, 0xcf, 0x4d, 0x5f, 0x97, 0xed, 0x0d, 0x37, 0xd9, 0x77, 0x6e, 0x7f, 0x63, 0xed, 0xb8, 0xce, 0xce, 0xf7, 0x2c, 0x4b};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_717[] = { 0xda, 0xa5, 0xb6, 0x16, 0x66, 0x3c, 0x91, 0x05, 0x4d, 0x58, 0x38, 0x88, 0xe6, 0x83, 0xc6, 0xfc, 0x93, 0x55, 0xd5, 0xc3, 0x2e, 0xc2, 0xb8, 0x63, 0x2a, 0x63, 0xdd, 0xc4, 0xfb, 0x46, 0xdd, 0x93, 0x6d, 0xaa, 0xcd, 0x86, 0x00, 0x6f, 0x1e, 0x63, 0x92, 0x28, 0xb0, 0xe3, 0x0a, 0x6c, 0x2c, 0x08};
    rng.instantiate(entropy_715, personalization_717, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_716, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15158 */
  {
    static const uint8_t entropy_718[] = { 0x11, 0xec, 0xf1, 0x0f, 0x25, 0x9b, 0xbd, 0x81, 0x7b, 0x23, 0x67, 0xea, 0x80, 0x36, 0xec, 0x29, 0xe0, 0x32, 0xe4, 0x86, 0x9c, 0xd9, 0xd9, 0xe4, 0xc5, 0x30, 0x55, 0xb1, 0x34, 0x43, 0x4b, 0xbd, 0xad, 0xdc, 0x32, 0x7b, 0x13, 0x7a, 0x61, 0xe8, 0xab, 0x60, 0xf0, 0xcf, 0x29, 0x6f, 0x2c, 0x35};
    static const uint8_t returned_719[] = { 0x5c, 0x4a, 0x42, 0x6e, 0xce, 0x1b, 0x6e, 0xd0, 0xb5, 0xba, 0xc7, 0x59, 0xa4, 0xab, 0xde, 0xf1, 0xb6, 0x2b, 0x83, 0x9e, 0xc4, 0x74, 0xf4, 0x26, 0xf6, 0xa5, 0x38, 0x6b, 0x04, 0xd1, 0x10, 0xe1, 0x35, 0x95, 0x08, 0x1e, 0x7d, 0xb1, 0x01, 0x64, 0x89, 0xda, 0x2d, 0x2e, 0x3f, 0xea, 0x04, 0xbd, 0x7f, 0xc3, 0x7d, 0xaf, 0x87, 0xca, 0x98, 0x64, 0xf3, 0x43, 0x0c, 0x00, 0x5f, 0xcc, 0xad, 0x26};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_720[] = { 0xeb, 0x07, 0x19, 0xf1, 0x3b, 0x2d, 0xd9, 0xf0, 0x8d, 0xd0, 0xd0, 0x6c, 0xad, 0xc4, 0x59, 0xc3, 0x1b, 0x4a, 0x15, 0x36, 0xc7, 0x9d, 0xa5, 0xd2, 0x5e, 0xed, 0x53, 0x73, 0xd9, 0xa4, 0x6c, 0xb0, 0xb5, 0xce, 0x11, 0x60, 0x72, 0x95, 0x4b, 0x77, 0xeb, 0x6f, 0x84, 0xbf, 0x94, 0x14, 0x43, 0x22};
    rng.instantiate(entropy_718, personalization_720, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_719, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15166 */
  {
    static const uint8_t entropy_721[] = { 0x42, 0x17, 0xfe, 0xba, 0xcb, 0xbc, 0x1c, 0x25, 0x04, 0xc8, 0x2e, 0xf6, 0x0f, 0x20, 0xc7, 0x4a, 0x61, 0xa0, 0x08, 0x0a, 0x12, 0x44, 0x49, 0x70, 0xf9, 0xe6, 0xc1, 0x7c, 0xab, 0x0b, 0x56, 0x04, 0xd0, 0x8f, 0xe8, 0xda, 0xaa, 0x66, 0x21, 0x38, 0x04, 0xab, 0x08, 0x56, 0x2e, 0x13, 0x64, 0x6a};
    static const uint8_t returned_722[] = { 0xe4, 0xf5, 0x46, 0x3c, 0xd4, 0xd7, 0x7d, 0xa2, 0x3b, 0xfe, 0xd0, 0xf6, 0x2f, 0x29, 0x23, 0xbe, 0xad, 0x6a, 0x46, 0x4d, 0x16, 0x6d, 0xda, 0x84, 0xcc, 0xfd, 0xdb, 0x0f, 0xd3, 0x6a, 0x32, 0xa0, 0xe8, 0xc0, 0xdc, 0xcf, 0xa1, 0x54, 0x8a, 0xfa, 0xf2, 0x9a, 0xbb, 0xd8, 0x53, 0xad, 0x8d, 0x37, 0xa8, 0x2f, 0x3c, 0x16, 0xb2, 0x9f, 0x5b, 0x67, 0x93, 0xeb, 0x35, 0x96, 0xe1, 0xb3, 0x5c, 0x0a};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_723[] = { 0x08, 0xc6, 0x07, 0x59, 0x89, 0xdd, 0x93, 0x2c, 0x51, 0x61, 0x60, 0x74, 0x07, 0x10, 0xf5, 0xd1, 0x6c, 0x38, 0xd2, 0x05, 0xfb, 0xdf, 0xaf, 0xf7, 0x44, 0x49, 0x68, 0x79, 0x1b, 0x6e, 0x9a, 0x43, 0xee, 0x9a, 0x79, 0xcc, 0x5e, 0xb3, 0xe5, 0x8e, 0xa2, 0x92, 0x1f, 0x9c, 0x1f, 0x13, 0xdd, 0x25};
    rng.instantiate(entropy_721, personalization_723, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_722, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15174 */
  {
    static const uint8_t entropy_724[] = { 0x80, 0xf7, 0x10, 0xdd, 0xab, 0x86, 0xa0, 0xd0, 0x9b, 0xa9, 0xff, 0x80, 0x98, 0x51, 0x2c, 0x41, 0xe2, 0x0c, 0x54, 0x87, 0x84, 0x18, 0xae, 0x7a, 0x67, 0x00, 0xb7, 0x78, 0x0c, 0xf6, 0x7a, 0x4e, 0x30, 0x56, 0x5e, 0xfc, 0xd6, 0xbd, 0x50, 0xe0, 0xae, 0x1a, 0x77, 0x8d, 0x5a, 0x18, 0xfd, 0x2d};
    static const uint8_t returned_725[] = { 0x3b, 0xbc, 0xe7, 0x04, 0x1f, 0xad, 0x98, 0x8f, 0x05, 0x59, 0x69, 0xf4, 0xb5, 0x3a, 0x2f, 0xdd, 0xb6, 0xe4, 0xd0, 0x41, 0x0c, 0x08, 0x0d, 0xa3, 0xda, 0xd0, 0x5b, 0xce, 0x8e, 0xca, 0x10, 0xb7, 0xed, 0x4e, 0x36, 0x7e, 0x86, 0x11, 0xb8, 0xde, 0x28, 0x48, 0x4f, 0xe6, 0x42, 0xd5, 0x75, 0xda, 0xf2, 0x54, 0x25, 0x98, 0x58, 0xaa, 0x22, 0xb8, 0xcb, 0xfc, 0x96, 0x29, 0x96, 0x05, 0x82, 0x0d};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_726[] = { 0xa0, 0x30, 0xe8, 0x34, 0x5f, 0xdf, 0xa9, 0x67, 0xa1, 0x84, 0x41, 0x3a, 0x4d, 0x48, 0x1d, 0x88, 0x7f, 0xa6, 0x47, 0xbc, 0x46, 0x04, 0x3c, 0x6f, 0x40, 0x57, 0xe7, 0x01, 0x1b, 0xaa, 0x9e, 0xd1, 0x15, 0xf3, 0x96, 0x88, 0xa4, 0xfe, 0x5c, 0xda, 0xef, 0x98, 0xec, 0x51, 0x8d, 0xdb, 0x04, 0x0c};
    rng.instantiate(entropy_724, personalization_726, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_725, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15182 */
  {
    static const uint8_t entropy_727[] = { 0xbb, 0xc1, 0x91, 0x5e, 0x62, 0x3f, 0x50, 0xff, 0x17, 0x68, 0x56, 0x41, 0xeb, 0xe7, 0xb1, 0xd5, 0x5b, 0xb8, 0xb6, 0xf2, 0xd9, 0x6e, 0x56, 0xe8, 0x2a, 0x01, 0x3a, 0xe4, 0x22, 0x63, 0xe7, 0x07, 0xec, 0x8f, 0xc7, 0x3d, 0xb4, 0x58, 0x86, 0x0b, 0xa4, 0x76, 0x49, 0x33, 0x2b, 0xc4, 0xbc, 0x26};
    static const uint8_t returned_728[] = { 0xa4, 0x50, 0x7a, 0x66, 0x72, 0x59, 0x7e, 0x41, 0xc6, 0xc9, 0x25, 0xc6, 0x10, 0x44, 0x6f, 0x8e, 0xd1, 0x16, 0x0f, 0x44, 0x79, 0x7f, 0xfa, 0x6b, 0x35, 0x6e, 0x2a, 0x02, 0x66, 0x0d, 0xe3, 0xe6, 0x3a, 0x87, 0xa1, 0x82, 0x11, 0x58, 0x79, 0xef, 0xe8, 0x98, 0x10, 0x8b, 0xc6, 0x51, 0xd9, 0xa5, 0xe3, 0x5d, 0xe2, 0x63, 0x19, 0x0d, 0x89, 0x11, 0x3d, 0x7e, 0xab, 0x4c, 0x03, 0x57, 0xc7, 0x8d};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_729[] = { 0x3f, 0xa6, 0x42, 0xef, 0x2b, 0x0e, 0xa9, 0x38, 0xad, 0x67, 0xc4, 0xf7, 0xa1, 0x98, 0xd1, 0xbe, 0xbb, 0x06, 0x89, 0xec, 0x5d, 0x90, 0x65, 0xec, 0xea, 0x59, 0x06, 0xa4, 0xcb, 0xc6, 0xd2, 0x8e, 0x63, 0x78, 0xac, 0xcc, 0x67, 0xf5, 0xb0, 0x81, 0x10, 0xb4, 0x53, 0x22, 0x9c, 0xe6, 0x94, 0x9f};
    rng.instantiate(entropy_727, personalization_729, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_728, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15190 */
  {
    static const uint8_t entropy_730[] = { 0xd2, 0x6f, 0xde, 0xf7, 0x05, 0xb3, 0xf0, 0x0a, 0x0f, 0x99, 0xc5, 0xa2, 0x09, 0xa7, 0x3e, 0x12, 0xaa, 0x0b, 0xb6, 0xb3, 0x61, 0x2b, 0x63, 0xd6, 0xa4, 0x9f, 0x2b, 0x55, 0x1b, 0x02, 0x08, 0x30, 0x85, 0xd7, 0xd4, 0x9b, 0xf8, 0x1d, 0x2c, 0x37, 0x35, 0x90, 0xcd, 0xb5, 0xdb, 0x60, 0x06, 0xeb};
    static const uint8_t returned_731[] = { 0x10, 0xf3, 0x33, 0xdd, 0xcd, 0xfa, 0xd0, 0xf8, 0x20, 0x5a, 0x0c, 0x53, 0xa7, 0x89, 0x52, 0xd1, 0x0d, 0xba, 0x34, 0x15, 0x33, 0xe9, 0xd4, 0xb0, 0xc3, 0x64, 0x0e, 0xcb, 0x2f, 0x59, 0xc0, 0x1a, 0x94, 0xc1, 0xed, 0xf0, 0x5e, 0xb5, 0xb2, 0x98, 0x2c, 0x0d, 0x76, 0x02, 0xd6, 0xaa, 0x9c, 0xbc, 0x16, 0x6b, 0x0f, 0x42, 0x90, 0x10, 0xd6, 0x92, 0xdf, 0xc2, 0x15, 0x83, 0x96, 0x8b, 0x84, 0x1f};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_732[] = { 0x1c, 0x62, 0xb5, 0xd0, 0x7f, 0x7c, 0xa8, 0xc6, 0x0b, 0x69, 0x12, 0x61, 0x18, 0x34, 0x1d, 0xb5, 0x5e, 0x5a, 0x2c, 0xb2, 0xba, 0xf3, 0x59, 0xd2, 0x97, 0x19, 0x67, 0x57, 0x06, 0xb8, 0x93, 0x8b, 0xb6, 0x39, 0x8d, 0xd0, 0x91, 0xc3, 0xf9, 0x11, 0x81, 0x33, 0xa6, 0x39, 0x69, 0x78, 0xbd, 0xf6};
    rng.instantiate(entropy_730, personalization_732, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_731, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15198 */
  {
    static const uint8_t entropy_733[] = { 0x8d, 0xa9, 0x23, 0x05, 0x68, 0xf5, 0x62, 0xa4, 0x4c, 0xe6, 0x52, 0x63, 0x63, 0x48, 0xcc, 0x9f, 0xee, 0xea, 0x46, 0x72, 0x63, 0x81, 0xed, 0x95, 0x55, 0x72, 0x14, 0xad, 0xf5, 0xad, 0xac, 0x0d, 0x94, 0xe2, 0x00, 0x83, 0xd8, 0xd3, 0x27, 0xee, 0xfe, 0xe3, 0x83, 0xa2, 0x18, 0x91, 0xb4, 0x2a};
    static const uint8_t returned_734[] = { 0x3f, 0xc8, 0x59, 0x13, 0x0c, 0xa0, 0xd9, 0x50, 0x0e, 0x79, 0x77, 0xd1, 0x29, 0x50, 0x64, 0x06, 0xa2, 0xe1, 0x4a, 0x77, 0x33, 0xc1, 0x49, 0x0f, 0x7e, 0x4d, 0x93, 0x69, 0x0d, 0x4f, 0xab, 0x90, 0x4c, 0xdb, 0x3a, 0x84, 0x7e, 0x4d, 0x40, 0xa2, 0x58, 0x18, 0xa8, 0x08, 0xde, 0x7f, 0x14, 0x62, 0x12, 0x1b, 0x13, 0x6c, 0x84, 0x6e, 0x57, 0x80, 0x9f, 0x42, 0x07, 0x26, 0x5a, 0x13, 0xe2, 0x37};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_735[] = { 0x74, 0x36, 0x3f, 0xd1, 0x9c, 0xaa, 0x5c, 0x2e, 0x13, 0x0e, 0x5c, 0xba, 0xea, 0x8f, 0xc1, 0x8a, 0x04, 0xde, 0x26, 0x15, 0xd9, 0xbf, 0xca, 0x07, 0x1e, 0xaa, 0xe9, 0xc1, 0x6f, 0x26, 0xfb, 0x9e, 0xe8, 0xbe, 0xd9, 0x8c, 0x61, 0x5d, 0xc4, 0xfd, 0xcc, 0x68, 0x23, 0x3b, 0x16, 0x6e, 0x8f, 0x89};
    rng.instantiate(entropy_733, personalization_735, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_734, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15206 */
  {
    static const uint8_t entropy_736[] = { 0x85, 0x94, 0x86, 0x20, 0xa7, 0x8d, 0xeb, 0x45, 0x44, 0x9c, 0x84, 0x82, 0x78, 0x67, 0x70, 0x25, 0xb5, 0x96, 0xb6, 0x27, 0xd1, 0xf0, 0x61, 0xbf, 0x44, 0x9b, 0x14, 0x2b, 0x5f, 0x8b, 0x84, 0x3c, 0x3c, 0x04, 0x9d, 0xe2, 0x53, 0xb8, 0x46, 0xd3, 0x3b, 0xd0, 0x73, 0x3f, 0xc9, 0x2f, 0x34, 0x54};
    static const uint8_t returned_737[] = { 0x02, 0x8e, 0x0e, 0x6a, 0x5a, 0xb8, 0x7d, 0x46, 0x99, 0xbe, 0x8b, 0x29, 0x0b, 0x9e, 0x45, 0x84, 0x73, 0x42, 0x00, 0x69, 0xee, 0x61, 0x8e, 0x04, 0xc3, 0x46, 0xe0, 0xa6, 0x23, 0x15, 0x8f, 0xbc, 0x91, 0x5d, 0x36, 0x36, 0x8f, 0xea, 0x88, 0x7e, 0x2c, 0x48, 0x20, 0x2c, 0x1b, 0xea, 0xfe, 0x8c, 0xee, 0x27, 0x07, 0x4c, 0x73, 0x2f, 0x12, 0x34, 0x4e, 0x90, 0x4f, 0x55, 0xf5, 0x81, 0xca, 0xbc};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_738[] = { 0xa5, 0x47, 0x71, 0xc0, 0xd1, 0xa5, 0xc6, 0xdf, 0x3e, 0x7f, 0x30, 0xa6, 0x20, 0x8e, 0x35, 0xaa, 0x4d, 0x65, 0xc5, 0xb6, 0x54, 0x80, 0x23, 0x60, 0xce, 0xbe, 0xb8, 0x0d, 0x2c, 0xd0, 0x50, 0x9c, 0xa3, 0x7b, 0x7e, 0xa8, 0x49, 0xf9, 0x43, 0x9f, 0x3e, 0xc5, 0x07, 0x15, 0x40, 0x82, 0xc4, 0x28};
    rng.instantiate(entropy_736, personalization_738, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_737, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15214 */
  {
    static const uint8_t entropy_739[] = { 0xea, 0xa3, 0xaa, 0x6a, 0x7e, 0x87, 0x2c, 0x85, 0xcf, 0x48, 0xf2, 0x90, 0x94, 0x4c, 0x3e, 0x2c, 0x17, 0xf6, 0x76, 0xe6, 0xbf, 0x5c, 0x93, 0x5c, 0xb9, 0x31, 0x7c, 0x97, 0xac, 0x29, 0x4e, 0x31, 0xad, 0xfb, 0x10, 0xbb, 0xd2, 0x44, 0x36, 0x1e, 0xdc, 0xe9, 0x3c, 0x17, 0x31, 0x53, 0xcc, 0xf6};
    static const uint8_t returned_740[] = { 0x12, 0xe8, 0xf9, 0xa3, 0x29, 0xb0, 0xaf, 0x70, 0x5c, 0x6c, 0x43, 0xf5, 0xc4, 0x0a, 0x82, 0x33, 0x05, 0xed, 0x82, 0x77, 0x9d, 0x40, 0x76, 0x59, 0x78, 0x2b, 0x47, 0x41, 0x62, 0x46, 0xd9, 0x62, 0x4c, 0xfd, 0xee, 0x72, 0x03, 0x90, 0x33, 0xc0, 0xad, 0x56, 0x7a, 0xd0, 0xa8, 0x2c, 0xd1, 0x87, 0x2c, 0xd4, 0x60, 0xc6, 0x8b, 0x5c, 0xdb, 0xaa, 0x43, 0x86, 0x15, 0xbf, 0xd1, 0x3c, 0x97, 0x69};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_741[] = { 0x66, 0xed, 0x47, 0x05, 0x72, 0xd9, 0x15, 0xd8, 0x12, 0x01, 0xc3, 0xdf, 0xec, 0x4d, 0x0b, 0x7d, 0xfe, 0xab, 0x8f, 0x8b, 0x7d, 0x63, 0x58, 0x43, 0x02, 0x06, 0xbb, 0x03, 0xcb, 0x94, 0xd8, 0x5f, 0x27, 0xb0, 0x3e, 0xb5, 0x7d, 0xe4, 0x6e, 0x75, 0x95, 0x23, 0xc4, 0x46, 0x96, 0x57, 0x20, 0x76};
    rng.instantiate(entropy_739, personalization_741, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_740, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15222 */
  {
    static const uint8_t entropy_742[] = { 0xa2, 0x3e, 0xa0, 0xbf, 0x45, 0xc9, 0xad, 0x04, 0xbc, 0x95, 0x6d, 0xc6, 0xb9, 0x9c, 0xae, 0x49, 0x43, 0xf2, 0x87, 0xe2, 0xc0, 0xff, 0x9f, 0xcc, 0xb6, 0xf8, 0xbc, 0xf0, 0x95, 0x84, 0xe0, 0x68, 0x69, 0x74, 0x6b, 0x8b, 0x02, 0x7a, 0x02, 0x7a, 0x2b, 0xfe, 0xf9, 0x75, 0x52, 0x2b, 0xc3, 0x7a};
    static const uint8_t returned_743[] = { 0xaa, 0x7f, 0x07, 0x0d, 0x79, 0x72, 0xcd, 0x15, 0x6e, 0xc9, 0xb3, 0xd1, 0xdc, 0x37, 0xe1, 0xbd, 0x9c, 0x2b, 0x6d, 0x51, 0x2f, 0xa3, 0x18, 0xf2, 0x2c, 0x42, 0xd5, 0x30, 0x92, 0xfd, 0x05, 0x36, 0x5b, 0x35, 0xe0, 0xd0, 0x35, 0x41, 0xf9, 0x48, 0xc3, 0x2f, 0xc3, 0x10, 0x7e, 0x4f, 0x9e, 0xae, 0xc3, 0x4f, 0xc2, 0xf4, 0xf9, 0xd7, 0x8a, 0x26, 0x37, 0xb2, 0xec, 0xf7, 0xe2, 0xec, 0x10, 0xf2};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_744[] = { 0xaf, 0x35, 0x59, 0x4b, 0xd4, 0x92, 0x60, 0xa3, 0xd3, 0xee, 0xcd, 0xef, 0x26, 0x0d, 0x1f, 0x73, 0x26, 0x6c, 0xdf, 0x25, 0x6f, 0x11, 0x65, 0x9e, 0x76, 0x49, 0xc3, 0x7d, 0x7f, 0xb2, 0xd7, 0xc6, 0xe5, 0x4c, 0xd4, 0xb5, 0x21, 0x8f, 0x05, 0x4b, 0x63, 0xed, 0x28, 0x23, 0xab, 0x67, 0xa1, 0x80};
    rng.instantiate(entropy_742, personalization_744, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_743, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15230 */
  {
    static const uint8_t entropy_745[] = { 0x39, 0x6d, 0x78, 0x8f, 0xbb, 0x82, 0x8c, 0x29, 0x64, 0x3b, 0xbf, 0x7e, 0x42, 0x34, 0xd4, 0xb3, 0x43, 0xbc, 0x99, 0x77, 0xeb, 0xd0, 0xc0, 0x8d, 0x17, 0x29, 0x6c, 0xad, 0x99, 0x58, 0x7a, 0x8d, 0x29, 0x90, 0x39, 0xb0, 0x37, 0xbc, 0xc5, 0x1d, 0xcf, 0xaa, 0x14, 0x5d, 0x03, 0x4c, 0x6b, 0x51};
    static const uint8_t returned_746[] = { 0x67, 0x9d, 0x9a, 0xe0, 0xeb, 0x82, 0xa4, 0x0d, 0x29, 0x4b, 0x65, 0x80, 0x6f, 0x1e, 0x2f, 0xdf, 0x2c, 0x5d, 0xf5, 0xc3, 0xe2, 0x0f, 0xbc, 0x06, 0xcd, 0x16, 0xbb, 0xfb, 0x64, 0x77, 0xd1, 0x49, 0xf1, 0xe5, 0x91, 0xf8, 0x92, 0x31, 0x81, 0x18, 0xdb, 0xac, 0x4f, 0x2d, 0x7e, 0x5d, 0x63, 0x54, 0x97, 0x41, 0x13, 0xb2, 0xc2, 0x5f, 0x52, 0x80, 0xa0, 0x86, 0x28, 0x98, 0xe2, 0xcd, 0x02, 0xe8};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_747[] = { 0x90, 0x88, 0x2c, 0x27, 0x59, 0xf6, 0x10, 0xac, 0xaf, 0xc6, 0xbc, 0xe6, 0xf9, 0x08, 0xcf, 0x31, 0x11, 0x73, 0x23, 0xc4, 0x38, 0x77, 0xa9, 0x31, 0xfd, 0xe2, 0x7a, 0x25, 0xc1, 0xa9, 0x75, 0xff, 0xc4, 0x83, 0xc2, 0x4e, 0x00, 0xe3, 0x8e, 0x7a, 0x20, 0xd1, 0xda, 0x24, 0xb9, 0x40, 0xc3, 0xb3};
    rng.instantiate(entropy_745, personalization_747, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_746, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15238 */
  {
    static const uint8_t entropy_748[] = { 0x4e, 0x67, 0x68, 0xb6, 0x63, 0xb1, 0x83, 0x8f, 0xbd, 0x56, 0xc7, 0x8b, 0x00, 0x2c, 0x08, 0xc2, 0x81, 0x21, 0x66, 0x22, 0x38, 0x45, 0x6e, 0xa9, 0x3c, 0x4b, 0x28, 0x6f, 0x4a, 0x1d, 0x6a, 0xa2, 0xa1, 0xf5, 0xd2, 0xcf, 0x8e, 0x59, 0xd4, 0x64, 0xed, 0x37, 0xa6, 0x22, 0x80, 0x01, 0xf7, 0xf8};
    static const uint8_t returned_749[] = { 0xb1, 0xce, 0x96, 0xd8, 0x6e, 0x77, 0xa2, 0x51, 0xc4, 0xff, 0xfe, 0x5d, 0xe3, 0x1e, 0x91, 0x99, 0xa1, 0x9f, 0xa2, 0x42, 0xb0, 0x3b, 0x00, 0x5c, 0xf0, 0xb6, 0xa2, 0x3e, 0xa3, 0xa0, 0xc5, 0xb8, 0x7e, 0xdc, 0xbc, 0x77, 0xd0, 0x01, 0x9f, 0x24, 0xd8, 0xc0, 0x59, 0x4a, 0x4e, 0xdb, 0xa0, 0x54, 0xb3, 0x2d, 0x2c, 0x9e, 0x5e, 0x2f, 0x08, 0x93, 0xc4, 0x24, 0xb1, 0x18, 0x87, 0xb0, 0xbe, 0x48};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_750[] = { 0x47, 0xc2, 0x40, 0x38, 0x73, 0x2c, 0x32, 0xba, 0xf7, 0xe1, 0xe7, 0x1f, 0xb0, 0xb7, 0x4b, 0x74, 0xec, 0x05, 0x5a, 0xdb, 0x88, 0xf8, 0xcf, 0x11, 0x1f, 0xc2, 0x75, 0x98, 0xea, 0x74, 0x87, 0x2f, 0xde, 0x60, 0x82, 0x66, 0xa8, 0xf4, 0x91, 0x05, 0x28, 0x2c, 0x2c, 0xa7, 0x09, 0x3a, 0xce, 0xa2};
    rng.instantiate(entropy_748, personalization_750, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_749, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15382 */
  {
    static const uint8_t entropy_751[] = { 0xd2, 0xbe, 0x2d, 0xc7, 0x52, 0x0e, 0x5a, 0xb1, 0x09, 0x75, 0xe2, 0xed, 0xdd, 0x0a, 0x8d, 0xd6, 0xdc, 0xed, 0x9e, 0x36, 0x4d, 0xfb, 0x47, 0xbf, 0x26, 0x3d, 0x25, 0xe7, 0x5c, 0x6f, 0x8c, 0x9e, 0xbf, 0x38, 0x6f, 0x02, 0xff, 0x0a, 0x72, 0x26, 0x76, 0xb1, 0xcd, 0xa1, 0x8a, 0xba, 0x0c, 0xc4};
    static const uint8_t returned_752[] = { 0x2c, 0x1d, 0xb4, 0x2f, 0x45, 0xfd, 0x2f, 0xd6, 0xcc, 0xaf, 0x48, 0xd4, 0x5f, 0x54, 0x4b, 0x14, 0x9b, 0x44, 0x6c, 0xdc, 0xd0, 0xe8, 0x8f, 0xd5, 0x11, 0xf3, 0x88, 0x7a, 0x2d, 0x19, 0x69, 0x06, 0x0b, 0x26, 0xcc, 0x00, 0x45, 0x59, 0xbf, 0x17, 0xe8, 0xbe, 0x81, 0xb8, 0xd4, 0x80, 0xfd, 0x72, 0x8b, 0x32, 0x17, 0xce, 0x10, 0xdd, 0x8b, 0xf8, 0x0e, 0x62, 0x27, 0x78, 0xdb, 0x76, 0xde, 0x77};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_751, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_752, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15390 */
  {
    static const uint8_t entropy_753[] = { 0xf7, 0x8f, 0x74, 0x97, 0x95, 0x41, 0x97, 0x62, 0x88, 0x03, 0x2f, 0x13, 0x07, 0x46, 0x74, 0x4c, 0x3f, 0xff, 0xe9, 0x06, 0x8c, 0xa1, 0x59, 0x2d, 0x0f, 0xe6, 0x1e, 0x4c, 0x94, 0x6e, 0x41, 0xbc, 0x3f, 0xfd, 0xa0, 0x03, 0x3d, 0x01, 0xad, 0xb5, 0xf5, 0x2c, 0xe0, 0x27, 0xa7, 0x9e, 0xed, 0xa3};
    static const uint8_t returned_754[] = { 0x13, 0x7b, 0xc8, 0x75, 0xed, 0xe8, 0x00, 0x9a, 0x77, 0x83, 0xe9, 0x7d, 0x11, 0xd4, 0x94, 0x66, 0x01, 0x01, 0x75, 0xc1, 0x38, 0xb8, 0x94, 0x57, 0xa9, 0xa0, 0x71, 0x11, 0x41, 0x7c, 0xa3, 0xf8, 0x49, 0x10, 0x21, 0x82, 0x93, 0xef, 0xac, 0xd6, 0x92, 0x6a, 0xdf, 0xf9, 0x16, 0x78, 0xe8, 0x7e, 0x6c, 0xe1, 0x29, 0x96, 0x13, 0x5e, 0xef, 0xa5, 0x8d, 0x4f, 0xa3, 0x31, 0xe9, 0x1a, 0xfa, 0x8d};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_753, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_754, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15398 */
  {
    static const uint8_t entropy_755[] = { 0xc6, 0xbe, 0x83, 0x86, 0xac, 0xe7, 0x40, 0x5a, 0xc5, 0x13, 0xf0, 0xaa, 0x2b, 0xf3, 0xa9, 0xcc, 0x81, 0xa1, 0x73, 0x2a, 0xf4, 0xf0, 0x77, 0x69, 0x2e, 0xeb, 0x34, 0x82, 0x3e, 0x75, 0x5c, 0x66, 0x98, 0x48, 0x32, 0x9f, 0x9d, 0x98, 0x3f, 0x53, 0x6b, 0x36, 0x6b, 0xf8, 0x9f, 0x6a, 0x57, 0x91};
    static const uint8_t returned_756[] = { 0x46, 0xb2, 0x30, 0x78, 0x44, 0x6a, 0x7e, 0x7c, 0xc5, 0x42, 0xfb, 0x8e, 0x4d, 0x04, 0x10, 0x27, 0x0f, 0xe8, 0xa1, 0xe1, 0x7b, 0x82, 0x5d, 0x86, 0xe0, 0xe6, 0x09, 0x54, 0xbc, 0xe0, 0xc2, 0x4b, 0x66, 0x84, 0x51, 0x00, 0x25, 0x89, 0xc3, 0x04, 0xe1, 0x52, 0xf5, 0x33, 0x50, 0xee, 0x19, 0x78, 0x2d, 0x97, 0x69, 0x82, 0x03, 0xda, 0xde, 0xde, 0x78, 0xb1, 0x77, 0x95, 0x87, 0x3b, 0x0e, 0xd5};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_755, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_756, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15406 */
  {
    static const uint8_t entropy_757[] = { 0xee, 0x1f, 0x42, 0x91, 0x8d, 0x6c, 0x76, 0x9c, 0xa9, 0x3d, 0x02, 0x4d, 0x36, 0x0c, 0x0f, 0x5e, 0x64, 0x87, 0x24, 0x23, 0x7b, 0xd9, 0x0d, 0xe8, 0xcb, 0x5a, 0x35, 0x89, 0xc2, 0x4e, 0x31, 0x07, 0x3b, 0x39, 0xc6, 0xff, 0x11, 0x69, 0x41, 0x70, 0xea, 0x7b, 0x3d, 0x68, 0x41, 0x66, 0x60, 0x28};
    static const uint8_t returned_758[] = { 0xc5, 0xc5, 0x64, 0x13, 0xc3, 0x5f, 0x5a, 0xe0, 0x10, 0xa6, 0x56, 0x46, 0x9a, 0x9f, 0x18, 0x8d, 0xec, 0x9f, 0x1f, 0x0b, 0x25, 0xaa, 0xfe, 0x8b, 0x0a, 0x77, 0xca, 0xc9, 0xf9, 0x11, 0xc4, 0x57, 0xbf, 0x7b, 0x9a, 0x75, 0x17, 0x8c, 0x2d, 0x42, 0x75, 0xac, 0x8f, 0xd7, 0x40, 0xb0, 0xf8, 0x96, 0x7a, 0x72, 0x16, 0x1d, 0xf7, 0x87, 0xd5, 0x33, 0x30, 0x92, 0xd7, 0x10, 0x52, 0x5e, 0xc8, 0x47};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_757, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_758, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15414 */
  {
    static const uint8_t entropy_759[] = { 0xd3, 0x33, 0x8a, 0x25, 0x25, 0x27, 0x16, 0xa9, 0x18, 0x9f, 0x17, 0x99, 0x55, 0x1e, 0x6b, 0x8e, 0xfe, 0x37, 0x72, 0x0a, 0x03, 0x73, 0x49, 0x6d, 0x3c, 0x9d, 0x9f, 0x57, 0xf4, 0x68, 0x56, 0x7d, 0xdf, 0x04, 0xfc, 0xe3, 0xe6, 0x72, 0x50, 0x40, 0x3f, 0x9c, 0xd8, 0xea, 0xe4, 0x74, 0xf2, 0x39};
    static const uint8_t returned_760[] = { 0xbb, 0x24, 0x5a, 0xc6, 0x50, 0x40, 0xbe, 0x1a, 0x71, 0x46, 0xfc, 0x22, 0x9a, 0x3b, 0x08, 0xab, 0xfa, 0xbc, 0x69, 0x1b, 0xf2, 0xdf, 0x37, 0x3c, 0x49, 0x2a, 0x4a, 0xda, 0x1d, 0x33, 0x9e, 0x5d, 0xf8, 0x49, 0xa5, 0x21, 0x04, 0x2d, 0x65, 0x75, 0x24, 0x40, 0x3f, 0x9a, 0x48, 0xf5, 0xf7, 0x53, 0xc6, 0x7e, 0xe0, 0x81, 0x02, 0xb5, 0xa1, 0xb9, 0x04, 0x83, 0x7b, 0x41, 0xe4, 0xdb, 0xe9, 0xb7};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_759, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_760, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15422 */
  {
    static const uint8_t entropy_761[] = { 0x8d, 0xf9, 0xbf, 0xb8, 0x4e, 0xb8, 0x70, 0xfc, 0x33, 0x59, 0xe2, 0x8e, 0xee, 0xea, 0xe7, 0xac, 0x73, 0xb0, 0x55, 0x14, 0x68, 0x82, 0xab, 0x11, 0x9b, 0xae, 0x7e, 0x2b, 0x90, 0x11, 0x54, 0x16, 0x9a, 0xb0, 0x3c, 0x8f, 0xa7, 0x56, 0x68, 0x9c, 0x02, 0xfb, 0xde, 0xea, 0x16, 0x55, 0xd9, 0x74};
    static const uint8_t returned_762[] = { 0x14, 0x26, 0xc1, 0x3d, 0xc2, 0x9a, 0xfc, 0x3c, 0xb7, 0x29, 0x9c, 0x81, 0x92, 0xc6, 0x6e, 0x26, 0x3e, 0x6f, 0x36, 0x68, 0xd8, 0xdb, 0x49, 0x5d, 0x4e, 0x29, 0x4a, 0xba, 0xf0, 0x49, 0x63, 0x9c, 0xbb, 0x47, 0x34, 0xaa, 0xe0, 0x79, 0xa8, 0xa2, 0xf3, 0x81, 0x26, 0x3a, 0x37, 0xc9, 0xa2, 0x40, 0x63, 0x62, 0xd3, 0x10, 0xf5, 0x8c, 0xca, 0x08, 0x82, 0x9a, 0x7a, 0x4b, 0x07, 0xbd, 0x62, 0x1f};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_761, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_762, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15430 */
  {
    static const uint8_t entropy_763[] = { 0xc9, 0xe9, 0x0d, 0x1f, 0x40, 0xfd, 0x6e, 0xee, 0xaa, 0xab, 0x16, 0x09, 0x16, 0xee, 0xf3, 0x3e, 0xff, 0x12, 0x88, 0x12, 0x0d, 0x16, 0x5d, 0x9c, 0xe8, 0x98, 0x4f, 0x68, 0x42, 0x1c, 0x98, 0x94, 0x74, 0x57, 0x2a, 0x61, 0xa0, 0xa0, 0x37, 0x3d, 0x65, 0xb0, 0x06, 0xf8, 0x37, 0x0d, 0xd9, 0x26};
    static const uint8_t returned_764[] = { 0xb6, 0x15, 0x7b, 0xb5, 0x7c, 0x19, 0x69, 0xe2, 0x24, 0x83, 0xdf, 0x3e, 0x8c, 0x2c, 0x38, 0xda, 0xad, 0xc2, 0x94, 0xe6, 0xac, 0xd2, 0xb5, 0x1a, 0xe6, 0x3d, 0x6d, 0xdd, 0x58, 0x9a, 0x63, 0x17, 0x42, 0xcb, 0x39, 0x12, 0xbe, 0x32, 0x20, 0x19, 0x51, 0xe1, 0xe3, 0x72, 0x3d, 0x3c, 0x5a, 0x59, 0x1e, 0x79, 0x6b, 0x3a, 0xb7, 0xd4, 0xec, 0x8e, 0x37, 0x60, 0x5b, 0x04, 0x38, 0xe1, 0x5a, 0x45};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_763, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_764, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15438 */
  {
    static const uint8_t entropy_765[] = { 0x25, 0x14, 0x49, 0x8a, 0xbf, 0xac, 0xda, 0x89, 0x42, 0x5e, 0xbf, 0xb4, 0x34, 0x3c, 0x5c, 0xa8, 0xc3, 0x4c, 0x18, 0x43, 0x30, 0x05, 0xb6, 0xed, 0x60, 0x38, 0xa3, 0x14, 0x66, 0x52, 0x51, 0x13, 0xfd, 0x97, 0x75, 0x0f, 0x7e, 0xb8, 0xc8, 0xba, 0x22, 0x4d, 0x77, 0xf8, 0xb2, 0x0c, 0xf2, 0xd9};
    static const uint8_t returned_766[] = { 0xf0, 0x36, 0x25, 0x0e, 0x0a, 0x60, 0x1d, 0x91, 0xc5, 0xb8, 0x02, 0x9f, 0xc6, 0x98, 0x29, 0x47, 0x9b, 0x08, 0x6d, 0x61, 0x6e, 0x8d, 0xde, 0x2b, 0x62, 0xcb, 0x98, 0xf7, 0x07, 0x85, 0x10, 0x1b, 0x00, 0x1a, 0xb9, 0xe5, 0x83, 0x25, 0x08, 0xf6, 0x57, 0xd9, 0xf5, 0x2e, 0x9f, 0x9b, 0x3f, 0xa5, 0xfb, 0x3c, 0x02, 0xcc, 0x09, 0xf9, 0x7a, 0x1c, 0xd4, 0x69, 0x84, 0x04, 0xa7, 0xfd, 0x96, 0x7d};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_765, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_766, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15446 */
  {
    static const uint8_t entropy_767[] = { 0x8b, 0xd4, 0x2f, 0x21, 0xb2, 0xb8, 0x1f, 0x42, 0x81, 0x3d, 0xd2, 0x91, 0xe2, 0xaa, 0xbb, 0x37, 0x2d, 0x25, 0x68, 0x7d, 0x2f, 0xa0, 0xf3, 0x0b, 0xdf, 0xa9, 0x63, 0x2d, 0xb9, 0x0c, 0x81, 0x2a, 0xe5, 0xa2, 0x5d, 0x8f, 0x8a, 0xd3, 0xe0, 0x33, 0xfa, 0x5a, 0x0c, 0x98, 0x1d, 0xf2, 0xc5, 0x86};
    static const uint8_t returned_768[] = { 0x9a, 0x58, 0x9e, 0x69, 0x62, 0x2c, 0x1d, 0x66, 0x80, 0xe3, 0xcf, 0x38, 0xe8, 0x64, 0x00, 0x97, 0x9c, 0xd8, 0xf6, 0x83, 0x47, 0xc6, 0xc4, 0xb6, 0xb9, 0xd0, 0x4d, 0x45, 0x48, 0xda, 0x23, 0xab, 0xec, 0x08, 0xb6, 0xfe, 0xaa, 0x6a, 0x7e, 0x53, 0x6b, 0x2c, 0x8b, 0xed, 0x28, 0xc6, 0x13, 0x6f, 0xc5, 0xb3, 0x10, 0x01, 0x7d, 0x81, 0x8a, 0xff, 0xc4, 0x07, 0x71, 0xd4, 0xb1, 0x5e, 0x27, 0x89};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_767, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_768, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15454 */
  {
    static const uint8_t entropy_769[] = { 0x4d, 0x31, 0x97, 0xc9, 0x96, 0x12, 0xc5, 0xcb, 0x62, 0x16, 0x01, 0x68, 0x86, 0x92, 0x16, 0x4c, 0x23, 0x95, 0x69, 0xbd, 0xf3, 0x9e, 0xe5, 0xe7, 0x7e, 0x08, 0xa0, 0x59, 0xe8, 0x71, 0xd9, 0x71, 0x0b, 0x72, 0x59, 0x27, 0xa3, 0xa2, 0xc9, 0xa2, 0xa0, 0x5b, 0xc8, 0x4d, 0xf3, 0x81, 0x85, 0xda};
    static const uint8_t returned_770[] = { 0xe3, 0x90, 0x5d, 0x94, 0x3e, 0x16, 0x0a, 0x76, 0xab, 0xaa, 0xef, 0x2d, 0x23, 0x49, 0x15, 0xc0, 0xc7, 0xad, 0x78, 0xf8, 0x75, 0x9f, 0x4c, 0x92, 0x05, 0xa8, 0xb1, 0x23, 0x0a, 0x0c, 0xc5, 0xf9, 0x72, 0x45, 0x6c, 0xa0, 0xd8, 0xf4, 0x7e, 0x06, 0x63, 0xa6, 0xc3, 0x18, 0xb2, 0x2c, 0xac, 0xe2, 0x53, 0xce, 0xbb, 0x5f, 0x0f, 0x2a, 0x58, 0xed, 0x6a, 0xb4, 0xed, 0x6d, 0x9c, 0xac, 0x25, 0xa6};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_769, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_770, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15462 */
  {
    static const uint8_t entropy_771[] = { 0xd3, 0x46, 0x08, 0x24, 0x7d, 0x7d, 0x03, 0x61, 0xe6, 0xba, 0x5f, 0x68, 0xbe, 0x39, 0xca, 0x77, 0xda, 0x43, 0xd5, 0x5e, 0x35, 0xad, 0x5a, 0x34, 0x88, 0xfa, 0xca, 0x63, 0x45, 0xa0, 0xbe, 0x8b, 0x0c, 0x19, 0xe9, 0x07, 0xa4, 0x28, 0xb3, 0x16, 0x4f, 0x45, 0xc8, 0xdd, 0xf9, 0x97, 0x70, 0x21};
    static const uint8_t returned_772[] = { 0x44, 0xdc, 0x77, 0x05, 0x4f, 0xbe, 0x30, 0xe8, 0x89, 0x63, 0x0f, 0x48, 0xd7, 0xb1, 0x0e, 0x71, 0x15, 0x57, 0xc7, 0x95, 0x15, 0x71, 0xcf, 0x1f, 0xeb, 0x7e, 0x20, 0x23, 0x8a, 0xca, 0xd4, 0x59, 0x3d, 0xca, 0x7f, 0x7e, 0xe7, 0x1a, 0x2b, 0xc1, 0xe0, 0x36, 0x2b, 0x96, 0x17, 0x54, 0xba, 0x68, 0xa7, 0xca, 0x3b, 0x83, 0xad, 0x36, 0xdc, 0xe2, 0x0b, 0x76, 0x3e, 0x70, 0x92, 0x8a, 0x38, 0xd8};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_771, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_772, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15470 */
  {
    static const uint8_t entropy_773[] = { 0xb5, 0x98, 0xf2, 0x82, 0xad, 0xec, 0xf9, 0xd0, 0x60, 0xae, 0xd6, 0xcc, 0x69, 0x7a, 0xb8, 0xd5, 0xee, 0xdf, 0x40, 0x04, 0xa7, 0x74, 0xd4, 0xb6, 0xd4, 0x36, 0x5c, 0x44, 0x2e, 0x63, 0xff, 0x1c, 0x4a, 0xc7, 0xee, 0x99, 0xf4, 0xb0, 0x5f, 0x34, 0x9b, 0x77, 0x0b, 0x77, 0xa2, 0x1a, 0xf1, 0xb3};
    static const uint8_t returned_774[] = { 0x28, 0x3c, 0x19, 0x05, 0xa7, 0x6a, 0x7f, 0x3c, 0x66, 0x6e, 0x68, 0x03, 0x95, 0x0c, 0xad, 0xaf, 0x18, 0xd5, 0xfb, 0x58, 0x90, 0xe7, 0x7c, 0x48, 0xcb, 0xc6, 0xea, 0x13, 0x5f, 0xe7, 0xc5, 0x63, 0xfe, 0x26, 0x84, 0x74, 0x7b, 0x55, 0x04, 0x99, 0x21, 0xa8, 0x9d, 0x34, 0xbb, 0x84, 0x57, 0xa4, 0x6b, 0x78, 0xf0, 0xe8, 0xe1, 0x02, 0x21, 0x1f, 0x4c, 0x64, 0xf4, 0xc4, 0x50, 0x07, 0xe0, 0x6b};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_773, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_774, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15478 */
  {
    static const uint8_t entropy_775[] = { 0xe2, 0xb9, 0xff, 0xc6, 0xb1, 0x3c, 0x61, 0x35, 0xd7, 0x60, 0x87, 0xbf, 0x6e, 0xa2, 0x84, 0x60, 0xfb, 0x9f, 0x18, 0xc4, 0xe7, 0x12, 0x78, 0x50, 0x39, 0x44, 0x39, 0x70, 0x92, 0x4a, 0xe9, 0x23, 0xf1, 0x8e, 0xe4, 0x5b, 0x87, 0x90, 0x9d, 0xca, 0xc7, 0x03, 0xc6, 0x2d, 0x58, 0x75, 0xba, 0xbb};
    static const uint8_t returned_776[] = { 0x61, 0x91, 0x66, 0xb4, 0x07, 0x11, 0x98, 0xc4, 0x78, 0x42, 0x7a, 0x1a, 0xc0, 0xc2, 0x1a, 0x09, 0x93, 0xed, 0x36, 0x5b, 0x78, 0x01, 0xc0, 0x2a, 0x06, 0xb8, 0x04, 0xf4, 0xb0, 0xbe, 0x55, 0x3c, 0x0d, 0x04, 0x87, 0x21, 0x8e, 0x5e, 0x20, 0x61, 0x2b, 0xb4, 0x45, 0x3a, 0xb5, 0x9c, 0x8e, 0x4b, 0x8d, 0xbf, 0xc3, 0x28, 0x2e, 0xfb, 0x34, 0xaa, 0x94, 0x3b, 0xa1, 0x7b, 0xa6, 0x5d, 0xfa, 0x28};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_775, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_776, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15486 */
  {
    static const uint8_t entropy_777[] = { 0x38, 0xb4, 0x9f, 0xe3, 0x9f, 0x04, 0xbd, 0x4e, 0xc3, 0x12, 0x08, 0xe9, 0x51, 0x08, 0x16, 0x63, 0xc0, 0x6a, 0x93, 0xf0, 0x26, 0xe2, 0xf0, 0x91, 0x5b, 0x36, 0xe4, 0x4c, 0x15, 0x96, 0x9f, 0x6a, 0x9c, 0xab, 0xca, 0x17, 0x74, 0xa5, 0x86, 0xaa, 0x00, 0x64, 0xa1, 0x61, 0xfa, 0xcf, 0x72, 0x3f};
    static const uint8_t returned_778[] = { 0x47, 0xb6, 0xdc, 0x1f, 0x9f, 0xc7, 0xba, 0x68, 0x97, 0x3e, 0x15, 0xb4, 0x89, 0xe4, 0x6b, 0x94, 0xb4, 0xba, 0x58, 0xe2, 0x3d, 0x66, 0x91, 0xa6, 0xe8, 0x31, 0x1d, 0xd8, 0x2a, 0x61, 0x87, 0x25, 0x2e, 0x10, 0x10, 0x28, 0x65, 0x95, 0x5e, 0xa7, 0x8c, 0x6b, 0x79, 0x53, 0xc5, 0xd0, 0xa7, 0x91, 0x9c, 0xed, 0xd2, 0x01, 0x1f, 0x85, 0xea, 0xcd, 0x29, 0x89, 0x34, 0x28, 0x90, 0x83, 0xdd, 0x58};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_777, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_778, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15494 */
  {
    static const uint8_t entropy_779[] = { 0x80, 0xff, 0xec, 0xca, 0xdd, 0xab, 0x35, 0x22, 0x1c, 0xba, 0x00, 0xff, 0x37, 0x47, 0x28, 0xda, 0xb8, 0xf9, 0x1f, 0x3e, 0x54, 0x98, 0x62, 0x27, 0x04, 0xc0, 0x50, 0xe3, 0xe1, 0x3a, 0x2b, 0x0b, 0xdd, 0x2f, 0x91, 0x36, 0x72, 0xe8, 0x96, 0xa9, 0x79, 0x97, 0x4c, 0x52, 0x06, 0x7e, 0x2a, 0x05};
    static const uint8_t returned_780[] = { 0x02, 0x92, 0xbd, 0xaf, 0x72, 0x5f, 0x46, 0x93, 0x07, 0xe7, 0x6e, 0x3e, 0xf5, 0xbe, 0xd0, 0x34, 0x70, 0xf6, 0xbd, 0xfc, 0x22, 0xe4, 0xd7, 0xf0, 0x66, 0x1b, 0xd1, 0xb8, 0x76, 0x96, 0xc9, 0xda, 0x20, 0x1b, 0xbb, 0xdc, 0xa6, 0xa2, 0x23, 0x44, 0xea, 0x88, 0xff, 0xc7, 0x32, 0x53, 0x70, 0x86, 0x3b, 0x4c, 0xfb, 0x10, 0x57, 0x40, 0x16, 0x5e, 0xae, 0xd9, 0xc6, 0xe7, 0x3b, 0x06, 0xa4, 0xe8};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_779, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_780, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15638 */
  {
    static const uint8_t entropy_781[] = { 0x31, 0xd9, 0xb2, 0x6b, 0x6e, 0xb7, 0xfb, 0x56, 0x9c, 0x1d, 0x32, 0x42, 0xb5, 0x0a, 0x19, 0xe1, 0x3f, 0x7b, 0xfc, 0xf0, 0xb1, 0x5e, 0xa7, 0x39, 0x97, 0xac, 0xac, 0x84, 0x7b, 0x3a, 0xb8, 0x40, 0xa7, 0x2d, 0x03, 0xff, 0x21, 0xf6, 0xb5, 0x2e, 0x4f, 0x65, 0x55, 0xfb, 0x8a, 0x4c, 0xa9, 0x7d};
    static const uint8_t returned_782[] = { 0xbc, 0xcd, 0x3f, 0xea, 0x43, 0xdf, 0x70, 0xaf, 0xe2, 0xd9, 0x57, 0x8f, 0x4a, 0xc4, 0xb4, 0x08, 0x7a, 0x0e, 0xd3, 0x72, 0xa6, 0x74, 0x87, 0x08, 0x9d, 0x9d, 0xe9, 0x38, 0x69, 0x93, 0x65, 0xae, 0xfc, 0x92, 0x4b, 0x7d, 0xc9, 0xd8, 0x38, 0x84, 0xbe, 0x27, 0x46, 0xe1, 0x96, 0xce, 0x89, 0xe0, 0x7e, 0xde, 0x23, 0x3d, 0x16, 0x34, 0x2d, 0x22, 0x75, 0x71, 0xf0, 0x89, 0x71, 0x60, 0x95, 0x22};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_783[] = { 0xdf, 0x36, 0x22, 0x28, 0x2c, 0x7d, 0x1c, 0xcd, 0xd1, 0x78, 0x4e, 0x50, 0x81, 0x37, 0xc2, 0xd0, 0xc9, 0x12, 0xb7, 0x90, 0x8c, 0xa7, 0x5e, 0x28, 0x32, 0x94, 0x55, 0xe3, 0x6d, 0x91, 0x74, 0x53, 0x05, 0x18, 0xd2, 0x83, 0x95, 0x11, 0x4d, 0x1c, 0xc8, 0xaf, 0x71, 0xac, 0xe5, 0x25, 0x3e, 0x03};
    rng.instantiate(entropy_781, personalization_783, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_782, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15646 */
  {
    static const uint8_t entropy_784[] = { 0xd2, 0x35, 0x6c, 0x94, 0xec, 0x89, 0x86, 0x9e, 0x29, 0x40, 0x07, 0x26, 0x00, 0x2d, 0xa7, 0x2c, 0xa8, 0x25, 0xa5, 0xf1, 0x12, 0xf0, 0xc5, 0xff, 0xf6, 0xbb, 0x08, 0xa8, 0x97, 0x58, 0xdd, 0x51, 0xd0, 0xfc, 0x84, 0xb8, 0x10, 0xeb, 0xed, 0xe6, 0xb6, 0x2f, 0x1b, 0x40, 0x3e, 0xd7, 0x82, 0xe0};
    static const uint8_t returned_785[] = { 0x2f, 0x8b, 0x37, 0xe4, 0x31, 0x9e, 0x72, 0x82, 0x6b, 0xdb, 0x3a, 0x40, 0xe5, 0x32, 0x90, 0x74, 0xa9, 0x01, 0x56, 0x56, 0xfc, 0xae, 0xe5, 0x93, 0x3d, 0x01, 0x7e, 0x2f, 0x3f, 0x3b, 0xf5, 0x67, 0x13, 0x75, 0xbe, 0x0c, 0x89, 0xbc, 0xab, 0xc2, 0x03, 0x7e, 0x58, 0x77, 0x2b, 0xf5, 0x87, 0x7c, 0x41, 0x42, 0xc0, 0xb8, 0xd9, 0xf0, 0x28, 0x6e, 0x12, 0xe5, 0x6a, 0x38, 0xb7, 0xa4, 0xf0, 0xff};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_786[] = { 0x12, 0xa8, 0x85, 0xaf, 0x97, 0x5d, 0xac, 0xff, 0x4c, 0x4c, 0x7d, 0x55, 0x56, 0x1f, 0xf5, 0x49, 0xa5, 0x65, 0xf1, 0xd7, 0xf6, 0x06, 0x07, 0xd8, 0xfb, 0x9d, 0xde, 0x53, 0xe1, 0x08, 0xe9, 0x2c, 0x8b, 0x99, 0xf5, 0x88, 0x19, 0x23, 0x68, 0xca, 0xfa, 0x62, 0x9e, 0x52, 0xb2, 0xd4, 0x2b, 0xc0};
    rng.instantiate(entropy_784, personalization_786, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_785, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15654 */
  {
    static const uint8_t entropy_787[] = { 0x48, 0x41, 0x6d, 0xf6, 0xc4, 0x9b, 0x85, 0xfc, 0x18, 0xcd, 0xe3, 0x1c, 0xab, 0x33, 0x7a, 0xc4, 0xe6, 0x14, 0xcd, 0xed, 0xb6, 0xb5, 0xf7, 0x08, 0x0a, 0xd8, 0x15, 0xad, 0xe9, 0x58, 0xdd, 0x3a, 0x12, 0x11, 0x16, 0x51, 0x1e, 0xd3, 0x36, 0x2c, 0xe3, 0x56, 0xe2, 0x86, 0x1c, 0x79, 0x7f, 0x3b};
    static const uint8_t returned_788[] = { 0x0c, 0x44, 0x98, 0x85, 0x2f, 0x8b, 0x8a, 0x75, 0x46, 0xe0, 0xa2, 0x4c, 0x18, 0xd6, 0xa3, 0x27, 0x21, 0x4f, 0x00, 0x79, 0x94, 0xfd, 0xbf, 0xad, 0x72, 0xbf, 0x91, 0xf6, 0x7c, 0x2e, 0x2e, 0xc4, 0x1c, 0x83, 0x5b, 0x47, 0xe1, 0x1a, 0xa7, 0x66, 0x3e, 0xb2, 0xaa, 0xb4, 0x23, 0xe8, 0xfb, 0xa7, 0x3b, 0xf7, 0xb0, 0x01, 0x15, 0x56, 0x16, 0xe5, 0x80, 0x0c, 0x79, 0xdd, 0x27, 0x79, 0xbe, 0x47};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_789[] = { 0xd7, 0x28, 0x50, 0x32, 0x3c, 0xc6, 0x3c, 0xba, 0x56, 0x6d, 0xcb, 0xdd, 0xde, 0x35, 0xa7, 0x0c, 0x69, 0x09, 0x78, 0x92, 0xe6, 0x1e, 0x04, 0x1a, 0xc6, 0x47, 0x39, 0x68, 0x9a, 0x22, 0x5a, 0xf0, 0x8a, 0x4e, 0x46, 0x6a, 0xf7, 0x89, 0xb0, 0x40, 0xa0, 0x97, 0x54, 0x54, 0x5c, 0x24, 0xc7, 0x09};
    rng.instantiate(entropy_787, personalization_789, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_788, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15662 */
  {
    static const uint8_t entropy_790[] = { 0xbc, 0x26, 0x44, 0xdf, 0xa4, 0xeb, 0x26, 0xab, 0xea, 0x11, 0xb5, 0xc8, 0xc2, 0xb7, 0x53, 0x74, 0xc0, 0x56, 0x92, 0x78, 0x09, 0xfa, 0x35, 0x7b, 0xfe, 0xd4, 0xa1, 0x4f, 0xbe, 0x17, 0xe8, 0x28, 0x6c, 0x6b, 0x34, 0x5e, 0xac, 0x5b, 0x5b, 0x6c, 0x80, 0xc0, 0x74, 0x4f, 0x4c, 0x48, 0xc4, 0x00};
    static const uint8_t returned_791[] = { 0xfc, 0xb1, 0x6f, 0x5c, 0x46, 0x57, 0xcd, 0x83, 0x55, 0xdb, 0x7a, 0x35, 0x93, 0xd3, 0x45, 0xd0, 0x36, 0xe0, 0xea, 0x4e, 0xdb, 0x37, 0x78, 0x1e, 0x2b, 0xb6, 0xe5, 0x0d, 0x04, 0x80, 0xfb, 0x82, 0x0f, 0xcb, 0x94, 0x44, 0x9c, 0x69, 0x5d, 0x2c, 0xf4, 0xc9, 0xc3, 0x11, 0x2d, 0x41, 0xbe, 0xb5, 0xcc, 0x05, 0x80, 0x8f, 0x1c, 0x93, 0x5d, 0xa6, 0xda, 0x03, 0x57, 0x36, 0xba, 0xc8, 0x83, 0xaa};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_792[] = { 0xe8, 0xf9, 0x35, 0x4d, 0x45, 0xe3, 0x6c, 0x31, 0x7d, 0xbf, 0xaf, 0x60, 0xfa, 0xc9, 0x03, 0x53, 0xa2, 0x0b, 0x96, 0x36, 0xae, 0xc3, 0xae, 0x3d, 0xc4, 0x4a, 0x28, 0x7b, 0x3c, 0x9e, 0x52, 0xbf, 0x0a, 0x1e, 0x99, 0x9f, 0xcb, 0x2a, 0x92, 0xab, 0x35, 0x20, 0x06, 0xc8, 0xab, 0x36, 0xbc, 0x1e};
    rng.instantiate(entropy_790, personalization_792, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_791, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15670 */
  {
    static const uint8_t entropy_793[] = { 0x28, 0xaf, 0x8c, 0x2a, 0x47, 0xa3, 0x7d, 0x7e, 0xcd, 0x46, 0x7e, 0x4c, 0xc2, 0x3e, 0xc0, 0xa9, 0x25, 0xb3, 0x25, 0x28, 0x7f, 0xeb, 0xb1, 0x03, 0x60, 0x60, 0xd3, 0x72, 0x98, 0x55, 0xc2, 0x76, 0x0d, 0x2c, 0xfa, 0xfd, 0x42, 0x3b, 0xac, 0x1b, 0xa1, 0x68, 0x40, 0x6b, 0x0b, 0x0e, 0xc7, 0x94};
    static const uint8_t returned_794[] = { 0x0f, 0x28, 0x75, 0x67, 0x5e, 0x05, 0x4b, 0xd6, 0xfd, 0xe2, 0x94, 0x8b, 0x72, 0xf3, 0xa2, 0x60, 0x38, 0x5f, 0xd4, 0x6b, 0x90, 0xe3, 0x0f, 0xd5, 0x64, 0xa0, 0xbd, 0x14, 0xe5, 0x15, 0x61, 0xb4, 0x0f, 0x1f, 0xe1, 0xe3, 0x1c, 0x7a, 0xe7, 0xcc, 0xe8, 0x51, 0xa6, 0x1a, 0x85, 0xf0, 0x6a, 0xb0, 0xd9, 0xa4, 0x94, 0xda, 0x82, 0xc0, 0xbf, 0x68, 0x08, 0x11, 0x39, 0x40, 0x2b, 0x2b, 0xe6, 0x4f};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_795[] = { 0xc8, 0xc0, 0x74, 0xae, 0x56, 0x06, 0xab, 0xdf, 0x47, 0x17, 0xfa, 0x73, 0x08, 0xc6, 0x0f, 0xa9, 0x72, 0x7d, 0x81, 0x73, 0xb5, 0xf2, 0x2e, 0x50, 0xc9, 0x58, 0x5a, 0x10, 0x12, 0x22, 0x5e, 0xe0, 0x42, 0x1d, 0x47, 0x86, 0x33, 0x64, 0x8d, 0x0e, 0xc9, 0xf6, 0x1d, 0x94, 0x5b, 0xfa, 0x42, 0xcc};
    rng.instantiate(entropy_793, personalization_795, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_794, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15678 */
  {
    static const uint8_t entropy_796[] = { 0xe6, 0x1c, 0xb2, 0xc1, 0x7c, 0x1e, 0xeb, 0x30, 0xff, 0x49, 0xd1, 0x49, 0x54, 0x17, 0x1f, 0xad, 0xae, 0x3a, 0xec, 0xf9, 0xa2, 0xa3, 0x9b, 0x7e, 0xce, 0x60, 0x66, 0xcd, 0x85, 0xe3, 0xa0, 0x8e, 0x2a, 0xec, 0xe5, 0x6b, 0x2b, 0x82, 0x1a, 0x35, 0x7e, 0xa2, 0x0c, 0x28, 0x60, 0xdf, 0xf7, 0x94};
    static const uint8_t returned_797[] = { 0x0c, 0x01, 0xe9, 0x21, 0x7f, 0x5a, 0xde, 0x5e, 0xd2, 0x16, 0x0b, 0x7d, 0xa9, 0xdb, 0xf7, 0xb4, 0x86, 0x08, 0x12, 0x05, 0x83, 0xfb, 0xda, 0x0d, 0x97, 0xc6, 0x4e, 0xad, 0xf8, 0x14, 0xd3, 0x08, 0x9a, 0x5c, 0x83, 0xef, 0x6f, 0x38, 0xfa, 0xd7, 0xae, 0x3c, 0x6a, 0x12, 0x0a, 0x9d, 0x4a, 0x6b, 0xee, 0xff, 0x52, 0x35, 0xae, 0xcf, 0x61, 0x0d, 0x43, 0xe4, 0x2f, 0x33, 0x2d, 0x4a, 0x0d, 0x77};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_798[] = { 0xa1, 0x0b, 0x0a, 0xce, 0x38, 0x52, 0x24, 0x34, 0x6e, 0x8d, 0x61, 0xf4, 0xcf, 0x2b, 0xd5, 0x8c, 0xba, 0x38, 0xfb, 0xf9, 0x69, 0xcc, 0x5d, 0xe3, 0x40, 0x2f, 0x6f, 0x85, 0xa5, 0x55, 0x70, 0x4c, 0x01, 0x6b, 0x5c, 0x3d, 0x21, 0x95, 0x50, 0xc5, 0x1d, 0x96, 0x71, 0x3d, 0x5f, 0x06, 0x7f, 0x37};
    rng.instantiate(entropy_796, personalization_798, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_797, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15686 */
  {
    static const uint8_t entropy_799[] = { 0x17, 0xc1, 0x89, 0x10, 0xa6, 0x7e, 0x7c, 0x61, 0x08, 0x0c, 0xe2, 0x4c, 0xee, 0x2c, 0xf2, 0xda, 0x92, 0xef, 0xa7, 0x03, 0xbc, 0x13, 0x60, 0x69, 0xe0, 0x21, 0x54, 0x90, 0x73, 0x1f, 0x05, 0xd5, 0x66, 0xac, 0x86, 0x42, 0x58, 0xcb, 0x02, 0x8d, 0x32, 0x80, 0x8a, 0xbc, 0x7f, 0x18, 0xe0, 0xef};
    static const uint8_t returned_800[] = { 0xfd, 0x46, 0x7f, 0x8a, 0xc5, 0xc3, 0x7a, 0x92, 0xbd, 0x62, 0xc0, 0xa9, 0x98, 0xce, 0x8b, 0x22, 0x52, 0x9a, 0x2d, 0xce, 0xd2, 0x01, 0x50, 0xac, 0xb9, 0xfc, 0xaa, 0xb1, 0xd4, 0x92, 0x76, 0x8e, 0xf1, 0x4e, 0x9d, 0x17, 0x10, 0xf4, 0xc4, 0x6d, 0x45, 0x66, 0x2a, 0x43, 0x97, 0x26, 0xbd, 0x4e, 0xc1, 0x57, 0xe3, 0x36, 0x40, 0x0f, 0x82, 0x1d, 0xf2, 0x7c, 0x28, 0xbd, 0xa1, 0xf2, 0x56, 0x91};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_801[] = { 0x4e, 0x0a, 0xcc, 0x75, 0x03, 0x13, 0xc2, 0x06, 0x13, 0x52, 0x5b, 0x8c, 0x22, 0xd0, 0x75, 0x95, 0x82, 0xbd, 0x65, 0x64, 0x84, 0x05, 0x1d, 0xa4, 0x61, 0xa3, 0x36, 0xcb, 0xd8, 0x5c, 0x74, 0x05, 0x6d, 0xb8, 0x62, 0xb5, 0x96, 0x75, 0xb8, 0x11, 0x7a, 0x2a, 0x17, 0x8a, 0xec, 0x41, 0x5d, 0xe9};
    rng.instantiate(entropy_799, personalization_801, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_800, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15694 */
  {
    static const uint8_t entropy_802[] = { 0xe7, 0xf7, 0x05, 0xa3, 0x87, 0x5c, 0xd6, 0x00, 0x7f, 0x28, 0xd5, 0x26, 0xf2, 0xd9, 0xdb, 0xfb, 0x36, 0xfd, 0xea, 0x2e, 0xa6, 0x18, 0x1e, 0xa5, 0xb7, 0x37, 0xcd, 0x77, 0x8b, 0x53, 0xff, 0xe1, 0x5a, 0x43, 0xd7, 0xfa, 0x95, 0x8d, 0xd0, 0x70, 0x45, 0xef, 0x53, 0xbe, 0x08, 0x09, 0xac, 0x00};
    static const uint8_t returned_803[] = { 0x7e, 0x3d, 0x3c, 0x54, 0x8c, 0xad, 0x22, 0xeb, 0x9a, 0xfe, 0x4f, 0x79, 0x8a, 0x85, 0x34, 0x6a, 0x61, 0x1b, 0x08, 0xe9, 0x30, 0xfc, 0xb3, 0x3b, 0x46, 0xe7, 0x67, 0x02, 0x0e, 0xb8, 0x96, 0xb2, 0xc9, 0x14, 0xc0, 0x44, 0x8e, 0x17, 0x55, 0x61, 0x5e, 0xa2, 0xfe, 0xce, 0x6c, 0x98, 0xca, 0x8e, 0xd1, 0x75, 0x17, 0x77, 0xc0, 0x56, 0xf3, 0x2c, 0xb6, 0xc1, 0x1a, 0x72, 0xb3, 0xff, 0x50, 0xf3};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_804[] = { 0x6a, 0x74, 0x3b, 0xea, 0xc5, 0x19, 0xf6, 0xfd, 0x67, 0xc9, 0xb5, 0xe5, 0x78, 0xa0, 0x66, 0x22, 0x1c, 0x20, 0x46, 0xb8, 0x31, 0x4f, 0x98, 0x77, 0xa9, 0x6e, 0x66, 0x7c, 0x35, 0x4b, 0xca, 0xb0, 0x1e, 0xd5, 0xe6, 0xda, 0xb1, 0xaf, 0xb1, 0x1f, 0x2c, 0xe0, 0x35, 0x87, 0x8e, 0x14, 0x58, 0x67};
    rng.instantiate(entropy_802, personalization_804, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_803, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15702 */
  {
    static const uint8_t entropy_805[] = { 0x8f, 0xa5, 0x0b, 0x4f, 0x91, 0x94, 0x30, 0x6e, 0xe6, 0xe4, 0xd7, 0xde, 0x35, 0x61, 0x55, 0x3d, 0x4a, 0x98, 0xbd, 0xce, 0x2c, 0x17, 0xfe, 0xe3, 0x46, 0xd6, 0xc1, 0x77, 0x98, 0x3e, 0xb3, 0x90, 0xa9, 0x03, 0x1b, 0xb8, 0x8d, 0x82, 0xe1, 0x05, 0xc7, 0x3f, 0xa7, 0x16, 0xec, 0x40, 0xfa, 0x3a};
    static const uint8_t returned_806[] = { 0x2c, 0x8e, 0x0d, 0xc8, 0x9b, 0x8f, 0xa1, 0xa0, 0x4e, 0x85, 0x31, 0x0e, 0xd0, 0xb9, 0x5d, 0xf6, 0x7e, 0x65, 0xee, 0x03, 0x7b, 0x3a, 0x8a, 0xfc, 0x55, 0xde, 0x18, 0x0c, 0x20, 0x7f, 0x19, 0xb7, 0x56, 0x9f, 0x2c, 0x95, 0x2d, 0x0b, 0xfa, 0xdb, 0x78, 0x07, 0x22, 0x50, 0x38, 0xd7, 0x59, 0xff, 0xd9, 0x99, 0x1a, 0xed, 0x1e, 0xef, 0x56, 0xdb, 0x14, 0xed, 0xb8, 0x81, 0xbb, 0xb7, 0xc0, 0x33};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_807[] = { 0x1e, 0xfe, 0xe8, 0xb7, 0x66, 0x43, 0xd4, 0xfa, 0x2d, 0x34, 0xd0, 0x76, 0x1d, 0x29, 0x24, 0x4b, 0x42, 0x68, 0x91, 0x7b, 0x57, 0x0e, 0xef, 0x2a, 0x95, 0x8e, 0xc6, 0x8d, 0x9e, 0xfa, 0x07, 0x1e, 0xc7, 0x96, 0xb6, 0x29, 0x91, 0x34, 0x3a, 0x43, 0x03, 0xa0, 0xb9, 0xe8, 0x30, 0xc3, 0x48, 0x39};
    rng.instantiate(entropy_805, personalization_807, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_806, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15710 */
  {
    static const uint8_t entropy_808[] = { 0x3b, 0x22, 0x1d, 0x43, 0x7c, 0xa1, 0xd9, 0xbd, 0x91, 0x5e, 0xa8, 0x69, 0xa9, 0x7c, 0xad, 0x87, 0x54, 0x1f, 0x80, 0x21, 0xf2, 0xd1, 0xd0, 0x33, 0x18, 0xa1, 0x1e, 0x08, 0xc5, 0x67, 0xa9, 0xbb, 0x9c, 0x9d, 0xd0, 0x74, 0xca, 0x08, 0x73, 0xe8, 0x9c, 0x1d, 0x6b, 0x7d, 0x88, 0x16, 0x57, 0xf7};
    static const uint8_t returned_809[] = { 0xe6, 0x54, 0xd0, 0x4b, 0x43, 0xd7, 0xbd, 0xcc, 0x64, 0x36, 0x34, 0x7d, 0xe9, 0x1a, 0x72, 0x6c, 0xd6, 0x26, 0x8b, 0x28, 0xcc, 0xdc, 0xb9, 0x30, 0xb6, 0x65, 0xfe, 0x9e, 0xf1, 0x65, 0x4e, 0xe3, 0x1b, 0x83, 0xbd, 0x3d, 0x92, 0x30, 0x00, 0xc7, 0x3e, 0xc7, 0xc7, 0x1f, 0x81, 0x18, 0xd2, 0x03, 0xcf, 0x13, 0x1b, 0x8b, 0x16, 0xd2, 0x05, 0xe9, 0x51, 0x80, 0x72, 0x30, 0xab, 0x44, 0x88, 0xe1};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_810[] = { 0x64, 0x29, 0xf3, 0x84, 0xa7, 0x53, 0x54, 0x9d, 0x2a, 0x22, 0xb1, 0xb0, 0x30, 0xdc, 0x82, 0x08, 0xb0, 0x39, 0x1d, 0x62, 0x90, 0x70, 0xa8, 0x56, 0x40, 0xfd, 0x1d, 0xc0, 0x92, 0xba, 0x87, 0xfd, 0xe2, 0xcb, 0x46, 0xc6, 0x9f, 0xf2, 0xc6, 0x4d, 0xbb, 0xb3, 0x2f, 0xea, 0x11, 0x36, 0x33, 0x6d};
    rng.instantiate(entropy_808, personalization_810, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_809, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15718 */
  {
    static const uint8_t entropy_811[] = { 0xaa, 0x35, 0x05, 0xf5, 0x6a, 0x23, 0x53, 0xc9, 0x77, 0x97, 0xf0, 0x04, 0xfb, 0xab, 0x55, 0x60, 0xf9, 0x50, 0x33, 0xa7, 0x4c, 0xcb, 0x58, 0x41, 0x08, 0x7d, 0x8c, 0x23, 0x35, 0xde, 0xed, 0x81, 0x99, 0x45, 0xf6, 0xe2, 0x6e, 0xb2, 0xae, 0x1f, 0x86, 0x0d, 0x5e, 0xa2, 0x55, 0x74, 0xb9, 0xe0};
    static const uint8_t returned_812[] = { 0x96, 0x65, 0x03, 0xf5, 0xf8, 0x5f, 0x50, 0xf9, 0x4e, 0x18, 0x85, 0xca, 0x2a, 0x32, 0x03, 0x4a, 0xc1, 0x95, 0xa8, 0x19, 0x9c, 0x12, 0x2b, 0x71, 0xe2, 0x68, 0xb2, 0xd3, 0x04, 0xc8, 0xcf, 0x7a, 0xf8, 0xd1, 0xd2, 0x7c, 0xeb, 0x2a, 0x46, 0xbd, 0xa7, 0x0a, 0x1e, 0x5f, 0xfa, 0xc0, 0xa6, 0x52, 0x10, 0x89, 0x8b, 0x27, 0x4a, 0x5b, 0xa5, 0x36, 0xee, 0x07, 0xa2, 0x08, 0x63, 0xa0, 0x11, 0x52};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_813[] = { 0x95, 0x2f, 0xda, 0x2a, 0xfa, 0x92, 0x57, 0xb6, 0xbc, 0x0c, 0xe0, 0x8d, 0xd1, 0x71, 0x27, 0xe8, 0x5b, 0xcf, 0xbb, 0xf5, 0x15, 0x95, 0x8e, 0x2e, 0x1e, 0x09, 0xa5, 0x33, 0x0e, 0xf8, 0xdc, 0x78, 0xfe, 0x7c, 0x9a, 0xad, 0x42, 0xd5, 0x47, 0x1e, 0x84, 0xc6, 0xcc, 0x74, 0x8b, 0x1b, 0x37, 0xbe};
    rng.instantiate(entropy_811, personalization_813, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_812, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15726 */
  {
    static const uint8_t entropy_814[] = { 0x15, 0x27, 0x5e, 0x31, 0xbe, 0x7f, 0x9e, 0x27, 0x0c, 0x4e, 0x4b, 0x26, 0xe8, 0xea, 0x85, 0x0f, 0x31, 0xfd, 0xf9, 0x40, 0x35, 0x9e, 0x47, 0xe6, 0x39, 0xd9, 0x8e, 0x86, 0x86, 0x0a, 0x6a, 0x95, 0x39, 0x01, 0x69, 0x11, 0xf1, 0x9d, 0x39, 0x20, 0x8e, 0xdc, 0xb8, 0x99, 0xf4, 0x55, 0x67, 0x7b};
    static const uint8_t returned_815[] = { 0x60, 0x6b, 0xe9, 0xe1, 0x42, 0x64, 0xc0, 0x1a, 0xfd, 0xa7, 0xaa, 0x71, 0xe3, 0xc2, 0x34, 0xcc, 0x06, 0x8e, 0xe6, 0x9e, 0x98, 0x7a, 0x83, 0x8a, 0x21, 0x40, 0xdf, 0x02, 0x8b, 0xfe, 0x74, 0xf8, 0x18, 0x8a, 0xe4, 0x41, 0x8f, 0x10, 0xfd, 0x09, 0x9b, 0x8b, 0x99, 0x4a, 0x27, 0x0e, 0x23, 0x9a, 0x52, 0x6f, 0x2d, 0x03, 0xb3, 0x05, 0x99, 0x65, 0x08, 0x46, 0x8c, 0x07, 0xd4, 0x4b, 0xf5, 0x4c};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_816[] = { 0x2c, 0x1f, 0x62, 0x03, 0x4b, 0x31, 0x46, 0x00, 0xef, 0x44, 0xe0, 0x40, 0x22, 0x07, 0xaa, 0xbf, 0xd6, 0x17, 0xbc, 0x3d, 0x08, 0xc3, 0xb3, 0x9a, 0x90, 0xb3, 0x84, 0x77, 0x5f, 0x02, 0x18, 0x1b, 0x9b, 0x41, 0x03, 0x2e, 0x4a, 0xb5, 0xd3, 0x2d, 0xd2, 0xab, 0x28, 0xcd, 0x14, 0xa1, 0x73, 0x68};
    rng.instantiate(entropy_814, personalization_816, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_815, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15734 */
  {
    static const uint8_t entropy_817[] = { 0x31, 0x25, 0xc3, 0xea, 0xce, 0x58, 0xb3, 0x49, 0x18, 0x6e, 0x70, 0xed, 0xf8, 0x25, 0xc5, 0x15, 0x8f, 0x19, 0xd5, 0x3d, 0x55, 0x6a, 0x57, 0x37, 0x08, 0x8c, 0x72, 0x3d, 0x84, 0xed, 0xfc, 0x62, 0x7e, 0xdf, 0x2e, 0xae, 0x60, 0x2d, 0xfc, 0xe5, 0xa9, 0xad, 0x35, 0xe0, 0xb9, 0x5f, 0x40, 0x96};
    static const uint8_t returned_818[] = { 0x5b, 0x6a, 0x62, 0xc7, 0x0e, 0x98, 0x51, 0x70, 0x28, 0xb1, 0x78, 0x49, 0x78, 0xbf, 0x1f, 0x76, 0x42, 0xa0, 0x5f, 0xd5, 0x86, 0x68, 0x4a, 0x4f, 0xda, 0x2c, 0x98, 0xc0, 0xb8, 0xb6, 0x98, 0x61, 0xb0, 0xd6, 0x5a, 0x4f, 0x96, 0x06, 0x10, 0x61, 0x87, 0x4c, 0xdc, 0xd5, 0xd9, 0x0d, 0xc0, 0xe9, 0xc7, 0x4b, 0x04, 0x86, 0x41, 0x28, 0x0f, 0xd7, 0xf6, 0x89, 0x24, 0x43, 0x92, 0xf2, 0x0d, 0x0a};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_819[] = { 0xbe, 0x9f, 0xe1, 0xde, 0x0b, 0x44, 0x81, 0x47, 0xc4, 0x9b, 0x41, 0x2d, 0x8d, 0x72, 0x2f, 0xa0, 0xd6, 0xb6, 0xcb, 0x99, 0x8f, 0xf7, 0x7e, 0xbb, 0xe2, 0x39, 0x84, 0x82, 0xb0, 0xf9, 0xe8, 0x9b, 0x10, 0xe8, 0xe5, 0x02, 0x6f, 0xcc, 0x8a, 0x2f, 0x4b, 0x9f, 0xaa, 0x33, 0x8c, 0x45, 0xf8, 0xcd};
    rng.instantiate(entropy_817, personalization_819, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_818, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15742 */
  {
    static const uint8_t entropy_820[] = { 0x12, 0x13, 0xf4, 0x66, 0x1f, 0x4c, 0xd3, 0x63, 0xbb, 0xf1, 0x6f, 0x5b, 0xa4, 0xce, 0x4f, 0x33, 0x02, 0x96, 0x17, 0x97, 0x77, 0x2f, 0xc8, 0xe4, 0x12, 0xc2, 0x61, 0x0b, 0x4b, 0x42, 0xd4, 0xcd, 0xeb, 0x14, 0xed, 0x19, 0xb5, 0x0b, 0x6a, 0xd9, 0x68, 0x62, 0x51, 0x69, 0xb4, 0xeb, 0x5d, 0xec};
    static const uint8_t returned_821[] = { 0x3c, 0x0f, 0xf2, 0xad, 0x45, 0x58, 0x58, 0x5e, 0xce, 0x97, 0x43, 0x44, 0xb5, 0xad, 0x70, 0x45, 0xa0, 0xfc, 0xa9, 0xef, 0x1f, 0x25, 0xe4, 0x25, 0x1d, 0xc8, 0x00, 0xd4, 0x1a, 0xbc, 0x3e, 0xd0, 0x0c, 0x3a, 0xda, 0xb5, 0xdb, 0xa1, 0x41, 0xfb, 0x1f, 0x95, 0xc3, 0xc2, 0x17, 0x32, 0xd4, 0xb6, 0x3c, 0x19, 0x2f, 0xb4, 0x92, 0x4c, 0x6f, 0x7f, 0x98, 0x4b, 0xaa, 0x88, 0xe4, 0xdc, 0x90, 0x91};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_822[] = { 0x98, 0xa1, 0xc8, 0x14, 0xae, 0xc3, 0xdf, 0x5b, 0xb4, 0xfb, 0x17, 0x77, 0x8d, 0x58, 0xe7, 0x88, 0x4a, 0x69, 0xde, 0xa0, 0x9a, 0x83, 0xbe, 0x26, 0x43, 0xd1, 0x69, 0xc1, 0x50, 0xd0, 0x6a, 0x9c, 0xdd, 0x47, 0x7e, 0x20, 0x62, 0x39, 0x93, 0xc7, 0x50, 0x5e, 0xa1, 0x04, 0xb6, 0x2c, 0x87, 0x53};
    rng.instantiate(entropy_820, personalization_822, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_821, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15750 */
  {
    static const uint8_t entropy_823[] = { 0x40, 0x9b, 0xc3, 0x72, 0xb8, 0x73, 0x8c, 0x80, 0xac, 0x35, 0x72, 0x1b, 0xbb, 0x8e, 0x80, 0x6d, 0xdc, 0x93, 0xe8, 0x16, 0xc8, 0xfa, 0xb9, 0x8d, 0x1d, 0x0f, 0x2a, 0x05, 0x3f, 0x95, 0x96, 0x01, 0x66, 0x70, 0x93, 0x80, 0x69, 0x5b, 0x0e, 0x8a, 0x54, 0x8f, 0xe4, 0x8e, 0x4c, 0x12, 0xdc, 0x01};
    static const uint8_t returned_824[] = { 0x01, 0xfe, 0x7c, 0x18, 0xb8, 0x5e, 0xde, 0x51, 0x97, 0x40, 0xed, 0x40, 0x68, 0xaf, 0x24, 0xb4, 0xba, 0xaa, 0xa7, 0xd7, 0x27, 0xb0, 0x52, 0x41, 0xaf, 0x48, 0x1e, 0xc8, 0x43, 0xc2, 0x0b, 0xfc, 0xe4, 0x1e, 0x4b, 0xb1, 0x31, 0xcf, 0x03, 0xa5, 0x04, 0xae, 0xcd, 0x54, 0x09, 0xd0, 0x3f, 0x6b, 0x5b, 0x84, 0xd2, 0x2f, 0x0e, 0x10, 0x42, 0xb6, 0x6e, 0x5d, 0x99, 0xd4, 0x33, 0x97, 0x42, 0xfd};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_825[] = { 0x97, 0x5d, 0xa7, 0x43, 0x9d, 0xf9, 0xa5, 0xb7, 0x6f, 0x8a, 0xe5, 0x20, 0x1d, 0xa3, 0x56, 0x92, 0xfd, 0x46, 0xd2, 0x77, 0x78, 0x7f, 0x8a, 0x73, 0xb0, 0x82, 0x01, 0xe6, 0x54, 0x7b, 0xa7, 0x2d, 0xe2, 0x6b, 0xa7, 0x72, 0x5a, 0xd4, 0x4a, 0x11, 0xf7, 0x42, 0xe6, 0xc2, 0xb5, 0x7c, 0x0e, 0x9f};
    rng.instantiate(entropy_823, personalization_825, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_824, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15894 */
  {
    static const uint8_t entropy_826[] = { 0x56, 0x67, 0xdf, 0x8e, 0x81, 0x47, 0xf0, 0xd5, 0x93, 0x98, 0x9c, 0x0b, 0x28, 0xbe, 0x74, 0x97, 0xfa, 0x9e, 0x28, 0xf4, 0x6c, 0x00, 0xbd, 0xe1, 0x2e, 0x53, 0xaa, 0x26, 0xdc, 0x3d, 0x07, 0xdc, 0x8d, 0x76, 0x08, 0xb5, 0x5a, 0x16, 0xe9, 0x27, 0x09, 0x76, 0x2c, 0x2c, 0x1d, 0xee, 0x64, 0xb3};
    static const uint8_t returned_827[] = { 0x63, 0x9e, 0x53, 0x94, 0xb5, 0x39, 0xda, 0x7b, 0xe7, 0xe3, 0x65, 0x84, 0x9c, 0x69, 0x53, 0x38, 0xc2, 0x96, 0x95, 0x49, 0x39, 0xe4, 0xd6, 0x05, 0xc8, 0x8f, 0x60, 0x56, 0xca, 0xb6, 0x36, 0x83, 0x8e, 0x2a, 0x51, 0xfb, 0xd0, 0x99, 0x63, 0x84, 0x4b, 0x04, 0x4e, 0x83, 0xb4, 0x54, 0xc8, 0x7a, 0x52, 0xd2, 0x5d, 0xad, 0x86, 0xcd, 0x52, 0xb9, 0xfe, 0x8a, 0x66, 0xe1, 0xb0, 0x1f, 0xd4, 0xe3};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_826, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_827, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15902 */
  {
    static const uint8_t entropy_828[] = { 0x81, 0x2b, 0x0a, 0xd3, 0x10, 0x61, 0xe2, 0xee, 0x11, 0xf6, 0x8f, 0xba, 0x7c, 0x6e, 0xa4, 0xce, 0xe8, 0xce, 0xb4, 0xea, 0xe5, 0x0f, 0x11, 0xed, 0xa7, 0xb1, 0xf3, 0x8b, 0x52, 0xd2, 0xf4, 0x9e, 0x06, 0x1a, 0xcd, 0x25, 0xcc, 0x55, 0x81, 0x9e, 0x72, 0x16, 0x0b, 0x31, 0x09, 0x45, 0xfc, 0x8e};
    static const uint8_t returned_829[] = { 0x61, 0x48, 0x21, 0xe0, 0x84, 0x1d, 0xcf, 0x02, 0xb4, 0x97, 0x9d, 0xf0, 0xd9, 0x07, 0x9b, 0xd6, 0x33, 0x4a, 0xcb, 0xef, 0xd0, 0x91, 0x21, 0xe5, 0x12, 0x39, 0x8f, 0x6b, 0x21, 0x17, 0x8c, 0x1e, 0x99, 0x8d, 0x19, 0x9d, 0x33, 0x0a, 0xf4, 0xdd, 0x16, 0x2e, 0xe1, 0xad, 0xb6, 0x1e, 0xcf, 0x28, 0xee, 0xec, 0xde, 0x8a, 0x89, 0x59, 0x93, 0xc2, 0x71, 0x14, 0x27, 0xa3, 0xbb, 0xe9, 0x09, 0x32};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_828, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_829, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15910 */
  {
    static const uint8_t entropy_830[] = { 0x87, 0xb8, 0x33, 0xc1, 0xdf, 0x6c, 0x73, 0xd7, 0x78, 0x0b, 0x29, 0x7d, 0xcd, 0x08, 0xbd, 0x12, 0x2f, 0x3e, 0x4a, 0xbd, 0x4d, 0xca, 0x67, 0x38, 0xc5, 0x5e, 0x51, 0xd6, 0x70, 0x9e, 0x92, 0x65, 0x6a, 0x17, 0x9d, 0x16, 0x35, 0x2a, 0xf0, 0xbf, 0x13, 0xf0, 0xeb, 0xd2, 0x83, 0x33, 0x34, 0x95};
    static const uint8_t returned_831[] = { 0xa3, 0xd0, 0xe6, 0xfd, 0x6d, 0xc3, 0xec, 0x6c, 0x7e, 0x18, 0xeb, 0xfc, 0x4b, 0x4b, 0xb3, 0x8a, 0x83, 0x5b, 0x95, 0xe0, 0x1a, 0x68, 0xda, 0x4d, 0x4c, 0x72, 0xd3, 0x86, 0x3c, 0x0e, 0x39, 0x36, 0x5d, 0x4c, 0xa4, 0x60, 0xac, 0x0b, 0xdb, 0xb0, 0xbc, 0xfa, 0xdb, 0x0c, 0x07, 0xd1, 0xf8, 0xd5, 0xf1, 0x7e, 0xdb, 0x04, 0x3d, 0x0e, 0xc5, 0xa9, 0xfe, 0xa4, 0x9f, 0xf3, 0x9d, 0x4f, 0xe1, 0xb7};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_830, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_831, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15918 */
  {
    static const uint8_t entropy_832[] = { 0x97, 0x4a, 0x99, 0x93, 0xcb, 0xef, 0xeb, 0x61, 0x45, 0xaf, 0x84, 0x22, 0x7a, 0x7f, 0x41, 0xe0, 0x12, 0x7d, 0x2a, 0xf7, 0xf0, 0x3c, 0x8d, 0x30, 0xd8, 0xfc, 0x5e, 0x2b, 0x53, 0x32, 0x27, 0x85, 0xb5, 0x5b, 0xfc, 0x48, 0x48, 0x9b, 0xce, 0x8c, 0xbc, 0xd6, 0x2b, 0x0f, 0x63, 0x0a, 0x0d, 0x26};
    static const uint8_t returned_833[] = { 0xb8, 0xd3, 0xa4, 0x16, 0x6d, 0xc1, 0x30, 0x3b, 0x12, 0x02, 0x24, 0x77, 0xbb, 0x95, 0x4c, 0xb1, 0x8f, 0x26, 0xc1, 0x5e, 0xe3, 0x21, 0x26, 0x4e, 0x26, 0x96, 0xe1, 0x9a, 0x05, 0xdd, 0x77, 0xc7, 0xf6, 0x6d, 0x15, 0xfc, 0xa1, 0xa9, 0xa3, 0x9e, 0xc6, 0x80, 0x64, 0x96, 0x0b, 0x2a, 0x81, 0xa9, 0x67, 0x29, 0xf9, 0xfd, 0x30, 0xdc, 0x3c, 0x17, 0xa4, 0x88, 0x5f, 0xa8, 0x57, 0x84, 0xfe, 0x88};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_832, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_833, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15926 */
  {
    static const uint8_t entropy_834[] = { 0xe4, 0xbf, 0x9e, 0xdc, 0x2a, 0x80, 0xb8, 0x2b, 0x9c, 0xed, 0xcf, 0xc2, 0x4a, 0xad, 0xcc, 0x1c, 0x86, 0x87, 0xb2, 0x83, 0xd2, 0xc8, 0xd7, 0xa2, 0xe8, 0xe6, 0xe3, 0x21, 0xd8, 0x2b, 0xca, 0x7f, 0x39, 0x52, 0x2f, 0x16, 0xf0, 0xeb, 0xe0, 0x5d, 0x9f, 0x34, 0xa6, 0x79, 0xba, 0xab, 0xda, 0xbf};
    static const uint8_t returned_835[] = { 0x03, 0x4e, 0x73, 0xc2, 0xd0, 0x87, 0xc0, 0xc8, 0x56, 0x0b, 0xe9, 0x1b, 0xce, 0x03, 0x5f, 0x21, 0x01, 0x05, 0xc3, 0xa0, 0x55, 0x57, 0x32, 0x38, 0xe5, 0xf7, 0xd3, 0xff, 0x81, 0xc4, 0x34, 0x69, 0x2e, 0x73, 0x1f, 0xf9, 0x24, 0x60, 0x9a, 0xb3, 0x65, 0x5b, 0x82, 0xab, 0xc0, 0x11, 0xce, 0xba, 0x4f, 0xad, 0x2d, 0x66, 0xa1, 0x52, 0x23, 0x96, 0x11, 0xcf, 0xc5, 0x80, 0xe0, 0x5f, 0xa5, 0x4c};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_834, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_835, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15934 */
  {
    static const uint8_t entropy_836[] = { 0x5c, 0xe9, 0xed, 0xc1, 0x2b, 0xe6, 0xc7, 0x8d, 0xb3, 0xf1, 0xb9, 0x8a, 0xe5, 0x35, 0xa3, 0xc8, 0x95, 0x8b, 0xee, 0xbd, 0xa0, 0x59, 0x4f, 0x23, 0x9b, 0x62, 0x65, 0xff, 0x81, 0x21, 0x6c, 0x59, 0x8b, 0xbb, 0x67, 0x38, 0x2e, 0xfc, 0x01, 0x91, 0xe8, 0x62, 0x66, 0xd7, 0xe6, 0x2a, 0xad, 0xf1};
    static const uint8_t returned_837[] = { 0x2e, 0xbc, 0xbb, 0x47, 0x08, 0xf6, 0x32, 0x5f, 0xd3, 0x8d, 0x46, 0x3f, 0x45, 0x1a, 0xcb, 0x2b, 0x2d, 0x58, 0xd7, 0xa8, 0x56, 0x65, 0x26, 0x25, 0x4b, 0x47, 0x2e, 0x33, 0x90, 0xd5, 0x90, 0xa0, 0x11, 0xc6, 0x7f, 0xac, 0x45, 0x14, 0x12, 0x6f, 0xce, 0x0c, 0xf9, 0xd7, 0x50, 0x60, 0xa2, 0xfb, 0xa8, 0xc3, 0x8e, 0x0f, 0xfa, 0x69, 0x0f, 0x8d, 0xc7, 0x43, 0x2b, 0x94, 0x28, 0x57, 0x87, 0xd3};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_836, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_837, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15942 */
  {
    static const uint8_t entropy_838[] = { 0xa7, 0xd0, 0xdb, 0x93, 0xe7, 0x7f, 0xf1, 0xd1, 0xae, 0x04, 0xa8, 0x2b, 0x7f, 0xb1, 0xc1, 0xdc, 0xf3, 0x3a, 0x1a, 0x63, 0x5b, 0xf5, 0x76, 0xbd, 0x4a, 0xca, 0x14, 0x8e, 0xfb, 0xf9, 0x9c, 0x20, 0x00, 0x0e, 0xc4, 0x93, 0x1b, 0x4c, 0xc3, 0xcd, 0x33, 0xe9, 0x0f, 0xac, 0x35, 0x1e, 0xed, 0xae};
    static const uint8_t returned_839[] = { 0x06, 0x10, 0xcf, 0x7d, 0xb6, 0x03, 0x86, 0xba, 0x11, 0xb4, 0xee, 0x09, 0x14, 0xf4, 0xda, 0x29, 0x04, 0x13, 0xa4, 0x5a, 0x2e, 0xc5, 0x52, 0x96, 0x32, 0x8c, 0xf4, 0xe9, 0xcc, 0xe0, 0x13, 0x5e, 0xcc, 0x8f, 0x4d, 0x79, 0x15, 0xf1, 0x3f, 0xd5, 0xb1, 0xcf, 0x7c, 0x93, 0x3e, 0xf4, 0xa1, 0x6e, 0xa6, 0x72, 0x7e, 0xc7, 0x8e, 0xa4, 0x2a, 0x1e, 0x5b, 0xb0, 0x0b, 0x49, 0x30, 0x10, 0xac, 0xfe};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_838, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_839, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15950 */
  {
    static const uint8_t entropy_840[] = { 0xb3, 0xbb, 0xa7, 0x1d, 0x87, 0xb1, 0x11, 0x15, 0xa8, 0x37, 0x3c, 0x1c, 0x82, 0xef, 0x2d, 0x03, 0x5c, 0x47, 0xd1, 0x85, 0x8f, 0x6f, 0xea, 0x1c, 0xae, 0xe3, 0x4a, 0x9e, 0xde, 0x78, 0x21, 0x5f, 0x27, 0xa5, 0xd5, 0x1f, 0xbe, 0x6a, 0x54, 0x21, 0xbe, 0x5b, 0xa7, 0xa3, 0x48, 0xf4, 0x11, 0x5b};
    static const uint8_t returned_841[] = { 0x0e, 0x56, 0x84, 0xcf, 0x87, 0x4f, 0x96, 0xb2, 0x62, 0xd7, 0x98, 0x84, 0xde, 0x6e, 0xa2, 0x18, 0x62, 0xb0, 0x1d, 0x07, 0x6e, 0x47, 0xbe, 0x99, 0x69, 0xd5, 0x54, 0x79, 0x1e, 0xb8, 0x10, 0x59, 0x83, 0xb0, 0x36, 0x49, 0x76, 0xee, 0xe0, 0x3a, 0x7a, 0xf1, 0xc3, 0x7f, 0x8d, 0xc7, 0x31, 0xe7, 0xd3, 0x76, 0x19, 0xfe, 0x98, 0x97, 0x7f, 0x60, 0x7e, 0xdb, 0x1a, 0x18, 0xa0, 0xc9, 0x6d, 0xdb};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_840, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_841, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15958 */
  {
    static const uint8_t entropy_842[] = { 0x65, 0xf0, 0x4b, 0x9f, 0x59, 0xc0, 0x1d, 0x80, 0xb5, 0xba, 0x9b, 0x17, 0x12, 0x2e, 0x9c, 0xfe, 0x9b, 0xa5, 0x4f, 0x70, 0x8b, 0xc7, 0x60, 0x8a, 0x0b, 0xcb, 0x96, 0x0c, 0xd4, 0x12, 0x41, 0x65, 0xac, 0x88, 0x6f, 0xf0, 0xde, 0x77, 0x06, 0x4b, 0x01, 0xee, 0x4d, 0x18, 0x3c, 0xdd, 0xd3, 0x52};
    static const uint8_t returned_843[] = { 0x23, 0x7a, 0x26, 0x29, 0x58, 0xa1, 0x6c, 0x52, 0x21, 0x0b, 0xc6, 0xfb, 0xa0, 0xa0, 0x5b, 0x79, 0x5b, 0x6f, 0x86, 0x6f, 0x97, 0x69, 0xaa, 0xfa, 0x0c, 0xc2, 0x6d, 0x15, 0x7f, 0x28, 0xee, 0x0b, 0xdb, 0x10, 0xc2, 0x64, 0x2b, 0xdc, 0x15, 0xdf, 0xb2, 0x51, 0xa1, 0xf0, 0x09, 0x48, 0xec, 0x97, 0x42, 0x05, 0xdb, 0x45, 0xc0, 0xe5, 0x51, 0xd6, 0x6e, 0xf5, 0xa2, 0x9e, 0x06, 0xe8, 0x72, 0x01};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_842, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_843, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15966 */
  {
    static const uint8_t entropy_844[] = { 0xea, 0x43, 0xc2, 0x91, 0xee, 0xb5, 0xdc, 0xe5, 0x5c, 0x76, 0x33, 0x92, 0x86, 0x26, 0x0a, 0x7c, 0xe4, 0x1c, 0x24, 0x6b, 0x7f, 0x84, 0xff, 0x5c, 0x83, 0x41, 0x8f, 0x01, 0x39, 0x7e, 0x46, 0xad, 0xe4, 0xfc, 0x95, 0x10, 0xc2, 0xb8, 0xc7, 0xd6, 0x8d, 0xcf, 0xa1, 0x35, 0x8c, 0x3f, 0xa1, 0x29};
    static const uint8_t returned_845[] = { 0x7e, 0xdd, 0x8b, 0xdc, 0x5e, 0x83, 0x69, 0xe5, 0x1d, 0x9d, 0x55, 0x11, 0x03, 0xab, 0xeb, 0x91, 0x0c, 0x73, 0xed, 0x10, 0xfe, 0xd4, 0x12, 0x22, 0x40, 0x03, 0x96, 0xab, 0xea, 0x1c, 0x18, 0x03, 0x44, 0x09, 0x6e, 0xb4, 0x1b, 0xd4, 0x4a, 0x59, 0xda, 0xab, 0x19, 0xfc, 0xb9, 0xff, 0x40, 0x62, 0x96, 0x9e, 0x11, 0xf3, 0xcf, 0xa7, 0x96, 0x09, 0x1b, 0x60, 0x88, 0x14, 0xcc, 0xc2, 0xe7, 0x13};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_844, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_845, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15974 */
  {
    static const uint8_t entropy_846[] = { 0x57, 0xd2, 0xb1, 0xcb, 0x0e, 0x13, 0x7e, 0x3b, 0xe1, 0x50, 0xa9, 0xf4, 0x0c, 0x89, 0x6c, 0xba, 0x0a, 0x58, 0x33, 0x5c, 0x0d, 0x92, 0x70, 0x59, 0xd3, 0xc9, 0xb6, 0x3a, 0xb9, 0x80, 0x0e, 0x81, 0xcd, 0x98, 0x03, 0xd1, 0x62, 0x5f, 0x3f, 0xe5, 0x53, 0xa6, 0x90, 0xc2, 0x87, 0x87, 0xc4, 0x5f};
    static const uint8_t returned_847[] = { 0xef, 0x27, 0x8d, 0x11, 0xa6, 0xd6, 0x94, 0xb3, 0x0e, 0xd5, 0xa1, 0x08, 0x1e, 0xb2, 0xbf, 0x3d, 0x2e, 0xd7, 0x87, 0x25, 0xa6, 0x7e, 0xd7, 0xe0, 0x14, 0xf7, 0x9e, 0x5b, 0xe2, 0xef, 0xfe, 0x68, 0x71, 0xaf, 0x2b, 0xdf, 0xef, 0xfc, 0xc6, 0xca, 0x99, 0x9c, 0x09, 0x7c, 0x62, 0x01, 0x84, 0xfc, 0x60, 0x71, 0x3a, 0xa3, 0x99, 0x07, 0x90, 0x9d, 0x6e, 0xb1, 0x53, 0xd2, 0xb6, 0x11, 0x67, 0x3c};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_846, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_847, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15982 */
  {
    static const uint8_t entropy_848[] = { 0xf5, 0x4d, 0x75, 0xfe, 0x5e, 0x7f, 0xe6, 0xd8, 0x5a, 0x6b, 0x47, 0x22, 0x88, 0xb4, 0x63, 0x3b, 0xd5, 0x43, 0x77, 0xb8, 0xb4, 0xe5, 0x6a, 0x4a, 0xc0, 0x47, 0xba, 0x7c, 0xa2, 0x04, 0x01, 0x37, 0x2a, 0xe2, 0x4c, 0x4b, 0xd1, 0x29, 0x5a, 0xf9, 0xb9, 0x9c, 0xdc, 0xc8, 0xd0, 0xd8, 0x37, 0xb1};
    static const uint8_t returned_849[] = { 0xc8, 0xb5, 0xcb, 0x19, 0xfd, 0x44, 0x34, 0x22, 0x53, 0x3d, 0xa7, 0x4d, 0xaf, 0xb2, 0xe3, 0xa7, 0x3b, 0xef, 0x13, 0xb9, 0xcf, 0x1c, 0x1c, 0xe6, 0x10, 0x40, 0x78, 0x55, 0x71, 0x35, 0x32, 0x20, 0xca, 0xab, 0x0b, 0x4e, 0xd1, 0xfa, 0x37, 0x30, 0x2a, 0x30, 0x8a, 0x31, 0xe1, 0xc7, 0xe4, 0x4d, 0xb4, 0x66, 0x9a, 0x86, 0x8d, 0xa8, 0x53, 0x6e, 0x68, 0x89, 0xbe, 0x3e, 0xc6, 0x15, 0x45, 0xfe};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_848, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_849, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15990 */
  {
    static const uint8_t entropy_850[] = { 0x1f, 0x2f, 0xd9, 0x79, 0x65, 0x6d, 0x5a, 0xf3, 0xcb, 0x2b, 0xf9, 0xa4, 0x49, 0xb2, 0xe0, 0x78, 0x35, 0xb9, 0x59, 0xe2, 0x18, 0x31, 0x74, 0x18, 0xdb, 0xd1, 0x0a, 0x01, 0x67, 0x96, 0xe2, 0x1a, 0x64, 0x45, 0x3c, 0x76, 0x51, 0x30, 0xb7, 0xd8, 0x26, 0x81, 0xa7, 0x0c, 0xfa, 0x43, 0x89, 0x75};
    static const uint8_t returned_851[] = { 0x40, 0x88, 0x42, 0xf1, 0x5a, 0x33, 0x51, 0x92, 0x89, 0x64, 0xe7, 0x79, 0x28, 0xbf, 0xec, 0xb8, 0xdc, 0x0c, 0x27, 0x25, 0xa0, 0xb4, 0x70, 0xed, 0xb7, 0x4a, 0x13, 0x91, 0xfe, 0xd9, 0x1b, 0x40, 0x01, 0x04, 0x31, 0xe4, 0x76, 0x7c, 0xf8, 0xe8, 0x6b, 0x3f, 0x64, 0x0f, 0x4e, 0x98, 0xa1, 0xef, 0x4e, 0x54, 0xf5, 0xa5, 0xd3, 0xbb, 0xf6, 0x9c, 0x4c, 0x7a, 0x46, 0x2a, 0xd6, 0x7a, 0x6a, 0xe5};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_850, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_851, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:15998 */
  {
    static const uint8_t entropy_852[] = { 0x72, 0x79, 0x67, 0x6c, 0xff, 0x67, 0x61, 0xdd, 0x73, 0x8a, 0x34, 0x7b, 0x64, 0x4e, 0x69, 0x1e, 0x0f, 0xec, 0xbc, 0xd8, 0x2c, 0x2f, 0x07, 0x36, 0xa2, 0x61, 0xda, 0x3a, 0x66, 0x33, 0x25, 0x9f, 0x56, 0xbd, 0xc4, 0x4d, 0xcf, 0x0d, 0x0b, 0xda, 0x35, 0xbf, 0xe7, 0x74, 0x63, 0x26, 0x5c, 0x0a};
    static const uint8_t returned_853[] = { 0xdb, 0xeb, 0x1d, 0xe3, 0x4b, 0x0e, 0x6f, 0x1c, 0x96, 0xcf, 0x4a, 0xfd, 0x1e, 0x12, 0x30, 0xe4, 0x34, 0xbc, 0xb1, 0xa5, 0x49, 0x7f, 0x79, 0x78, 0x71, 0xe1, 0x6a, 0xa3, 0xf6, 0x0f, 0x8d, 0xbc, 0xb4, 0xb3, 0xf0, 0x20, 0xbc, 0xa9, 0x4f, 0x23, 0xe3, 0x5d, 0x49, 0x40, 0x62, 0x23, 0x8b, 0x45, 0x8e, 0xf3, 0xd3, 0xd9, 0xfc, 0xb2, 0xb5, 0x1a, 0xa1, 0x1c, 0xa6, 0xb8, 0x3a, 0x20, 0x6c, 0x1e};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_852, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_853, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16006 */
  {
    static const uint8_t entropy_854[] = { 0xc1, 0xfd, 0xb2, 0x16, 0x7e, 0x6d, 0xb3, 0x31, 0xa3, 0xe7, 0x96, 0xc8, 0x3c, 0x8b, 0x10, 0x35, 0x26, 0x50, 0xc2, 0x0c, 0xdc, 0xc4, 0x1b, 0x85, 0x9f, 0x8b, 0x00, 0x59, 0xf2, 0x63, 0x8b, 0xdc, 0xec, 0xa6, 0x12, 0x09, 0x28, 0xc3, 0x31, 0x1b, 0x6b, 0x8d, 0x76, 0x4a, 0x67, 0xb4, 0x71, 0x92};
    static const uint8_t returned_855[] = { 0xb9, 0xec, 0x75, 0x3c, 0xa4, 0x6b, 0xdc, 0x10, 0x58, 0xf5, 0xb7, 0x7a, 0x9d, 0x1d, 0x9d, 0x70, 0x90, 0xd0, 0xb7, 0x0f, 0x8b, 0x99, 0x95, 0x65, 0x8b, 0x8d, 0x5a, 0xbc, 0xb6, 0x84, 0x62, 0xa0, 0x9c, 0x59, 0xcf, 0x40, 0x4b, 0xc4, 0xa6, 0x25, 0x03, 0x7b, 0x52, 0xba, 0x10, 0xe3, 0x36, 0xc2, 0xbb, 0xd0, 0x49, 0xa5, 0x07, 0xfd, 0xb9, 0x5e, 0x32, 0xd0, 0x99, 0x04, 0xa2, 0x48, 0x2f, 0x97};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    rng.instantiate(entropy_854, NULL, 0);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_855, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16150 */
  {
    static const uint8_t entropy_856[] = { 0xbc, 0x87, 0x8e, 0x4f, 0xb5, 0x9b, 0xf4, 0x3c, 0xc7, 0xf8, 0x65, 0x25, 0xa0, 0xdb, 0x68, 0x84, 0x5b, 0x88, 0xee, 0x48, 0x4b, 0x4b, 0x6e, 0x59, 0xa4, 0xe0, 0x16, 0xac, 0x61, 0xcb, 0xf1, 0x54, 0x29, 0xdc, 0x50, 0x91, 0x6e, 0x5b, 0xdb, 0x38, 0x4c, 0xc1, 0x7d, 0x19, 0xb7, 0xb6, 0xdf, 0xcb};
    static const uint8_t returned_857[] = { 0xd9, 0x46, 0x15, 0xf9, 0xb2, 0x3b, 0x17, 0x29, 0x3b, 0x9a, 0xe8, 0xe1, 0x5f, 0x36, 0x3e, 0xc0, 0x7b, 0xfc, 0xce, 0x20, 0xd9, 0x18, 0x3c, 0x0c, 0xa9, 0xbf, 0xd2, 0x5d, 0x67, 0xa8, 0x52, 0x03, 0x64, 0x51, 0x62, 0xad, 0x91, 0x04, 0x55, 0x2e, 0x7c, 0xd1, 0xfb, 0x87, 0x13, 0xbd, 0xdd, 0x57, 0x9b, 0x70, 0x5a, 0x80, 0x74, 0xa9, 0xaf, 0x93, 0x17, 0x19, 0x72, 0xc8, 0x51, 0x22, 0x1f, 0x4d};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_858[] = { 0x92, 0xc5, 0x22, 0x1d, 0x5c, 0xcb, 0xc3, 0x9e, 0x4a, 0xd3, 0xa7, 0x9c, 0x93, 0x62, 0x09, 0x18, 0x57, 0xa7, 0xad, 0x45, 0x69, 0x66, 0x0a, 0x78, 0x6b, 0xda, 0xce, 0x18, 0xd5, 0x74, 0xd1, 0x8d, 0xfb, 0xa4, 0xcc, 0x10, 0xf7, 0xa4, 0xc8, 0x22, 0x30, 0x08, 0x9b, 0xe7, 0xc0, 0xd8, 0x65, 0x7f};
    rng.instantiate(entropy_856, personalization_858, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_857, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16158 */
  {
    static const uint8_t entropy_859[] = { 0x30, 0x3d, 0x58, 0x96, 0xd6, 0x05, 0x26, 0xf7, 0xde, 0xcb, 0x2b, 0x77, 0x6b, 0xd5, 0x8e, 0x5c, 0x2c, 0x5b, 0x89, 0x56, 0xfc, 0x29, 0xf6, 0x8a, 0xec, 0xba, 0xf8, 0x48, 0xc9, 0x3a, 0xbb, 0x54, 0x31, 0x59, 0xa8, 0x7d, 0x5f, 0x73, 0x30, 0x3a, 0x82, 0xd3, 0xa7, 0x34, 0xe3, 0x1d, 0x7c, 0x2b};
    static const uint8_t returned_860[] = { 0x72, 0xcf, 0x7c, 0x85, 0xb9, 0x53, 0x1d, 0x6c, 0xa5, 0x03, 0x62, 0xbb, 0x9b, 0xa6, 0xd6, 0xbe, 0x72, 0x3a, 0x68, 0x8d, 0x8a, 0xbc, 0x87, 0x17, 0xab, 0x5c, 0xf9, 0x4b, 0x1d, 0xbe, 0xf0, 0x8f, 0x4b, 0x50, 0xee, 0x11, 0xaf, 0x4b, 0x80, 0x3a, 0xac, 0xc3, 0x9e, 0x44, 0x23, 0x89, 0x92, 0x92, 0xa3, 0x99, 0x38, 0x4d, 0x11, 0x8f, 0xe0, 0xc4, 0xe9, 0x54, 0x98, 0x1c, 0xff, 0xd4, 0xac, 0x44};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_861[] = { 0x0a, 0x66, 0xbb, 0xef, 0x02, 0x25, 0xa5, 0x5a, 0x61, 0x52, 0xd3, 0x6f, 0x3a, 0x54, 0xe3, 0x42, 0x36, 0x79, 0x94, 0x20, 0xbc, 0x1c, 0xe1, 0xb6, 0xf7, 0x32, 0x28, 0xa5, 0x7c, 0x9b, 0xca, 0x79, 0x2b, 0xb0, 0xd3, 0x0f, 0x58, 0xb6, 0x04, 0x6b, 0xac, 0x73, 0xeb, 0xb5, 0xbe, 0x92, 0xd6, 0x09};
    rng.instantiate(entropy_859, personalization_861, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_860, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16166 */
  {
    static const uint8_t entropy_862[] = { 0x39, 0xbc, 0xf4, 0xd3, 0x13, 0x5e, 0x1d, 0x80, 0xd0, 0x87, 0xa1, 0x1d, 0x7b, 0x9b, 0xbe, 0x02, 0xab, 0xf2, 0x53, 0x10, 0x12, 0xe5, 0x5f, 0xd1, 0x71, 0x01, 0xdc, 0x2f, 0x58, 0x61, 0x34, 0xf5, 0x53, 0x98, 0xba, 0xe3, 0x9b, 0x1b, 0xdf, 0x87, 0x3d, 0x2c, 0x42, 0xe3, 0x4b, 0x59, 0xd7, 0x31};
    static const uint8_t returned_863[] = { 0xaa, 0x7e, 0x7c, 0x9d, 0x69, 0x1e, 0xc5, 0x2a, 0xb0, 0x3b, 0x60, 0x24, 0xa3, 0xbc, 0xd7, 0x4f, 0xe8, 0x28, 0x98, 0x72, 0x89, 0xbe, 0xa1, 0x33, 0x09, 0xb3, 0x7b, 0xd6, 0x4a, 0x48, 0x16, 0xcf, 0x18, 0x39, 0x2c, 0xe4, 0x93, 0x83, 0x02, 0x9a, 0x46, 0x40, 0xd8, 0xed, 0xd4, 0x79, 0xd0, 0x4e, 0x32, 0x8f, 0xfe, 0x33, 0xf6, 0x3d, 0xaa, 0x40, 0x7b, 0x15, 0x34, 0xa6, 0x7a, 0xb3, 0x9b, 0x15};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_864[] = { 0x1c, 0xc5, 0x46, 0xdb, 0x68, 0x3b, 0xc3, 0xd9, 0xa4, 0xcf, 0x21, 0x4e, 0x90, 0x14, 0x3b, 0x74, 0x95, 0xda, 0x36, 0x11, 0x4e, 0x22, 0x3f, 0x13, 0x14, 0x90, 0x09, 0x58, 0x4a, 0x07, 0x0b, 0x24, 0x71, 0xae, 0x7a, 0x7c, 0x16, 0xf4, 0x97, 0xa0, 0x4b, 0x06, 0xfa, 0xbf, 0x69, 0xf4, 0x87, 0x8c};
    rng.instantiate(entropy_862, personalization_864, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_863, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16174 */
  {
    static const uint8_t entropy_865[] = { 0xa9, 0x4e, 0x58, 0x43, 0x4c, 0x8a, 0xe4, 0xa0, 0xdb, 0x42, 0xf4, 0xc4, 0xe8, 0x27, 0xd3, 0xad, 0x4d, 0xfd, 0xc6, 0xaf, 0xa9, 0x43, 0x39, 0xa4, 0xc8, 0x1a, 0x55, 0xef, 0x38, 0xaf, 0x7b, 0x20, 0xc2, 0x34, 0x3f, 0xee, 0xc4, 0xf9, 0xed, 0xd9, 0xfd, 0x5b, 0x3f, 0x9b, 0x3d, 0xc4, 0x98, 0xd7};
    static const uint8_t returned_866[] = { 0x95, 0x37, 0x68, 0x99, 0xe2, 0x57, 0xd3, 0xf8, 0x1a, 0x03, 0x4f, 0x1a, 0x2d, 0x9b, 0xc7, 0x73, 0x55, 0xdd, 0xbb, 0x8e, 0x62, 0xdf, 0xe2, 0x74, 0x50, 0x1e, 0x4d, 0xa7, 0x1f, 0x55, 0x93, 0xad, 0x59, 0x63, 0xb4, 0x30, 0x3f, 0x29, 0x00, 0xd3, 0xc8, 0x60, 0x8e, 0x9c, 0x49, 0xe7, 0xcb, 0x61, 0x8c, 0xa6, 0x80, 0xc6, 0xfb, 0xe9, 0x1e, 0xf0, 0x01, 0x46, 0xc2, 0x60, 0x35, 0xd8, 0x87, 0x5c};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_867[] = { 0x80, 0xfe, 0x06, 0x54, 0x18, 0x94, 0x20, 0x96, 0xeb, 0x9b, 0xa9, 0x43, 0x48, 0xfc, 0x64, 0xfb, 0x03, 0x40, 0xae, 0x8a, 0x21, 0x50, 0x4f, 0xb5, 0x05, 0x2d, 0x1a, 0xbb, 0xff, 0x35, 0x17, 0x2b, 0xdc, 0x95, 0x94, 0x7d, 0xc6, 0x5b, 0xaa, 0x79, 0x2f, 0x58, 0xad, 0x88, 0x13, 0xe5, 0xbe, 0x1a};
    rng.instantiate(entropy_865, personalization_867, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_866, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16182 */
  {
    static const uint8_t entropy_868[] = { 0x37, 0xda, 0xc4, 0xa5, 0x1c, 0x64, 0x2f, 0x08, 0x39, 0x20, 0xfd, 0x50, 0x42, 0xf8, 0x3b, 0x4c, 0xf3, 0xdc, 0xdf, 0xa9, 0xe2, 0xcb, 0x92, 0x54, 0x4d, 0x88, 0xa8, 0x7b, 0x4f, 0x8e, 0xb6, 0x91, 0xd8, 0xe5, 0x3a, 0xc0, 0xc0, 0x7a, 0x67, 0x91, 0xa9, 0x44, 0xb0, 0x2e, 0x43, 0x3a, 0xf9, 0xdf};
    static const uint8_t returned_869[] = { 0xb6, 0xb3, 0x2d, 0xe5, 0x24, 0xce, 0x8a, 0x90, 0xe9, 0xeb, 0xe9, 0x21, 0xfa, 0x88, 0x34, 0x50, 0x1d, 0x51, 0xed, 0x40, 0xd8, 0x1c, 0x28, 0x82, 0x44, 0x94, 0x8b, 0xc1, 0xbd, 0x6e, 0x76, 0x1b, 0xb3, 0x9c, 0xc6, 0xd0, 0x71, 0x15, 0x79, 0xc1, 0x44, 0xca, 0x3d, 0x5e, 0x1d, 0x2d, 0x23, 0x67, 0xc5, 0xb8, 0x42, 0x04, 0x81, 0x0f, 0xb4, 0x85, 0x59, 0x07, 0x7f, 0xbb, 0x99, 0x61, 0x2d, 0x67};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_870[] = { 0x9e, 0x30, 0xeb, 0x98, 0x70, 0xfa, 0xe6, 0x70, 0x9a, 0xa4, 0xdd, 0xe6, 0x3c, 0x2b, 0xdf, 0x57, 0x8c, 0xa0, 0xc3, 0x4c, 0xae, 0x99, 0x43, 0x6f, 0x80, 0xf2, 0x6c, 0x31, 0xb4, 0x72, 0xeb, 0x54, 0x01, 0xb2, 0xeb, 0x9f, 0xfb, 0x01, 0x3d, 0x65, 0x59, 0xc9, 0x81, 0x9e, 0x96, 0xde, 0x47, 0xa3};
    rng.instantiate(entropy_868, personalization_870, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_869, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16190 */
  {
    static const uint8_t entropy_871[] = { 0x59, 0xf2, 0x5f, 0xc1, 0xf5, 0x44, 0x95, 0x22, 0x59, 0x48, 0xa1, 0xee, 0x19, 0x2f, 0xb0, 0x71, 0x49, 0xef, 0x61, 0xfd, 0x36, 0x88, 0x6b, 0x8d, 0x59, 0x04, 0xf2, 0x40, 0xeb, 0x15, 0x7e, 0xbc, 0x44, 0xf0, 0xc7, 0x1f, 0xcf, 0xb0, 0xd5, 0xc6, 0x35, 0x38, 0xd0, 0x57, 0xf2, 0x93, 0x69, 0x70};
    static const uint8_t returned_872[] = { 0x44, 0x67, 0x3a, 0x86, 0xb1, 0x43, 0x22, 0xcc, 0x02, 0x88, 0x4b, 0x0a, 0x7c, 0xee, 0xb7, 0x40, 0x03, 0x25, 0xe0, 0x05, 0xbc, 0xb1, 0xa8, 0x84, 0xc4, 0x6f, 0x44, 0x73, 0x30, 0x1e, 0xf5, 0xec, 0xce, 0x27, 0x55, 0xe5, 0x0b, 0x00, 0x57, 0x88, 0x3f, 0x74, 0x89, 0xd7, 0xfe, 0x3a, 0x21, 0x59, 0x86, 0xfd, 0x8d, 0x09, 0x62, 0xae, 0xeb, 0xf0, 0xcc, 0xac, 0xc3, 0x0c, 0x46, 0xbc, 0x29, 0x1c};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_873[] = { 0xe4, 0xd9, 0x7c, 0x71, 0x30, 0xdb, 0x6c, 0xfc, 0xea, 0xdb, 0x31, 0x34, 0x74, 0x8c, 0x92, 0x1d, 0x4b, 0x44, 0x43, 0xcb, 0x97, 0x69, 0xab, 0x9e, 0x8c, 0x30, 0x1f, 0x6a, 0xa0, 0xa1, 0x49, 0xd4, 0x43, 0xd7, 0x55, 0x6c, 0xf7, 0xf3, 0xb5, 0x7a, 0x29, 0x80, 0x60, 0xa8, 0x88, 0x7b, 0xef, 0xe7};
    rng.instantiate(entropy_871, personalization_873, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_872, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16198 */
  {
    static const uint8_t entropy_874[] = { 0x8d, 0x0e, 0xc8, 0x74, 0xea, 0xe0, 0x08, 0xc7, 0xeb, 0x97, 0x89, 0x3a, 0xcd, 0x39, 0x64, 0xf9, 0xcd, 0xaa, 0x11, 0x2f, 0x12, 0xf7, 0x57, 0x8a, 0xe7, 0x73, 0xfd, 0x5e, 0x82, 0x2e, 0xd5, 0x18, 0xdf, 0x68, 0xcc, 0x65, 0x91, 0xd3, 0xee, 0x60, 0xa3, 0xd7, 0x40, 0x88, 0x8e, 0x83, 0xf5, 0x66};
    static const uint8_t returned_875[] = { 0x92, 0xe1, 0xc3, 0xa8, 0x01, 0xef, 0xd1, 0x3b, 0xcd, 0xbd, 0x60, 0xd4, 0xc4, 0xc9, 0xf9, 0xd6, 0xc2, 0x31, 0x99, 0x9a, 0xe0, 0xc2, 0x73, 0x7a, 0x97, 0x1d, 0x6b, 0x2d, 0x2b, 0xce, 0x9a, 0xfd, 0x82, 0xa7, 0x4a, 0xb0, 0x14, 0x11, 0xd9, 0x7f, 0x2b, 0xb5, 0x9a, 0xd6, 0x6f, 0x14, 0xde, 0x25, 0x6b, 0xdc, 0x12, 0x46, 0x5b, 0x95, 0x30, 0x6a, 0x83, 0xce, 0xfe, 0x95, 0xa0, 0xeb, 0xe1, 0xd9};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_876[] = { 0xa0, 0x95, 0xe5, 0x2c, 0x8b, 0x40, 0xe7, 0x59, 0x58, 0x79, 0x23, 0x1e, 0x1b, 0x31, 0x97, 0x5a, 0xf4, 0x98, 0x7d, 0x29, 0xc0, 0x72, 0xe4, 0x98, 0x98, 0xcd, 0x01, 0x9e, 0x6f, 0x69, 0xee, 0xba, 0x10, 0x0a, 0x61, 0x9f, 0xd9, 0x56, 0xc6, 0x76, 0xdf, 0xee, 0x8e, 0x30, 0xec, 0x85, 0xff, 0x21};
    rng.instantiate(entropy_874, personalization_876, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_875, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16206 */
  {
    static const uint8_t entropy_877[] = { 0xf0, 0x3a, 0xa7, 0x12, 0xde, 0xd0, 0x60, 0xc9, 0x18, 0xae, 0xc2, 0x58, 0xcd, 0x32, 0x9d, 0xd6, 0x51, 0x1b, 0x25, 0x15, 0x90, 0x2a, 0xd4, 0xb9, 0x80, 0xf0, 0xc3, 0xde, 0x5c, 0x45, 0x3c, 0x19, 0x6d, 0x55, 0xde, 0x00, 0xe5, 0xa9, 0x02, 0x83, 0x06, 0x4b, 0x02, 0xc5, 0xa9, 0xda, 0xc5, 0xcc};
    static const uint8_t returned_878[] = { 0x9a, 0x62, 0x4c, 0x85, 0x9e, 0x78, 0xa5, 0x4f, 0x82, 0xf0, 0x37, 0x1c, 0xbc, 0x09, 0x5d, 0x7f, 0x1b, 0x9f, 0xbb, 0x9f, 0xf8, 0x7d, 0xf9, 0xff, 0x7b, 0x94, 0x99, 0xbc, 0xf8, 0x9b, 0x6e, 0x37, 0x6b, 0xa1, 0xee, 0x77, 0x69, 0xd3, 0x3c, 0x6c, 0x59, 0x88, 0x57, 0x52, 0xea, 0x46, 0xa9, 0xd0, 0x2e, 0xda, 0xf2, 0x2e, 0x30, 0x06, 0xd5, 0xc7, 0x82, 0x24, 0x43, 0x07, 0x8e, 0xbd, 0xb7, 0x93};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_879[] = { 0xad, 0x6a, 0x88, 0xc5, 0x8a, 0xf7, 0x80, 0x3e, 0x1b, 0x3f, 0x41, 0x56, 0x8b, 0xd0, 0x0f, 0x69, 0x99, 0xc5, 0x2d, 0x70, 0x6a, 0x45, 0xf0, 0x34, 0x50, 0xd9, 0xfa, 0xd8, 0xc6, 0xd5, 0x41, 0x12, 0xb7, 0x2d, 0xbd, 0xc9, 0x92, 0x46, 0x98, 0x7e, 0x82, 0x3c, 0x19, 0x92, 0x63, 0x77, 0x87, 0x9d};
    rng.instantiate(entropy_877, personalization_879, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_878, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16214 */
  {
    static const uint8_t entropy_880[] = { 0xb6, 0xf3, 0x71, 0xbb, 0x2b, 0x8b, 0x13, 0xb8, 0x5a, 0xdf, 0x5f, 0xeb, 0x05, 0x19, 0xf4, 0x01, 0x39, 0xfd, 0x22, 0x94, 0x86, 0xfb, 0xe5, 0x79, 0x53, 0xe3, 0xac, 0x54, 0x1c, 0xb1, 0xbc, 0x85, 0x3a, 0x51, 0xad, 0x15, 0x7a, 0xbd, 0x27, 0xaf, 0x38, 0xf6, 0x2e, 0x1c, 0xcb, 0x27, 0x12, 0x58};
    static const uint8_t returned_881[] = { 0x6c, 0xae, 0xd1, 0x6e, 0x8a, 0x03, 0x4b, 0x14, 0x78, 0x5d, 0xf2, 0xa1, 0xab, 0x95, 0xcc, 0x48, 0xfc, 0x61, 0xf5, 0x47, 0x9d, 0x73, 0xac, 0x0c, 0x92, 0x38, 0xc9, 0xab, 0xcc, 0x26, 0x70, 0x5e, 0xb6, 0x00, 0x16, 0x4d, 0xac, 0x29, 0xe9, 0xc6, 0xba, 0x2c, 0xb3, 0xc4, 0x90, 0x6e, 0x76, 0xe5, 0x28, 0xf9, 0x5a, 0x51, 0x2c, 0x8f, 0xda, 0x76, 0xfe, 0x2d, 0x77, 0xc5, 0x5f, 0x02, 0x59, 0xb2};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_882[] = { 0x7e, 0x56, 0x47, 0x3a, 0xac, 0xd1, 0x3c, 0xc7, 0x30, 0xce, 0xb5, 0x98, 0xa0, 0xe4, 0xae, 0x73, 0x1f, 0xc4, 0xbb, 0xa5, 0x8e, 0x1e, 0x2b, 0xa2, 0x16, 0xaa, 0x84, 0x6c, 0x83, 0xeb, 0x90, 0xc2, 0x14, 0xb0, 0x2a, 0x1a, 0x08, 0xc2, 0x68, 0xb5, 0xea, 0xe8, 0xa4, 0x7d, 0x28, 0x78, 0x83, 0x3f};
    rng.instantiate(entropy_880, personalization_882, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_881, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16222 */
  {
    static const uint8_t entropy_883[] = { 0xf7, 0x50, 0x15, 0xae, 0x8c, 0x9e, 0xf8, 0xca, 0x5f, 0x82, 0xd9, 0xf3, 0x14, 0x77, 0xa9, 0x3b, 0x0c, 0x25, 0x93, 0x00, 0xe4, 0x78, 0x9b, 0x12, 0x16, 0xb7, 0x9d, 0x33, 0xe3, 0x01, 0xfa, 0xdc, 0x10, 0x20, 0x12, 0xdf, 0x02, 0xf7, 0xa7, 0xad, 0xf5, 0x1c, 0x20, 0xf9, 0x92, 0x11, 0x94, 0x59};
    static const uint8_t returned_884[] = { 0x7e, 0x4b, 0x05, 0x96, 0x87, 0xbc, 0x22, 0x00, 0x3c, 0xd0, 0xaa, 0x93, 0x6d, 0x30, 0x5c, 0xe0, 0x9e, 0xad, 0xe4, 0xf3, 0xa5, 0x4e, 0xc9, 0x52, 0x3b, 0x8b, 0xfc, 0x68, 0x32, 0xd2, 0xc0, 0x10, 0x5c, 0xa2, 0x65, 0x2c, 0x74, 0x98, 0x08, 0x06, 0x9c, 0x11, 0xab, 0xa3, 0xbf, 0x39, 0x20, 0x57, 0x61, 0x6d, 0x48, 0x36, 0x5d, 0x15, 0xb7, 0xcc, 0x42, 0x89, 0xfa, 0xb9, 0xf9, 0x36, 0x1e, 0xd2};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_885[] = { 0x2e, 0x6a, 0x2b, 0x62, 0x7d, 0xc6, 0xda, 0x85, 0x21, 0x46, 0x97, 0xb8, 0x41, 0x3d, 0x01, 0xde, 0xe9, 0x1d, 0x32, 0x5f, 0x59, 0x18, 0x1f, 0xd0, 0x2b, 0xdf, 0x1a, 0xc2, 0xd9, 0x6e, 0x83, 0xb3, 0x53, 0x32, 0x82, 0x1e, 0x9f, 0x4f, 0x7c, 0x9b, 0x63, 0x99, 0xf2, 0x02, 0x60, 0xa5, 0xd0, 0xa9};
    rng.instantiate(entropy_883, personalization_885, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_884, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16230 */
  {
    static const uint8_t entropy_886[] = { 0x78, 0x14, 0x71, 0xb8, 0xd6, 0xd6, 0x6e, 0xdb, 0x77, 0x8b, 0x54, 0x74, 0x2c, 0xc9, 0x04, 0x07, 0xa9, 0xa3, 0x25, 0xd9, 0x02, 0xa5, 0x96, 0xc3, 0x70, 0x80, 0xcf, 0xbe, 0xc6, 0x57, 0x52, 0x59, 0x87, 0x04, 0xc4, 0x5d, 0x9e, 0x75, 0x7e, 0xda, 0x57, 0xe8, 0x81, 0x9c, 0x04, 0x7b, 0x36, 0xc7};
    static const uint8_t returned_887[] = { 0xbf, 0x12, 0xdf, 0xf4, 0xe3, 0xab, 0x3b, 0x09, 0x41, 0x65, 0x80, 0x3d, 0xa0, 0xc1, 0xa8, 0xde, 0x2a, 0xce, 0x25, 0x4a, 0x1d, 0x65, 0xe4, 0xbb, 0x8f, 0xf3, 0x9d, 0xb9, 0x32, 0x7b, 0xf1, 0xeb, 0xcd, 0xe3, 0x24, 0xd9, 0x51, 0x27, 0x26, 0xd5, 0x19, 0x63, 0x4f, 0x8d, 0x72, 0x4e, 0xd5, 0xa7, 0x93, 0x5d, 0xb5, 0x09, 0xba, 0x03, 0x72, 0x00, 0x34, 0x7c, 0xfb, 0x7c, 0x00, 0xb0, 0x46, 0xd7};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_888[] = { 0xc3, 0x58, 0xa3, 0xc4, 0xaa, 0x33, 0x84, 0xe0, 0x53, 0xbf, 0xa4, 0xa3, 0xb3, 0x32, 0xdf, 0xd1, 0xdf, 0x79, 0xf3, 0x41, 0xa3, 0xe5, 0x9f, 0x0e, 0x50, 0x15, 0xe8, 0x87, 0x1f, 0xe7, 0x4f, 0xcf, 0x9b, 0x4a, 0xc9, 0xfd, 0x54, 0x56, 0xf9, 0x72, 0xea, 0x24, 0xaa, 0x19, 0xcf, 0x59, 0xce, 0xde};
    rng.instantiate(entropy_886, personalization_888, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_887, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16238 */
  {
    static const uint8_t entropy_889[] = { 0xe0, 0x6d, 0xd4, 0x40, 0xdb, 0x6e, 0x8c, 0x16, 0x01, 0x49, 0xc9, 0xe3, 0x00, 0x29, 0x89, 0x5f, 0x91, 0x27, 0x20, 0x1b, 0xe7, 0xdc, 0xbe, 0x33, 0xa8, 0x45, 0xfe, 0x1e, 0x4c, 0x3d, 0x84, 0xab, 0x26, 0xb1, 0x9c, 0xb6, 0x46, 0x6b, 0x89, 0x45, 0xca, 0xce, 0xa0, 0x9c, 0xd6, 0xd6, 0x99, 0xd9};
    static const uint8_t returned_890[] = { 0xe6, 0xc6, 0xac, 0x76, 0xf5, 0x02, 0xf0, 0x25, 0xdd, 0x26, 0x16, 0x83, 0x69, 0xf0, 0xf7, 0xe6, 0xf4, 0x05, 0x21, 0x3a, 0xa0, 0x2f, 0x6d, 0xb3, 0xb3, 0x82, 0x3c, 0x18, 0x13, 0xc8, 0xb6, 0xee, 0xd9, 0x5f, 0x71, 0xf4, 0xa7, 0x1c, 0xb8, 0x27, 0x0f, 0xfa, 0x8a, 0xc3, 0xce, 0x53, 0x66, 0xd7, 0x15, 0x67, 0x86, 0x45, 0x65, 0xee, 0xfb, 0xa7, 0x12, 0x0e, 0x2e, 0xdc, 0xc3, 0xb6, 0xec, 0x80};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_891[] = { 0x5b, 0x49, 0x42, 0xfe, 0x42, 0x63, 0xbf, 0x21, 0x65, 0x9e, 0x85, 0xbd, 0x1a, 0xc4, 0xbb, 0xb5, 0x0b, 0x94, 0x1d, 0xfc, 0xed, 0x77, 0xf4, 0x15, 0x1b, 0x8e, 0x7b, 0x52, 0x16, 0xe8, 0x21, 0xb5, 0x4c, 0x91, 0xa8, 0xe8, 0x3d, 0x9f, 0xc4, 0x75, 0x80, 0x99, 0xc8, 0xdb, 0x34, 0xd6, 0xc0, 0xfe};
    rng.instantiate(entropy_889, personalization_891, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_890, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16246 */
  {
    static const uint8_t entropy_892[] = { 0x69, 0xe7, 0xd2, 0xb5, 0xc0, 0x32, 0x43, 0xc7, 0x52, 0xed, 0x07, 0xae, 0xb0, 0x6f, 0xdd, 0x3c, 0x8c, 0xbe, 0x05, 0xb0, 0xb4, 0x2c, 0x20, 0x59, 0xe4, 0xae, 0x01, 0x24, 0x1d, 0xa7, 0x7d, 0x17, 0x89, 0x0f, 0x0f, 0xa5, 0x6c, 0x79, 0x40, 0xf6, 0x79, 0x94, 0x17, 0x38, 0x0a, 0x22, 0x88, 0xf0};
    static const uint8_t returned_893[] = { 0x75, 0xfc, 0x75, 0x72, 0x93, 0x35, 0x1c, 0x54, 0x5b, 0x1f, 0x73, 0x0f, 0xd4, 0xec, 0x82, 0x06, 0x1d, 0x85, 0xe8, 0x0f, 0x8b, 0x77, 0x12, 0x2a, 0xdb, 0x53, 0x72, 0x2b, 0x50, 0x9d, 0x7f, 0x27, 0xae, 0xbc, 0x8a, 0x5b, 0x15, 0x45, 0xb6, 0xe6, 0xbc, 0xef, 0x2c, 0x9c, 0x28, 0x0f, 0xb3, 0x07, 0xdc, 0x5a, 0xf0, 0x9b, 0x63, 0xbc, 0x86, 0x59, 0xeb, 0x6c, 0x90, 0x55, 0x07, 0xa2, 0x0e, 0x57};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_894[] = { 0xfd, 0x7a, 0x2d, 0x8b, 0xae, 0x61, 0x0a, 0x2b, 0xfb, 0xf2, 0x06, 0xc9, 0x01, 0x96, 0x01, 0xbc, 0x02, 0x75, 0x80, 0xde, 0x8f, 0x85, 0xf6, 0x02, 0x46, 0xb5, 0x12, 0x6b, 0xd5, 0xe3, 0x6f, 0x30, 0xd7, 0xf4, 0xe9, 0x0d, 0x0c, 0x46, 0xcd, 0x3a, 0x63, 0xf9, 0xd2, 0xed, 0xcf, 0x67, 0x19, 0x32};
    rng.instantiate(entropy_892, personalization_894, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_893, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16254 */
  {
    static const uint8_t entropy_895[] = { 0x32, 0x2a, 0x46, 0xb1, 0x03, 0xd6, 0xd1, 0x76, 0x5c, 0x90, 0x82, 0x9a, 0xd0, 0x6c, 0x8b, 0x80, 0xe3, 0x66, 0xb4, 0x34, 0xc2, 0x92, 0x76, 0xde, 0x3c, 0x60, 0x8d, 0xab, 0x02, 0xed, 0x03, 0x0c, 0x95, 0xa6, 0xf5, 0x79, 0xca, 0x98, 0xc0, 0xf3, 0xf9, 0x77, 0x1c, 0xba, 0x09, 0x9b, 0xfe, 0x29};
    static const uint8_t returned_896[] = { 0x6c, 0x99, 0x54, 0x63, 0xad, 0xdd, 0xec, 0x73, 0xb6, 0xc0, 0x3e, 0xec, 0xac, 0x07, 0xdb, 0x82, 0x42, 0x56, 0xa7, 0x91, 0xa1, 0xd0, 0xf4, 0xd7, 0x86, 0xe9, 0x49, 0xf0, 0xd1, 0x98, 0x7e, 0xa4, 0xae, 0xdf, 0xd3, 0xbd, 0x06, 0xb1, 0x62, 0x2c, 0xc8, 0x5a, 0x23, 0x70, 0xcd, 0x30, 0x55, 0x3e, 0xe3, 0x54, 0x3d, 0x38, 0xd1, 0xc8, 0x7c, 0xea, 0x73, 0x1e, 0x68, 0x72, 0xe7, 0x1f, 0x9d, 0xdb};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_897[] = { 0x3c, 0x86, 0xe0, 0xab, 0x0c, 0x20, 0xc6, 0x76, 0x55, 0x95, 0xce, 0x82, 0xcc, 0x54, 0xf3, 0x69, 0x25, 0x80, 0x74, 0xab, 0x2d, 0x4b, 0x8b, 0x5d, 0x9f, 0xca, 0xb7, 0xdc, 0x38, 0xfa, 0x88, 0x66, 0x07, 0x3a, 0xf3, 0xa7, 0x33, 0x54, 0x6f, 0x68, 0x5c, 0x68, 0xee, 0x68, 0x15, 0x49, 0x26, 0x91};
    rng.instantiate(entropy_895, personalization_897, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_896, 64));
  }
  /* drbgvectors_no_reseed/CTR_DRBG.rsp:16262 */
  {
    static const uint8_t entropy_898[] = { 0x7c, 0xe9, 0x97, 0x7c, 0xb8, 0x06, 0x34, 0xf0, 0x50, 0x3d, 0xee, 0xe2, 0xaf, 0xb8, 0x23, 0x0c, 0x57, 0x40, 0x8c, 0x83, 0xbf, 0x5b, 0xf4, 0x1d, 0x2d, 0x62, 0xd4, 0xda, 0xa4, 0xc4, 0x92, 0xfa, 0x60, 0xbe, 0x92, 0x74, 0xf5, 0x39, 0xef, 0x37, 0xad, 0x3b, 0x83, 0xbd, 0xac, 0xdf, 0x70, 0x2c};
    static const uint8_t returned_899[] = { 0xf1, 0x7b, 0x61, 0xf1, 0xc3, 0xca, 0xae, 0x33, 0x11, 0x60, 0xb7, 0x14, 0x50, 0x4b, 0x9c, 0x05, 0x8a, 0xc3, 0x45, 0xf0, 0x7a, 0x5a, 0x26, 0x03, 0x4d, 0xbf, 0xd7, 0xfe, 0xf5, 0x01, 0x3b, 0x52, 0xca, 0xe3, 0xe2, 0xcd, 0x35, 0x70, 0x95, 0xb6, 0x23, 0x06, 0x5e, 0xc5, 0xcb, 0x55, 0x70, 0x01, 0x88, 0x7b, 0x17, 0xf9, 0xb6, 0xf9, 0x47, 0x6d, 0x54, 0x49, 0xac, 0x7d, 0x81, 0xd5, 0xab, 0xd3};
    uint8_t buffer[64];
    AesCtrDrbg256 rng;
    static const uint8_t personalization_900[] = { 0xd8, 0x62, 0x03, 0x9c, 0xc2, 0xc2, 0x97, 0xd6, 0x35, 0x29, 0xa3, 0x3f, 0x38, 0xa6, 0xe5, 0x66, 0x0a, 0x06, 0x91, 0x9a, 0x04, 0x4c, 0x7e, 0x74, 0x6f, 0xf2, 0x38, 0xb6, 0x53, 0x21, 0xd2, 0xa2, 0x33, 0xa9, 0xa9, 0xc7, 0xb3, 0x53, 0x4c, 0x93, 0x2a, 0x88, 0x81, 0xad, 0x38, 0xd3, 0x1f, 0x65};
    rng.instantiate(entropy_898, personalization_900, 48);
    rng.stream(buffer, 64);
    rng.stream(buffer, 64);
    assert(!memcmp(buffer, returned_899, 64));
  }

  return 0;
}
